"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[47],{9556:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ QuantityInput; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "qty-box d-flex h-100"\n  }, [_c("input", {\n    ref: "quantityInputField",\n    staticClass: "qty-input text-center",\n    attrs: {\n      type: "text",\n      disabled: _vm.waiting,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInput")\n    },\n    domProps: {\n      value: _vm.displayValue\n    },\n    on: {\n      change: function change($event) {\n        return _vm.setValue($event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("div", {\n    staticClass: "qty-btn-container d-flex flex-column"\n  }, [_c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip",\n      value: _vm.isMaximum && _vm.compMax !== 0,\n      expression: "isMaximum && compMax !== 0"\n    }],\n    staticClass: "btn qty-btn flex-fill d-flex justify-content-center p-0",\n    class: {\n      disabled: _vm.isMaximum || _vm.waiting,\n      "btn-appearance": _vm.useAppearance\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      "data-testing": "quantity-btn-increase",\n      title: _vm.maximumHint,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInputIncrease")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.increaseValue();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-plus default-float",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  })]), _vm._v(" "), _c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip",\n      value: _vm.isMinimum && _vm.compMax !== 0,\n      expression: "isMinimum && compMax !== 0"\n    }],\n    staticClass: "btn qty-btn flex-fill d-flex justify-content-center p-0",\n    class: {\n      disabled: _vm.isMinimum || _vm.waiting,\n      "btn-appearance": _vm.useAppearance\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "bottom",\n      "data-testing": "quantity-btn-decrease",\n      title: _vm.minimumHint,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInputDecrease")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.decreaseValue();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-minus default-float",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  })])])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/number.js\nvar number = __webpack_require__(260);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/debounce.js\nvar debounce = __webpack_require__(9852);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/* harmony default export */ var QuantityInputvue_type_script_lang_js_ = ({\n  name: "quantity-input",\n  props: {\n    value: {\n      type: Number,\n      required: true\n    },\n    timeout: {\n      type: Number,\n      required: false,\n      default: 500\n    },\n    min: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    max: {\n      type: Number,\n      required: false\n    },\n    interval: {\n      type: Number,\n      required: false,\n      default: 1\n    },\n    waiting: {\n      type: Boolean,\n      required: false\n    },\n    variationId: {\n      type: Number,\n      required: false\n    },\n    useAppearance: Boolean\n  },\n  data: function data() {\n    return {\n      compValue: this.value,\n      compMin: this.min,\n      compMax: this.max,\n      compInterval: this.interval,\n      compDecimals: 0,\n      onValueChanged: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n    this.compInterval = (0,utils/* defaultValue */.LS)(this.compInterval, 1);\n    this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\n    var minDecimals = (0,number/* floatLength */.GQ)(this.min);\n    var intervalDecimals = (0,number/* floatLength */.GQ)(this.compInterval);\n    this.compDecimals = Math.max(minDecimals, intervalDecimals);\n    this.onValueChanged = (0,debounce/* debounce */.D)(function () {\n      _this.$emit("quantity-change", _this.compValue);\n    }, (0,utils/* defaultValue */.LS)(this.timeout, 500));\n    if (!(0,utils/* isNullOrUndefined */.le)(this.variationId)) {\n      this.fetchQuantityFromBasket();\n    }\n  },\n  computed: _objectSpread({\n    variationBasketQuantity: function variationBasketQuantity() {\n      var _this2 = this;\n      if ((0,utils/* isNullOrUndefined */.le)(this.variationId)) {\n        return 0;\n      }\n      if (this.itemSetVariationId <= 0 || this.variationId === this.itemSetVariationId) {\n        var basketObject = this.$store.state.basket.items.find(function (variations) {\n          return variations.variationId === _this2.variationId;\n        });\n        return basketObject ? basketObject.quantity : 0;\n      }\n      return 0;\n    },\n    isMinimum: function isMinimum() {\n      return (0,utils/* isDefined */.$K)(this.compMin) && this.compValue - this.compInterval < this.compMin;\n    },\n    isMaximum: function isMaximum() {\n      return (0,utils/* isDefined */.$K)(this.compMax) && this.compValue + this.compInterval > this.compMax;\n    },\n    minimumHint: function minimumHint() {\n      return this.$translate("Ceres::Template.singleItemQuantityMin", {\n        min: this.$options.filters.numberFormat(this.compMin)\n      });\n    },\n    maximumHint: function maximumHint() {\n      return this.$translate("Ceres::Template.singleItemQuantityMax", {\n        max: this.$options.filters.numberFormat(this.max)\n      });\n    },\n    displayValue: function displayValue() {\n      return this.$options.filters.numberFormat(this.compValue);\n    },\n    itemSetVariationId: function itemSetVariationId() {\n      if (this.$store.state.items.itemSetId > 0) {\n        return this.$store.getters["".concat(this.$store.state.items.itemSetId, "/currentItemVariation")].variation.id;\n      }\n      return 0;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    basketItems: function basketItems(state) {\n      return state.basket.items;\n    }\n  })),\n  watch: {\n    variationId: function variationId(newValue) {\n      if ((0,utils/* isDefined */.$K)(newValue)) {\n        this.fetchQuantityFromBasket();\n      }\n    },\n    basketItems: {\n      handler: function handler(newValue, oldValue) {\n        if ((0,utils/* isDefined */.$K)(this.variationId)) {\n          this.fetchQuantityFromBasket();\n        }\n      },\n      deep: true\n    },\n    min: function min(newValue) {\n      this.compMin = newValue;\n      this.fetchQuantityFromBasket();\n    },\n    max: function max(newValue) {\n      this.compMax = newValue;\n      this.fetchQuantityFromBasket();\n    },\n    value: function value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.setValue(newValue);\n      }\n    },\n    interval: function interval(newInterval) {\n      this.compInterval = (0,utils/* defaultValue */.LS)(newInterval, 1);\n    }\n  },\n  methods: {\n    increaseValue: function increaseValue() {\n      var newValue = (0,number/* formatFloat */.$1)(this.compValue + this.compInterval, this.compDecimals);\n      if (((0,utils/* isNullOrUndefined */.le)(this.compMax) || newValue <= this.compMax) && !this.waiting) {\n        this.setValue(newValue);\n      }\n    },\n    decreaseValue: function decreaseValue() {\n      var newValue = (0,number/* formatFloat */.$1)(this.compValue - this.compInterval, this.compDecimals);\n      if (((0,utils/* isNullOrUndefined */.le)(this.compMin) || newValue >= this.compMin) && !this.waiting) {\n        this.setValue(newValue);\n      }\n    },\n    setValue: function setValue(value) {\n      // consider the configured decimal seperator (if the input is typed in the input field)\n      if (typeof value === "string") {\n        value = value.replace(App.decimalSeparator || ",", ".");\n      }\n      value = parseFloat(value);\n      if (isNaN(value)) {\n        value = (0,utils/* defaultValue */.LS)(this.compMin, 1);\n      }\n\n      // limit new value to min/ max value\n      value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n\n      // make sure, new value is an even multiple of interval\n      var diff;\n      if (this.variationBasketQuantity === 0 && this.min !== 0) {\n        diff = (0,number/* formatFloat */.$1)((value - this.min) % this.compInterval, this.compDecimals, true);\n      } else {\n        diff = (0,number/* formatFloat */.$1)(value % this.compInterval, this.compDecimals, true);\n      }\n      if (diff > 0 && diff !== this.compInterval) {\n        if (diff < this.compInterval / 2) {\n          value -= diff;\n        } else {\n          value += this.compInterval - diff;\n        }\n        value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n      }\n\n      // cut fraction\n      value = (0,number/* formatFloat */.$1)(value, this.compDecimals);\n      if (value !== this.compValue) {\n        this.compValue = value;\n        this.onValueChanged();\n      } else if (!(0,utils/* isNullOrUndefined */.le)(this.$refs.quantityInputField)) {\n        this.$refs.quantityInputField.value = this.displayValue;\n      }\n    },\n    fetchQuantityFromBasket: function fetchQuantityFromBasket() {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.min) && this.variationBasketQuantity >= this.min && this.variationBasketQuantity !== 0) {\n        // set the minimum value to the interval, if the item is already in the basket\n        this.compMin = this.compInterval;\n      } else if (this.variationBasketQuantity === 0) {\n        // reset the minimum, when item is not in the basket\n        this.compMin = this.min;\n      }\n      if (!(0,utils/* isNullOrUndefined */.le)(this.max)) {\n        // decrease maximum quantity by quantity of variations already in basket\n        this.compMax = this.max - this.variationBasketQuantity;\n        if (this.variationBasketQuantity + this.compInterval > this.max) {\n          this.compMin = 0;\n          this.compMax = 0;\n          this.$emit("out-of-stock", true);\n        } else {\n          this.$emit("out-of-stock", false);\n        }\n      } else {\n        this.$emit("out-of-stock", false);\n      }\n      this.setValue(this.compMin);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_QuantityInputvue_type_script_lang_js_ = (QuantityInputvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_QuantityInputvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var QuantityInput = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9556\n')}}]);