{"version":3,"file":"chunks/ceres-35.min.js","mappings":"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","sources":["webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue?df9f","webpack://Ceres/resources/js/src/app/components/item/VariationSelect.vue","webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue?30ea","webpack://Ceres/./resources/js/src/app/components/item/VariationSelect.vue"],"sourcesContent":["var render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"row\" },\n    [\n      _vm.attributes.length ||\n      (_vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible)\n        ? [\n            _vm._l(_vm.attributes, function (attribute, index) {\n              return _c(\n                \"div\",\n                { key: index, staticClass: \"col-12 variation-select\" },\n                [\n                  attribute.type === \"dropdown\"\n                    ? _c(\n                        \"div\",\n                        {\n                          ref: \"attributesContaner\",\n                          refInFor: true,\n                          staticClass: \"input-unit\",\n                        },\n                        [\n                          _c(\n                            \"select\",\n                            {\n                              staticClass: \"custom-select\",\n                              attrs: {\n                                id: \"custom-select_\" + attribute.name,\n                                \"data-testing\": \"variation-select-dropdown\",\n                              },\n                              on: {\n                                change: function ($event) {\n                                  return _vm.selectAttribute(\n                                    attribute.attributeId,\n                                    $event.target.value\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _vm.addPleaseSelectOption || !_vm.hasSelection\n                                ? _c(\"option\", { domProps: { value: -1 } }, [\n                                    _vm._v(\n                                      _vm._s(\n                                        _vm.$translate(\n                                          \"Ceres::Template.singleItemPleaseSelect\"\n                                        )\n                                      )\n                                    ),\n                                  ])\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm.hasEmptyOption ||\n                              _vm.selectedAttributes[attribute.attributeId] ===\n                                null\n                                ? _c(\n                                    \"option\",\n                                    {\n                                      domProps: {\n                                        value: null,\n                                        selected:\n                                          _vm.selectedAttributes[\n                                            attribute.attributeId\n                                          ] === null,\n                                      },\n                                    },\n                                    [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                              _vm._v(\" \"),\n                              _vm._l(attribute.values, function (value) {\n                                return _c(\n                                  \"option\",\n                                  {\n                                    key: value.attributeValueId,\n                                    domProps: {\n                                      value: value.attributeValueId,\n                                      selected:\n                                        value.attributeValueId ===\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ],\n                                    },\n                                  },\n                                  [\n                                    _vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(value.name) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : _vm.isAttributeSelectionValid(\n                                          attribute.attributeId,\n                                          value.attributeValueId,\n                                          false\n                                        )\n                                      ? [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemNotSalableAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ]\n                                      : [\n                                          _vm._v(\n                                            \"\\n                            \" +\n                                              _vm._s(\n                                                _vm.$translate(\n                                                  \"Ceres::Template.singleItemInvalidAttribute\",\n                                                  { name: value.name }\n                                                )\n                                              ) +\n                                              \"\\n                        \"\n                                          ),\n                                        ],\n                                  ],\n                                  2\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                          _vm._v(\" \"),\n                          _c(\n                            \"label\",\n                            {\n                              directives: [\n                                {\n                                  name: \"tooltip\",\n                                  rawName: \"v-tooltip\",\n                                  value: _vm.isTextCut(attribute.name),\n                                  expression: \"isTextCut(attribute.name)\",\n                                },\n                              ],\n                              attrs: {\n                                for: \"custom-select_\" + attribute.name,\n                                \"data-toggle\": \"tooltip\",\n                                \"data-placement\": \"top\",\n                                title: attribute.name,\n                                \"data-testing\":\n                                  \"variation-select-dropdown-label\",\n                              },\n                            },\n                            [_vm._v(_vm._s(attribute.name))]\n                          ),\n                        ]\n                      )\n                    : attribute.type === \"box\" || attribute.type === \"image\"\n                    ? _c(\"div\", [\n                        _c(\n                          \"span\",\n                          {\n                            staticClass: \"text-muted\",\n                            attrs: { \"data-testing\": \"attribute-name\" },\n                          },\n                          [_vm._v(_vm._s(attribute.name) + \":\")]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"b\",\n                          { attrs: { \"data-testing\": \"attribute-value\" } },\n                          [\n                            _vm._v(\n                              _vm._s(\n                                _vm.getSelectedAttributeValueName(attribute)\n                              )\n                            ),\n                          ]\n                        ),\n                        _vm._v(\" \"),\n                        _c(\n                          \"div\",\n                          {\n                            staticClass: \"v-s-boxes py-3\",\n                            class: { images: attribute.type === \"image\" },\n                          },\n                          [\n                            _vm.addPleaseSelectOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === -1,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        -1\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          -1\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemPleaseSelect\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm.hasEmptyOption\n                              ? _c(\n                                  \"div\",\n                                  {\n                                    staticClass:\n                                      \"v-s-box bg-white empty-option\",\n                                    class: {\n                                      active:\n                                        _vm.selectedAttributes[\n                                          attribute.attributeId\n                                        ] === null,\n                                      invalid: !_vm.isAttributeSelectionValid(\n                                        attribute.attributeId,\n                                        null,\n                                        true\n                                      ),\n                                    },\n                                    attrs: {\n                                      \"data-testing\": \"variation-select-box\",\n                                    },\n                                    on: {\n                                      click: function ($event) {\n                                        return _vm.selectAttribute(\n                                          attribute.attributeId,\n                                          null\n                                        )\n                                      },\n                                    },\n                                  },\n                                  [\n                                    _c(\"span\", { staticClass: \"mx-3\" }, [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemNoSelection\"\n                                          )\n                                        )\n                                      ),\n                                    ]),\n                                  ]\n                                )\n                              : _vm._e(),\n                            _vm._v(\" \"),\n                            _vm._l(attribute.values, function (value) {\n                              return _c(\n                                \"div\",\n                                {\n                                  directives: [\n                                    {\n                                      name: \"tooltip\",\n                                      rawName: \"v-tooltip\",\n                                      value: true,\n                                      expression: \"true\",\n                                    },\n                                  ],\n                                  key: value.attributeValueId,\n                                  staticClass: \"v-s-box bg-white\",\n                                  class: {\n                                    active:\n                                      value.attributeValueId ===\n                                      _vm.selectedAttributes[\n                                        attribute.attributeId\n                                      ],\n                                    invalid: !_vm.isAttributeSelectionValid(\n                                      attribute.attributeId,\n                                      value.attributeValueId,\n                                      true\n                                    ),\n                                  },\n                                  attrs: {\n                                    \"data-testing\": \"variation-select-box\",\n                                    \"data-html\": \"true\",\n                                    \"data-toggle\": \"tooltip\",\n                                    \"data-placement\": \"top\",\n                                    \"data-original-title\": _vm.getTooltip(\n                                      attribute,\n                                      value\n                                    ),\n                                  },\n                                  on: {\n                                    click: function ($event) {\n                                      return _vm.selectAttribute(\n                                        attribute.attributeId,\n                                        value.attributeValueId\n                                      )\n                                    },\n                                  },\n                                },\n                                [\n                                  attribute.type === \"box\"\n                                    ? _c(\"span\", { staticClass: \"mx-3\" }, [\n                                        _vm._v(_vm._s(value.name)),\n                                      ])\n                                    : _c(\"img\", {\n                                        staticClass: \"p-1\",\n                                        attrs: {\n                                          src: value.imageUrl,\n                                          alt: value.name,\n                                        },\n                                      }),\n                                ]\n                              )\n                            }),\n                          ],\n                          2\n                        ),\n                      ])\n                    : _vm._e(),\n                ]\n              )\n            }),\n            _vm._v(\" \"),\n            _vm.possibleUnitCombinationIds.length > 1 && _vm.isContentVisible\n              ? _c(\"div\", { staticClass: \"col-12 variation-select\" }, [\n                  _c(\"div\", { staticClass: \"input-unit\" }, [\n                    _c(\n                      \"select\",\n                      {\n                        staticClass: \"custom-select\",\n                        attrs: {\n                          id: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit\",\n                        },\n                        on: {\n                          change: function ($event) {\n                            return _vm.selectUnit($event.target.value)\n                          },\n                        },\n                      },\n                      _vm._l(\n                        _vm.possibleUnitCombinationIds,\n                        function (unitCombinationId) {\n                          return _c(\n                            \"option\",\n                            {\n                              key: unitCombinationId,\n                              domProps: {\n                                value: unitCombinationId,\n                                selected:\n                                  parseInt(unitCombinationId) ===\n                                  _vm.selectedUnit,\n                              },\n                            },\n                            [\n                              _vm.isUnitSelectionValid(unitCombinationId)\n                                ? [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.possibleUnits[unitCombinationId]\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ]\n                                : [\n                                    _vm._v(\n                                      \"\\n                            \" +\n                                        _vm._s(\n                                          _vm.$translate(\n                                            \"Ceres::Template.singleItemInvalidAttribute\",\n                                            {\n                                              name: _vm.possibleUnits[\n                                                unitCombinationId\n                                              ],\n                                            }\n                                          )\n                                        ) +\n                                        \"\\n                        \"\n                                    ),\n                                  ],\n                            ],\n                            2\n                          )\n                        }\n                      ),\n                      0\n                    ),\n                    _vm._v(\" \"),\n                    _c(\n                      \"label\",\n                      {\n                        attrs: {\n                          for: \"unit-combination-ids-select\",\n                          \"data-testing\": \"variation-select-unit-label\",\n                        },\n                      },\n                      [\n                        _vm._v(\n                          _vm._s(\n                            _vm.$translate(\"Ceres::Template.singleItemContent\")\n                          )\n                        ),\n                      ]\n                    ),\n                  ]),\n                ])\n              : _vm._e(),\n          ]\n        : [_vm._t(\"default\")],\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n    <div class=\"row\">\n        <template v-if=\"attributes.length || (possibleUnitCombinationIds.length > 1 && isContentVisible)\">\n            <div class=\"col-12 variation-select\" v-for=\"(attribute, index) in attributes\" :key=\"index\">\n                <!-- dropdown -->\n                <div class=\"input-unit\" ref=\"attributesContaner\" v-if=\"attribute.type === 'dropdown'\">\n                    <select :id=\"'custom-select_' + attribute.name\" class=\"custom-select\" @change=\"selectAttribute(attribute.attributeId, $event.target.value)\" data-testing=\"variation-select-dropdown\">\n                        <option :value=\"-1\" v-if=\"addPleaseSelectOption || !hasSelection\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</option>\n                        <option\n                                :value=\"null\" v-if=\"hasEmptyOption || selectedAttributes[attribute.attributeId] === null\"\n                                :selected=\"selectedAttributes[attribute.attributeId] === null\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</option>\n                        <option\n                                v-for=\"value in attribute.values\"\n                                :value=\"value.attributeValueId\"\n                                :selected=\"value.attributeValueId === selectedAttributes[attribute.attributeId]\"\n                                :key=\"value.attributeValueId\">\n                            <template v-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true)\">\n                                {{ value.name }}\n                            </template>\n                            <template v-else-if=\"isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, false)\">\n                                {{ $translate(\"Ceres::Template.singleItemNotSalableAttribute\", { \"name\": value.name }) }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": value.name }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label :for=\"'custom-select_' + attribute.name\" v-tooltip=\"isTextCut(attribute.name)\" data-toggle=\"tooltip\" data-placement=\"top\" :title=\"attribute.name\" data-testing=\"variation-select-dropdown-label\">{{ attribute.name }}</label>\n                </div>\n                <!-- /dropdown -->\n\n                <!-- box and image -->\n                <div v-else-if=\"attribute.type === 'box' || attribute.type === 'image'\">\n                    <span class=\"text-muted\" data-testing=\"attribute-name\">{{ attribute.name }}:</span> <b data-testing=\"attribute-value\">{{ getSelectedAttributeValueName(attribute) }}</b>\n                    <div class=\"v-s-boxes py-3\" :class=\"{ 'images': attribute.type === 'image' }\">\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"addPleaseSelectOption\"\n                             @click=\"selectAttribute(attribute.attributeId, -1)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === -1, 'invalid': !isAttributeSelectionValid(attribute.attributeId, -1) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemPleaseSelect\") }}</span>\n                        </div>\n                        <div class=\"v-s-box bg-white empty-option\"\n                             data-testing=\"variation-select-box\"\n                             v-if=\"hasEmptyOption\"\n                             @click=\"selectAttribute(attribute.attributeId, null)\"\n                             :class=\"{ 'active': selectedAttributes[attribute.attributeId] === null, 'invalid': !isAttributeSelectionValid(attribute.attributeId, null, true) }\">\n                            <span class=\"mx-3\">{{ $translate(\"Ceres::Template.singleItemNoSelection\") }}</span>\n                        </div>\n\n                        <div class=\"v-s-box bg-white\"\n                             data-testing=\"variation-select-box\"\n                             v-for=\"value in attribute.values\"\n                             @click=\"selectAttribute(attribute.attributeId, value.attributeValueId)\"\n                             :class=\"{ 'active': value.attributeValueId === selectedAttributes[attribute.attributeId], 'invalid': !isAttributeSelectionValid(attribute.attributeId, value.attributeValueId, true) }\"\n                             v-tooltip=\"true\" data-html=\"true\" data-toggle=\"tooltip\" data-placement=\"top\" :data-original-title=\"getTooltip(attribute, value)\"\n                             :key=\"value.attributeValueId\">\n                            <span class=\"mx-3\" v-if=\"attribute.type === 'box'\">{{ value.name }}</span>\n                            <img class=\"p-1\" v-else :src=\"value.imageUrl\" :alt=\"value.name\">\n                        </div>\n                    </div>\n                </div>\n                <!-- /box and image -->\n            </div>\n\n            <!-- units -->\n            <div class=\"col-12 variation-select\" v-if=\"possibleUnitCombinationIds.length > 1 && isContentVisible\">\n                <div class=\"input-unit\">\n                    <select id=\"unit-combination-ids-select\" class=\"custom-select\" @change=\"selectUnit($event.target.value)\" data-testing=\"variation-select-unit\">\n                        <option\n                                v-for=\"unitCombinationId in possibleUnitCombinationIds\"\n                                :value=\"unitCombinationId\"\n                                :selected=\"parseInt(unitCombinationId) === selectedUnit\"\n                                :key=\"unitCombinationId\">\n                            <template v-if=\"isUnitSelectionValid(unitCombinationId)\">\n                                {{ possibleUnits[unitCombinationId] }}\n                            </template>\n                            <template v-else>\n                                {{ $translate(\"Ceres::Template.singleItemInvalidAttribute\", { \"name\": possibleUnits[unitCombinationId] }) }}\n                            </template>\n                        </option>\n                    </select>\n                    <label for=\"unit-combination-ids-select\" data-testing=\"variation-select-unit-label\">{{ $translate(\"Ceres::Template.singleItemContent\") }}</label>\n                </div>\n            </div>\n            <!-- /units -->\n        </template>\n\n        <template v-else>\n            <slot></slot>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { textWidth } from \"../../helper/dom\";\nimport { isDefined, isNull, isNullOrUndefined } from \"../../helper/utils\";\n\nconst NotificationService = require(\"../../services/NotificationService\");\n\nexport default {\n\n    name: \"variation-select\",\n\n    props: {\n        forceContent:\n        {\n            type: Boolean,\n            default: false\n        }\n    },\n\n    inject: {\n        itemId: {\n            default: null\n        }\n    },\n\n    data()\n    {\n        return {\n            filteredVariationsCache: {},\n            lastContentCount: 0\n        };\n    },\n\n    mounted()\n    {\n        // initially check for valid selection and disable add to basket button\n        this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!this.currentSelection);\n    },\n\n    computed:\n    {\n        currentVariation() {\n            return this.$store.getters[`${this.itemId}/currentItemVariation`];\n        },\n\n        currentVariationSelect() {\n            return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect;\n        },\n\n        /**\n         * returns true if any variation has no attributes\n         */\n        hasEmptyOption()\n        {\n            return this.variations.some(variation => !variation.attributes.length);\n        },\n\n        addPleaseSelectOption()\n        {\n            return App.config.item.showPleaseSelect;\n        },\n\n        /**\n         * returns the variation, based on the selected attributes / unit\n         * returns false if there are none or multiple results\n         */\n        currentSelection()\n        {\n            const filteredVariations = this.filterVariations(null, null, true);\n\n            if (filteredVariations.length === 1)\n            {\n                return filteredVariations[0];\n            }\n\n            return false;\n        },\n\n        /**\n         * returns all units, selectable by current selection\n         * prop 'forceContent' with value true will return all units, without filtering\n         */\n        possibleUnits()\n        {\n            // use an object, to make the entries unique\n            const possibleUnits = {};\n            const variations = this.forceContent ? this.variations : this.filterVariations(null, null, null, true);\n\n            for (const variation of variations)\n            {\n                possibleUnits[variation.unitCombinationId] = variation.unitName;\n            }\n\n            return possibleUnits;\n        },\n\n        possibleUnitCombinationIds()\n        {\n            return this.transformPossibleUnits(this.possibleUnits).map(value => value[0]);\n        },\n\n        isContentVisible()\n        {\n            return !this.forceContent && !!this.currentSelection || this.forceContent;\n        },\n\n        hasSelection()\n        {\n            return !isNullOrUndefined(this.selectedAttributes) && !Object.values(this.selectedAttributes).some((value) => value < 0);\n        },\n\n        attributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.attributes;\n        },\n\n        selectedAttributes() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedAttributes;\n        },\n\n        selectedUnit() {\n            return this.currentVariationSelect && this.currentVariationSelect.selectedUnit;\n        },\n\n        variations() {\n            return this.currentVariationSelect && this.currentVariationSelect.variations;\n        }\n    },\n\n    methods:\n    {\n        /**\n         * select an attribute and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         */\n        selectAttribute(attributeId, attributeValueId)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n\n            if (this.selectedAttributes[attributeId] !== attributeValueId)\n            {\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemAttribute`, { attributeId, attributeValueId });\n                this.onSelectionChange(attributeId, attributeValueId, null);\n            }\n        },\n\n        /**\n         * select a unit and check, if the selection is valid; if not, unsetInvalidSelection will be executed\n         * @param {[number, string]} unitId\n         */\n        selectUnit(unitId)\n        {\n            unitId = parseInt(unitId);\n            this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, unitId);\n            this.onSelectionChange(null, null, unitId);\n        },\n\n        onSelectionChange(attributeId, attributeValueId, unitId)\n        {\n            if (this.currentSelection)\n            {\n                this.setVariation(this.currentSelection.variationId);\n            }\n            else if (!this.hasSelection)\n            {\n                // user switched back to \"please select\"\n                this.setVariation(0);\n            }\n            else\n            {\n                this.unsetInvalidSelection(attributeId, attributeValueId, unitId);\n            }\n\n            this.lastContentCount = this.possibleUnitCombinationIds.length;\n        },\n\n        /**\n         * changes the selected attributes / unit, to ensure a valid seelction\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        unsetInvalidSelection(attributeId, attributeValueId, unitId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId, unitId);\n            const closestVariations = this.getClosestVariations(qualifiedVariations);\n            \n            // if the salable 'closestVariations' is undefined, take the not-salable one\n            const closestVariation = closestVariations[0] || closestVariations[1];\n\n            if (!closestVariation)\n            {\n                return;\n            }\n\n            const invalidSelection = this.getInvalidSelectionByVariation(closestVariation);\n\n            this.correctSelection(invalidSelection);\n        },\n\n        getTooltip(attribute, attributeValue)\n        {\n            if(!this.isAttributeSelectionValid(attribute.attributeId, attributeValue.attributeValueId, true))\n            {\n                return this.getInvalidOptionTooltip(attribute.attributeId, attributeValue.attributeValueId);\n            }\n            else if(attribute.type === \"image\")\n            {\n                return this.$translate(\"Ceres::Template.singleItemAttributeTooltip\", {\n                    attribute: attribute.name,\n                    value: attributeValue.name\n                });\n            }\n\n            return \"\";\n        },\n\n        /**\n         * returns a string for box tooltips, for not available options\n         * @param {number} attributeId\n         * @param {number} attributeValueId\n         */\n        getInvalidOptionTooltip(attributeId, attributeValueId)\n        {\n            const qualifiedVariations = this.getQualifiedVariations(attributeId, attributeValueId);\n            const closestVariations   = this.getClosestVariations(qualifiedVariations);\n\n            if (!closestVariations || closestVariations.length <= 0)\n            {\n                return \"\";\n            }\n\n            const invalidSelections = [\n                !!closestVariations[0] ? this.getInvalidSelectionByVariation(closestVariations[0]) : null,\n                !!closestVariations[1] ? this.getInvalidSelectionByVariation(closestVariations[1]) : null\n            ];\n\n            if (!!invalidSelections[0]\n                && !!invalidSelections[1]\n                && invalidSelections[0].attributesToReset.length > invalidSelections[1].attributesToReset.length)\n            {\n                // there is a non-salable variation with less changes\n                return this.$translate(\"Ceres::Template.singleItemNotSalable\");\n            }\n\n            const invalidSelection = invalidSelections[0] || invalidSelections[1];\n            const names = [];\n\n            for (const attribute of invalidSelection.attributesToReset)\n            {\n                if (attribute.attributeId !== attributeId)\n                {\n                    names.push(\"<b>\" + attribute.name +\"</b>\");\n                }\n            }\n            if (invalidSelection.newUnit)\n            {\n                names.push(\n                    \"<b>\" + this.$translate(\"Ceres::Template.singleItemContent\") + \"</b>\"\n                );\n            }\n\n            if (!names.length)\n            {\n                return null;\n            }\n\n            return this.$translate(\"Ceres::Template.singleItemNotAvailableInSelection\", { name: names.join(\", \") });\n        },\n\n        /**\n         * returns a list of variations, filtered by attribute or unit\n         * @param {[number, null]} attributeId\n         * @param {[number, null]} attributeValueId\n         * @param {[number, null]} unitId\n         */\n        getQualifiedVariations(attributeId, attributeValueId, unitId)\n        {\n            if (isDefined(attributeValueId))\n            {\n                return this.variations.filter(variation =>\n                {\n                    return isDefined(variation.attributes.find(attribute =>\n                        attribute.attributeId === attributeId && attribute.attributeValueId === attributeValueId));\n                });\n            }\n            else if (isDefined(unitId))\n            {\n                return this.variations.filter(variation => variation.unitCombinationId === unitId);\n            }\n\n            return this.variations.filter(variation => !variation.attributes.length);\n        },\n\n        /**\n         * return a salable and a non-salable variation with the minimum number of changes on attributes compared to the current selection.\n         * @param {array} qualifiedVariations\n         */\n        getClosestVariations(qualifiedVariations)\n        {\n            let closestSalableVariation, numberOfSalableChanges;\n            let closestNonSalableVariation, numberOfNonSalableChanges;\n\n            for (const variation of qualifiedVariations)\n            {\n                let changes = 0;\n\n                if (variation.unitCombinationId !== this.selectedUnit && !isNull(this.selectedUnit))\n                {\n                    // when the unit dropdown isn't visible, it should have a lower weight for reset investigations\n                    const unitWeight = this.possibleUnitCombinationIds.length > 1 && this.isContentVisible ? 0.9 : 0.1;\n\n                    changes += unitWeight;\n                }\n\n                for (const attribute of variation.attributes)\n                {\n                    if (this.selectedAttributes[attribute.attributeId] !== attribute.attributeValueId)\n                    {\n                        changes++;\n                    }\n                }\n\n                if(variation.isSalable && (!numberOfSalableChanges || changes < numberOfSalableChanges))\n                {\n                    closestSalableVariation = variation;\n                    numberOfSalableChanges = changes;\n                }\n                else if (!variation.isSalable && (!numberOfNonSalableChanges || changes < numberOfNonSalableChanges))\n                {\n                    closestNonSalableVariation = variation;\n                    numberOfNonSalableChanges = changes;\n                }\n            }\n\n            return [closestSalableVariation, closestNonSalableVariation];\n        },\n\n        /**\n         * returns object with array 'attributesToReset' and newUnit. The attributesToReset contains all attributes, which are not matching with the given variation\n         * @param {object} variation\n         */\n        getInvalidSelectionByVariation(variation)\n        {\n            const attributesToReset = [];\n            let newUnit = null;\n\n            for (let selectedAttributeId in this.selectedAttributes)\n            {\n                selectedAttributeId = parseInt(selectedAttributeId);\n                const variationAttribute = variation.attributes.find(attribute => attribute.attributeId === selectedAttributeId);\n\n                if (!isNull(this.selectedAttributes[selectedAttributeId]))\n                {\n                    if (variationAttribute && variationAttribute.attributeValueId !== this.selectedAttributes[selectedAttributeId] || !variationAttribute)\n                    {\n                        const attributeToReset = this.attributes.find(attr => attr.attributeId === selectedAttributeId);\n\n                        attributesToReset.push(attributeToReset);\n                    }\n                }\n            }\n\n            if (variation.unitCombinationId !== this.selectedUnit)\n            {\n                newUnit = variation.unitCombinationId;\n            }\n\n            return { attributesToReset, newUnit };\n        },\n\n        /**\n         * resets all invalid attributes and change the unit, if required. Prints a message to the user if so.\n         * @param {object} invalidSelection\n         */\n        correctSelection(invalidSelection)\n        {\n            const messages   = [];\n            const attributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            for (const attributeToReset of invalidSelection.attributesToReset)\n            {\n                messages.push(\n                    this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name: attributeToReset.name })\n                );\n\n                attributes[attributeToReset.attributeId] = (!this.hasEmptyOption && App.config.item.showPleaseSelect) ? -1 : null;\n            }\n\n            if (invalidSelection.newUnit)\n            {\n                if (this.lastContentCount > 1 && this.possibleUnitCombinationIds.length > 1 && !isNull(this.selectedUnit))\n                {\n                    messages.push(\n                        this.$translate(\"Ceres::Template.singleItemNotAvailable\", { name:\n                                this.$translate(\"Ceres::Template.singleItemContent\")\n                        })\n                    );\n                }\n\n                this.$store.commit(`${this.itemId}/variationSelect/selectItemUnit`, invalidSelection.newUnit);\n            }\n\n            this.$store.commit(`${this.itemId}/variationSelect/setItemSelectedAttributes`, attributes);\n\n            this.setVariation(this.currentSelection ? this.currentSelection.variationId : 0);\n\n            NotificationService.warn(\n                messages.join(\"<br>\")\n            ).closeAfter(5000);\n        },\n\n        /**\n         * returns matching variations with current selection\n         * attributes and unitId could be filled, to check a specific selection\n         * @param {object} attributes\n         * @param {number} unitId\n         * @param {boolean} strict\n         */\n        filterVariations(attributes, unitId, strict, ignoreUnit)\n        {\n            attributes = attributes || this.selectedAttributes;\n            unitId = unitId || this.selectedUnit;\n            strict = !!strict;\n            ignoreUnit = !!ignoreUnit;\n\n            const key = JSON.stringify(attributes) + \"_\" + unitId + \"_\" + strict + \"_\" + ignoreUnit;\n\n            if (isDefined(this.filteredVariationsCache[key]))\n            {\n                return this.filteredVariationsCache[key];\n            }\n\n            const uniqueValues = [...new Set(Object.values(attributes))];\n            const isEmptyOptionSelected = uniqueValues.length === 1 && isNull(uniqueValues[0]);\n            const filteredVariations = this.variations.filter(variation =>\n            {\n                // the selected unit is not matching\n                if (!ignoreUnit && variation.unitCombinationId !== unitId)\n                {\n                    return false;\n                }\n\n                // the variation has no attributes (only checked, if any attribute has a selected value); or the variation has attributes and empty option is selected\n                // requires more than 0 attributes\n                if (((!isEmptyOptionSelected && !variation.attributes.length) || (isEmptyOptionSelected && variation.attributes.length))\n                    && this.attributes.length > 0)\n                {\n                    return false;\n                }\n\n                for (const attributeId in attributes)\n                {\n                    const variationAttribute = variation.attributes.find(variationAttribute =>\n                        variationAttribute.attributeId === parseInt(attributeId));\n\n                    // an attribute is not matching with selection\n                    if (variationAttribute &&\n                        variationAttribute.attributeValueId !== attributes[attributeId] &&\n                        (strict || !strict && !isNull(attributes[attributeId]) && attributes[attributeId] !== -1))\n                    {\n                        return false;\n                    }\n                }\n\n                return true;\n            });\n\n            this.filteredVariationsCache[key] = filteredVariations;\n\n            return filteredVariations;\n        },\n\n        /**\n         * returns true, if the selection with a new attribute value would be valid\n         * @param {number} attributeId\n         * @param {[number, string, null]} attributeValueId\n         * @param {boolean} filterSalableVariations\n         */\n        isAttributeSelectionValid(attributeId, attributeValueId, filterSalableVariations)\n        {\n            attributeValueId = parseInt(attributeValueId) || null;\n            if (this.selectedAttributes[attributeId] === attributeValueId)\n            {\n                return true;\n            }\n\n            const selectedAttributes = JSON.parse(JSON.stringify(this.selectedAttributes));\n\n            selectedAttributes[attributeId] = parseInt(attributeValueId) || null;\n\n            const ignoreUnit = !(Object.keys(this.possibleUnits).length > 1 && this.isContentVisible);\n            let variations = this.filterVariations(selectedAttributes, null, null, ignoreUnit);\n\n            if (filterSalableVariations)\n            {\n                variations = variations.filter(variation => variation.isSalable)\n            }\n\n            return variations.length > 0;\n        },\n\n        /**\n         * returns true, if the selection with a new unitId would be valid\n         * @param {[number, string]} unitId\n         */\n        isUnitSelectionValid(unitId)\n        {\n            unitId = parseInt(unitId);\n            if (this.selectedUnit === unitId)\n            {\n                return true;\n            }\n\n            return this\n                .filterVariations(null, unitId)\n                .filter(variation => variation.isSalable)\n                .length > 0\n        },\n\n        /**\n         * dispatch vuex action 'loadVariation' to archive a variation\n         * dispatches a custom event named 'onVariationChanged'\n         * @param {[string, number, null]} variationId\n         */\n        setVariation(variationId)\n        {\n            if (!isDefined(variationId) && this.currentSelection)\n            {\n                variationId = this.currentSelection.variationId;\n            }\n\n            if (isDefined(variationId))\n            {\n                this.$store.dispatch(`${this.itemId}/loadVariation`, variationId).then(variation =>\n                {\n                    document.dispatchEvent(new CustomEvent(\"onVariationChanged\",\n                        {\n                            detail:\n                                {\n                                    attributes: variation.attributes,\n                                    documents: variation.documents,\n                                    itemId: this.itemId\n                                }\n                        }));\n                });\n            }\n        },\n\n        isTextCut(content)\n        {\n            if (this.$refs.attributesContaner)\n            {\n                return textWidth(content, \"Custom-Font, Helvetica, Arial, sans-serif\") > this.$refs.attributesContaner[0].clientWidth;\n            }\n\n            return false;\n        },\n\n        getSelectedAttributeValueName(attribute)\n        {\n            const selectedAttributeValueId =  this.selectedAttributes[attribute.attributeId];\n            const selectedAttributeValue = attribute.values.find(attrValue => attrValue.attributeValueId === selectedAttributeValueId);\n\n            if (selectedAttributeValue)\n            {\n                return selectedAttributeValue.name;\n            }\n            else if (App.config.item.showPleaseSelect && selectedAttributeValueId === -1)\n            {\n                return this.$translate(\"Ceres::Template.singleItemPleaseSelect\");\n            }\n            return this.$translate(\"Ceres::Template.singleItemNoSelection\");\n        },\n\n        transformPossibleUnits(possibleUnits)\n        {\n            return Object.entries(possibleUnits).sort((unitA, unitB) => {\n                unitA = this.splitUnitName(unitA[1]);\n                unitB = this.splitUnitName(unitB[1]);\n                // order by unit\n                if (unitA[1] < unitB[1]) {\n                    return -1;\n                }\n                if (unitA[1] > unitB[1]) {\n                    return 1;\n                }\n                // order by content (count)\n                if (unitA[0] < unitB[0]) {\n                    return -1;\n                }\n                if (unitA[0] > unitB[0]) {\n                    return 1;\n                }\n                return 0;\n            });\n        },\n        splitUnitName(unitName) {\n            const unitNameSplit = unitName.split(\" \");\n\n            if (!isNaN(unitNameSplit[0])) {\n                unitNameSplit[0] = unitNameSplit[0].replace(App.currencyPattern.separator_thousands, \"\");\n                unitNameSplit[0] = parseInt(unitNameSplit[0]);\n            }\n\n            return unitNameSplit;\n        }\n    },\n\n    watch:\n    {\n        currentSelection(value)\n        {\n            this.$store.commit(`${this.itemId}/variationSelect/setIsVariationSelected`, !!value);\n        },\n        variations()\n        {\n            // FIX unset variation cache after subsequent variations are loaded\n            this.filteredVariationsCache = {};\n        }\n    }\n}\n</script>\n","import mod from \"-!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./VariationSelect.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./VariationSelect.vue?vue&type=template&id=4a939d05&\"\nimport script from \"./VariationSelect.vue?vue&type=script&lang=js&\"\nexport * from \"./VariationSelect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/maximilianroell/workspace2/plugins/Ceres/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('4a939d05')) {\n      api.createRecord('4a939d05', component.options)\n    } else {\n      api.reload('4a939d05', component.options)\n    }\n    module.hot.accept(\"./VariationSelect.vue?vue&type=template&id=4a939d05&\", function () {\n      api.rerender('4a939d05', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/src/app/components/item/VariationSelect.vue\"\nexport default component.exports"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attributes","length","possibleUnitCombinationIds","isContentVisible","_l","attribute","index","key","type","ref","refInFor","attrs","id","name","on","change","$event","selectAttribute","attributeId","target","value","addPleaseSelectOption","hasSelection","domProps","_v","_s","$translate","_e","hasEmptyOption","selectedAttributes","selected","values","attributeValueId","isAttributeSelectionValid","directives","rawName","isTextCut","expression","for","title","getSelectedAttributeValueName","class","images","active","invalid","click","getTooltip","src","imageUrl","alt","selectUnit","unitCombinationId","parseInt","selectedUnit","isUnitSelectionValid","possibleUnits","_t","_withStripped","NotificationService","props","forceContent","Boolean","default","inject","itemId","data","filteredVariationsCache","lastContentCount","mounted","$store","commit","currentSelection","computed","currentVariation","getters","currentVariationSelect","state","items","variationSelect","variations","some","variation","App","config","item","showPleaseSelect","filteredVariations","filterVariations","unitName","transformPossibleUnits","map","Object","methods","onSelectionChange","unitId","setVariation","variationId","unsetInvalidSelection","qualifiedVariations","getQualifiedVariations","closestVariations","getClosestVariations","closestVariation","invalidSelection","getInvalidSelectionByVariation","correctSelection","attributeValue","getInvalidOptionTooltip","invalidSelections","attributesToReset","names","push","newUnit","join","filter","find","closestSalableVariation","numberOfSalableChanges","closestNonSalableVariation","numberOfNonSalableChanges","changes","isSalable","selectedAttributeId","variationAttribute","attributeToReset","attr","messages","JSON","parse","stringify","warn","closeAfter","strict","ignoreUnit","uniqueValues","Set","isEmptyOptionSelected","filterSalableVariations","keys","dispatch","then","document","dispatchEvent","CustomEvent","detail","documents","content","$refs","attributesContaner","clientWidth","selectedAttributeValueId","selectedAttributeValue","attrValue","entries","sort","unitA","unitB","splitUnitName","unitNameSplit","split","isNaN","replace","currencyPattern","separator_thousands","watch","component","options","__file"],"sourceRoot":""}