"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[39],{7838:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ GoogleMaps; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=template&id=71813e06&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    ref: "googleMapsContainer",\n    staticClass: "maps-component position-relative",\n    class: _vm.aspectClass\n  }, [_vm.scriptBlocked ? _c("div", [_vm._t("default")], 2) : _vm._e()]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=template&id=71813e06&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/whenConsented.js\nvar whenConsented = __webpack_require__(397);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=script&lang=js&\n\n\n/* harmony default export */ var GoogleMapsvue_type_script_lang_js_ = ({\n  props: {\n    address: {\n      type: String,\n      required: false\n    },\n    lat: {\n      type: Number,\n      required: false\n    },\n    lng: {\n      type: Number,\n      required: false\n    },\n    zoom: {\n      type: Number,\n      default: 16\n    },\n    maptype: {\n      type: String,\n      default: "roadmap"\n    },\n    aspectRatio: {\n      type: String,\n      default: "3-1"\n    }\n  },\n  data: function data() {\n    return {\n      scriptBlocked: true\n    };\n  },\n  computed: {\n    aspectClass: function aspectClass() {\n      return "prop-" + this.aspectRatio;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      _this.createScript().then(function () {\n        _this.initializeMap();\n      }).catch(function () {\n        // Do nothing\n      });\n    });\n  },\n  methods: {\n    createScript: function createScript() {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        var script = document.querySelector("script#google-maps-api");\n        if (!(0,utils/* isNullOrUndefined */.le)(script)) {\n          // script already injected...\n          _this2.scriptBlocked = false;\n          if ((0,utils/* isNullOrUndefined */.le)(window.google)) {\n            // ...but not loaded yet\n            script.addEventListener("load", function () {\n              return resolve(script);\n            }, false);\n          } else {\n            // ..and fully loaded\n            resolve(script);\n          }\n        } else {\n          // script not loaded\n          (0,whenConsented/* whenConsented */.f)("media.googleMaps", function () {\n            _this2.scriptBlocked = false;\n            var script = document.createElement("script");\n            script.type = "text/javascript";\n            script.id = "google-maps-api";\n            script.src = "https://maps.googleapis.com/maps/api/js?key=".concat(App.config.global.googleMapsApiKey);\n            script.addEventListener("load", function () {\n              return resolve(script);\n            }, false);\n            script.addEventListener("error", function () {\n              return reject(script);\n            }, false);\n            document.body.appendChild(script);\n          }, function () {\n            _this2.scriptBlocked = true;\n          });\n        }\n      });\n    },\n    getCoordinates: function getCoordinates() {\n      var _this3 = this;\n      var isLatValid = !isNaN(this.lat) && this.lat > -90 && this.lat < 90;\n      var isLngValid = !isNaN(this.lng) && this.lng > -180 && this.lng < 180;\n      if (isLatValid && isLngValid) {\n        return Promise.resolve({\n          lat: this.lat,\n          lng: this.lng\n        });\n      } else if (!!this.address && !!window.google) {\n        return new Promise(function (resolve, reject) {\n          var geocoder = new google.maps.Geocoder();\n          geocoder.geocode({\n            address: _this3.address\n          }, function (result, status) {\n            if (!!result && result.length > 0 && !!result[0].geometry) {\n              resolve(result[0].geometry.location);\n            } else {\n              reject();\n            }\n          });\n        });\n      }\n      return Promise.reject();\n    },\n    initializeMap: function initializeMap() {\n      var _this4 = this;\n      this.getCoordinates().then(function (coordinates) {\n        var map = new google.maps.Map(_this4.$refs.googleMapsContainer, {\n          center: coordinates,\n          zoom: _this4.zoom,\n          mapTypeId: _this4.maptype\n        });\n        new google.maps.Marker({\n          map: map,\n          position: coordinates\n        });\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=script&lang=js&\n /* harmony default export */ var common_GoogleMapsvue_type_script_lang_js_ = (GoogleMapsvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  common_GoogleMapsvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var GoogleMaps = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7838\n')}}]);