"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[17],{1839:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ GraduatedPrices; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/GraduatedPrices.vue?vue&type=template&id=79b1c082&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.graduatedPrices[0] ? _c("div", [_c("b", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemGraduatedPrices")) + ":")]), _vm._v(" "), _c("table", {\n    staticClass: "graduated-prices-table text-muted"\n  }, [_c("tbody", [_vm._l(_vm.graduatedPrices, function (price, index) {\n    return [_c("tr", [_c("td", {\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemMinimumQuantity")) + " " + _vm._s(price.minimumOrderQuantity))]), _vm._v(" "), _c("td", {\n      staticClass: "graduated-price",\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }, [_vm._v("\\n                        " + _vm._s(price.unitPrice.formatted) + "\\n                        "), _c("transition", {\n      attrs: {\n        name: "fade"\n      }\n    }, [index === _vm.activeGraduationIndex ? _c("i", {\n      staticClass: "fa fa-lg fa-check-circle-o text-appearance",\n      attrs: {\n        "aria-hidden": "true"\n      }\n    }) : _vm._e()])], 1), _vm._v(" "), _vm.showBasePrice ? _c("td", {\n      staticClass: "graduated-base-price pl-3 d-none d-xl-block",\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemGraduatedBasePrice", {\n      price: price.basePrice\n    })))]) : _vm._e()]), _vm._v(" "), _vm.showBasePrice ? _c("tr", {\n      staticClass: "graduated-base-price d-xl-none"\n    }, [_c("td", {\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }), _vm._v(" "), _c("td", {\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemGraduatedBasePrice", {\n      price: price.basePrice\n    })))])]) : _vm._e()];\n  })], 2)]), _vm._v(" "), _c("br")]) : _vm._e();\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/GraduatedPrices.vue?vue&type=template&id=79b1c082&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/GraduatedPrices.vue?vue&type=script&lang=js&\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/* harmony default export */ var GraduatedPricesvue_type_script_lang_js_ = ({\n  name: "graduated-prices",\n  props: {\n    paddingClasses: {\n      type: String\n    },\n    paddingInlineStyles: {\n      type: String\n    }\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  computed: {\n    graduatedPrices: function graduatedPrices() {\n      var currentVariation = this.$store.getters["".concat(this.itemId, "/currentItemVariation")];\n      var prices = currentVariation && currentVariation.prices.graduatedPrices;\n      var minQuantity = currentVariation && currentVariation.variation.minimumOrderQuantity;\n      prices = prices.filter(function (price) {\n        return price.minimumOrderQuantity > minQuantity;\n      });\n      return _toConsumableArray(prices).sort(function (priceA, priceB) {\n        return priceA.minimumOrderQuantity - priceB.minimumOrderQuantity;\n      });\n    },\n    showBasePrice: function showBasePrice() {\n      var currentVariation = this.$store.getters["".concat(this.itemId, "/currentItemVariation")];\n      var mayShowUnitPrice = currentVariation.variation.mayShowUnitPrice;\n      var isSinglePiece = currentVariation.unit && currentVariation.unit.content === 1 && currentVariation.unit.unitOfMeasurement === "C62";\n      return mayShowUnitPrice && !isSinglePiece;\n    },\n    activeGraduationIndex: function activeGraduationIndex() {\n      var _this = this;\n      var prices = this.graduatedPrices.filter(function (price) {\n        return _this.variationOrderQuantity >= price.minimumOrderQuantity;\n      });\n      if (!prices.length) {\n        return -1;\n      }\n      var price = prices.reduce(function (prev, current) {\n        return prev.minimumOrderQuantity > current.minimumOrderQuantity ? prev : current;\n      });\n      return this.graduatedPrices.indexOf(price);\n    },\n    variationOrderQuantity: function variationOrderQuantity() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationOrderQuantity;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/GraduatedPrices.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_GraduatedPricesvue_type_script_lang_js_ = (GraduatedPricesvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/GraduatedPrices.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_GraduatedPricesvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var GraduatedPrices = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1839\n')}}]);