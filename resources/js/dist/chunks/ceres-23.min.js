"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[23],{3485:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ BasketPreview; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/BasketPreview.vue?vue&type=template&id=468cfbce&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "basket-preview-wrapper h-100",\n    class: {\n      empty: !_vm.basketItems.length,\n      "open-hover": _vm.hover,\n      "open-right": !_vm.hover\n    }\n  }, [_c("div", {\n    staticClass: "position-relative h-100"\n  }, [_c("div", {\n    staticClass: "basket-preview d-flex flex-column flex-nowrap bg-white shadow w-100"\n  }, [_c("header", {\n    staticClass: "basket-preview-header border-bottom p-3"\n  }, [_c("span", {\n    staticClass: "h3 mb-0"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.basketPreview")))]), _vm._v(" "), _c("button", {\n    directives: [{\n      name: "toggle-basket-preview",\n      rawName: "v-toggle-basket-preview"\n    }],\n    staticClass: "close",\n    attrs: {\n      type: "button",\n      "aria-label": _vm.$translate("Ceres::Template.closeIcon")\n    }\n  }, [_c("span", {\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }, [_vm._v("Ã—")])])]), _vm._v(" "), _vm.basketNotifications.length > 0 ? _c("div", _vm._l(_vm.basketNotifications, function (notification) {\n    return _c("div", {\n      key: notification.id,\n      staticClass: "w-100 alert alert-danger"\n    }, [_c("div", [_vm._v(_vm._s(notification.message))])]);\n  }), 0) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "basket-preview-content d-flex flex-fill"\n  }, [_c("basket-list", {\n    staticClass: "item-list d-flex flex-fill flex-nowrap flex-column overflow-auto px-3",\n    attrs: {\n      "is-preview": true\n    },\n    scopedSlots: _vm._u([{\n      key: "before-basket-item",\n      fn: function fn() {\n        return [_vm._t("before-basket-item")];\n      },\n      proxy: true\n    }, {\n      key: "after-basket-item",\n      fn: function fn() {\n        return [_vm._t("after-basket-item")];\n      },\n      proxy: true\n    }], null, true)\n  }), _vm._v(" "), _c("div", {\n    staticClass: "totals d-flex flex-nowrap flex-column px-3 pt-3"\n  }, [_vm.showShippingCountrySelect ? _c("shipping-country-select", {\n    attrs: {\n      "basket-select": true,\n      "open-basket-preview": true\n    }\n  }) : _vm._e(), _vm._v(" "), _c("hr"), _vm._v(" "), _vm._t("before-basket-totals"), _vm._v(" "), _c("basket-totals", {\n    attrs: {\n      "visible-fields": _vm.visibleFields\n    },\n    scopedSlots: _vm._u([{\n      key: "before-item-sum",\n      fn: function fn() {\n        return [_vm._t("before-item-sum")];\n      },\n      proxy: true\n    }, {\n      key: "after-item-sum",\n      fn: function fn() {\n        return [_vm._t("after-item-sum")];\n      },\n      proxy: true\n    }, {\n      key: "before-shipping-costs",\n      fn: function fn() {\n        return [_vm._t("before-shipping-costs")];\n      },\n      proxy: true\n    }, {\n      key: "after-shipping-costs",\n      fn: function fn() {\n        return [_vm._t("after-shipping-costs")];\n      },\n      proxy: true\n    }, {\n      key: "before-total-sum",\n      fn: function fn() {\n        return [_vm._t("before-total-sum")];\n      },\n      proxy: true\n    }, {\n      key: "before-vat",\n      fn: function fn() {\n        return [_vm._t("before-vat")];\n      },\n      proxy: true\n    }, {\n      key: "after-vat",\n      fn: function fn() {\n        return [_vm._t("after-vat")];\n      },\n      proxy: true\n    }, {\n      key: "after-total-sum",\n      fn: function fn() {\n        return [_vm._t("after-total-sum")];\n      },\n      proxy: true\n    }], null, true)\n  }), _vm._v(" "), _vm._t("after-basket-totals"), _vm._v(" "), _c("div", {\n    staticClass: "basket-preview-footer d-flex pb-3"\n  }, [_c("a", {\n    directives: [{\n      name: "waiting-animation-infinite",\n      rawName: "v-waiting-animation-infinite"\n    }],\n    staticClass: "btn btn-outline-primary btn-block",\n    attrs: {\n      href: _vm.$ceres.urls.basket,\n      rel: "nofollow",\n      title: _vm.$translate("Ceres::Template.basket")\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-shopping-cart"\n  }), _vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.basket")) + "\\n                        ")]), _vm._v(" "), _vm._t("before-checkout-button"), _vm._v(" "), _c("a", {\n    directives: [{\n      name: "waiting-animation-infinite",\n      rawName: "v-waiting-animation-infinite"\n    }],\n    staticClass: "btn btn-primary btn-block",\n    attrs: {\n      href: _vm.$ceres.urls.checkout,\n      rel: "nofollow",\n      title: _vm.$translate("Ceres::Template.basketCheckout")\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-arrow-right",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }), _vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.basketCheckout")) + "\\n                        ")]), _vm._v(" "), _vm._t("after-checkout-button")], 2)], 2)], 1)])]), _vm._v(" "), _c("div", {\n    directives: [{\n      name: "toggle-basket-preview",\n      rawName: "v-toggle-basket-preview"\n    }],\n    staticClass: "basket-preview-overlay"\n  })]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketPreview.vue?vue&type=template&id=468cfbce&\n\n// EXTERNAL MODULE: ./resources/js/src/app/services/ApiService.js\nvar ApiService = __webpack_require__(7653);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/BasketPreview.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n/* harmony default export */ var BasketPreviewvue_type_script_lang_js_ = ({\n  name: "basket-preview",\n  props: {\n    showNetPrices: {\n      type: Boolean,\n      default: false\n    },\n    visibleFields: {\n      type: Array,\n      default: function _default() {\n        return ["basketValueNet", "basketValueGross", "rebate", "shippingCostsNet", "shippingCostsGross", "promotionCoupon", "totalSumNet", "vats", "additionalCosts", "totalSumGross", "salesCoupon", "openAmount", "subAmount"];\n      }\n    }\n  },\n  computed: _objectSpread({\n    hover: function hover() {\n      return App.config.basket.previewType === \'hover\';\n    },\n    showShippingCountrySelect: function showShippingCountrySelect() {\n      return App.config.basket.showShippingCountrySelect;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    basket: function basket(state) {\n      return state.basket.data;\n    },\n    basketItems: function basketItems(state) {\n      return state.basket.items;\n    },\n    basketNotifications: function basketNotifications(state) {\n      return state.basket.basketNotifications;\n    },\n    isBasketItemQuantityUpdate: function isBasketItemQuantityUpdate(state) {\n      return state.basket.isBasketItemQuantityUpdate;\n    }\n  })),\n  /**\n   * Bind to basket and bind the basket items\n   */\n  mounted: function mounted() {\n    var _this = this;\n    if (App.config.basket.addItemToBasketConfirm === "preview") {\n      ApiService["default"].listen("AfterBasketItemAdd", function (data) {\n        _this.show();\n      });\n      ApiService["default"].listen("AfterBasketItemUpdate", function (data) {\n        if (!_this.isBasketItemQuantityUpdate) {\n          _this.show();\n        }\n      });\n    }\n  },\n  methods: {\n    show: function show() {\n      setTimeout(function () {\n        document.body.classList.add("basket-open");\n      }, 1);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketPreview.vue?vue&type=script&lang=js&\n /* harmony default export */ var basket_BasketPreviewvue_type_script_lang_js_ = (BasketPreviewvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/BasketPreview.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  basket_BasketPreviewvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var BasketPreview = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3485\n')}}]);