"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[53],{1534:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ LiveShoppingItem; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/liveShopping/LiveShoppingItem.vue?vue&type=template&id=22cde38c&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [!!_vm.currentOffer ? _c("category-item", {\n    attrs: {\n      "item-data": _vm.currentOffer.item,\n      "decimal-count": _vm.$ceres.config.item.storeSpecial,\n      "image-url-accessor": "urlMiddle",\n      "padding-classes": _vm.paddingClasses,\n      "padding-inline-styles": _vm.paddingInlineStyles,\n      "force-url-with-variation-id": true\n    },\n    scopedSlots: _vm._u([{\n      key: "store-special",\n      fn: function fn() {\n        return [!!_vm.storeSpecial ? _c("item-store-special", {\n          attrs: {\n            "store-special": _vm.storeSpecial,\n            "recommended-retail-price": _vm.prices.rrp,\n            "variation-retail-price": _vm.prices.price,\n            "decimal-count": _vm.$ceres.config.item.storeSpecial\n          }\n        }) : _vm._e()];\n      },\n      proxy: true\n    }, {\n      key: "item-image",\n      fn: function fn() {\n        return [!!_vm.displaySettings.customImagePath ? _c("a", {\n          attrs: {\n            href: _vm._f("itemURL")(_vm.currentOffer.item)\n          }\n        }, [_c("lazy-img", {\n          attrs: {\n            "image-url": _vm.displaySettings.customImagePath,\n            alt: _vm._f("itemName")(_vm.currentOffer.item),\n            title: _vm._f("itemName")(_vm.currentOffer.item)\n          }\n        })], 1) : _vm._e()];\n      },\n      proxy: true\n    }, !!_vm.currentOffer && _vm.whenIsCurrentOffer() !== 1 && _vm.isActiveByStock ? {\n      key: "item-details",\n      fn: function fn() {\n        return [_c("live-shopping-details", {\n          attrs: {\n            "live-shopping-data": _vm.currentOffer,\n            "display-settings": _vm.displaySettings,\n            prices: _vm.prices,\n            "is-active-by-stock": _vm.isActiveByStock,\n            "show-net-prices": _vm.showNetPrices\n          },\n          on: {\n            "reload-offer": function reloadOffer($event) {\n              return _vm.reloadOffer();\n            }\n          },\n          scopedSlots: _vm._u([{\n            key: "after-item-name",\n            fn: function fn() {\n              return [_c("div", {\n                staticClass: "live-shopping-add-to-basket"\n              }, [_c("add-to-basket", {\n                attrs: {\n                  "variation-id": _vm.currentOffer.item.variation.id,\n                  "is-salable": !!_vm.currentOffer.item.filter && _vm.currentOffer.item.filter.isSalable,\n                  "has-children": !!_vm.currentOffer.item.filter && _vm.currentOffer.item.filter.hasActiveChildren,\n                  "interval-quantity": _vm.currentOffer.item.variation.intervalOrderQuantity || 1,\n                  "minimum-quantity": _vm.currentOffer.item.variation.minimumOrderQuantity,\n                  "maximum-quantity": !!_vm.currentOffer.item.variation.maximumOrderQuantity && _vm.currentOffer.item.variation.maximumOrderQuantity > 0 ? _vm.currentOffer.item.variation.maximumOrderQuantity : null,\n                  "order-properties": _vm.currentOffer.item.properties.filter(function (prop) {\n                    return prop.property.isOderProperty;\n                  }),\n                  "has-order-properties": _vm.currentOffer.item.hasOrderProperties,\n                  "has-required-order-property": _vm.currentOffer.hasRequiredOrderProperty,\n                  "use-large-scale": false,\n                  "show-quantity": false,\n                  "item-url": _vm._f("itemURL")(_vm.currentOffer.item),\n                  "item-type": _vm.currentOffer.item.item.itemType\n                }\n              })], 1)];\n            },\n            proxy: true\n          }], null, false, 883888925)\n        })];\n      },\n      proxy: true\n    } : null], null, true)\n  }) : _c("div", [_vm._t("default")], 2)], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingItem.vue?vue&type=template&id=22cde38c&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/liveShopping/LiveShoppingDetails.vue?vue&type=template&id=0b16ffc8&\nvar LiveShoppingDetailsvue_type_template_id_0b16ffc8_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "live-shopping-details"\n  }, [_c("div", {\n    staticClass: "h3 live-shopping-item-name"\n  }, [_c("a", {\n    attrs: {\n      href: _vm._f("itemURL")(_vm.liveShoppingData.item)\n    }\n  }, [_vm._v("\\n            " + _vm._s(_vm._f("itemName")(_vm.liveShoppingData.item)) + "\\n        ")])]), _vm._v(" "), _vm._t("after-item-name"), _vm._v(" "), _vm.displaySettings.showTimer || _vm.displaySettings.showStock ? _c("div", {\n    staticClass: "live-shopping-countdown"\n  }, [_c("hr", {\n    staticClass: "live-shopping-countdown-separator"\n  }), _vm._v(" "), _vm.displaySettings.showTimer ? _c("div", {\n    staticClass: "live-shopping-countdown-heading"\n  }, [_vm.hasStarted ? _c("div", [_vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.liveShoppingOfferEndsIn")) + "\\n            ")]) : _c("div", [_vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.liveShoppingOfferBeginsIn")) + "\\n            ")])]) : _vm._e(), _vm._v(" "), _vm.displaySettings.showTimer && !!_vm.duration ? _c("div", {\n    staticClass: "live-shopping-countdown-thread-container"\n  }, [_vm.duration.days > 0 ? _c("div", {\n    staticClass: "live-shopping-countdown-thread"\n  }, [_c("div", {\n    staticClass: "live-shopping-countdown-thread-number"\n  }, [_vm._v(_vm._s(_vm.duration.days))]), _vm._v(" "), _c("div", {\n    staticClass: "small"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingDays")))])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "live-shopping-countdown-thread"\n  }, [_c("div", {\n    staticClass: "live-shopping-countdown-thread-number"\n  }, [_vm._v(_vm._s(_vm.duration.hours))]), _vm._v(" "), _c("div", {\n    staticClass: "small"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingHours")))])]), _vm._v(" "), _c("div", {\n    staticClass: "live-shopping-countdown-thread"\n  }, [_c("div", {\n    staticClass: "live-shopping-countdown-thread-number"\n  }, [_vm._v(_vm._s(_vm.duration.minutes))]), _vm._v(" "), _c("div", {\n    staticClass: "small"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingMinutes")))])]), _vm._v(" "), _vm.duration.days <= 0 ? _c("div", {\n    staticClass: "live-shopping-countdown-thread"\n  }, [_c("div", {\n    staticClass: "live-shopping-countdown-thread-number"\n  }, [_vm._v(_vm._s(_vm.duration.seconds))]), _vm._v(" "), _c("div", {\n    staticClass: "small"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingSeconds")))])]) : _vm._e()]) : _vm._e(), _vm._v(" "), _vm.hasStarted && !_vm.hasClosed ? [_vm.displaySettings.showTimer && _vm.displaySettings.showTimerProgress ? _c("div", {\n    staticClass: "live-shopping-progress"\n  }, [_c("div", {\n    staticClass: "progress"\n  }, [_c("div", {\n    staticClass: "progress-bar",\n    class: "progress-" + Math.round(_vm.timePercentage / 10) * 10,\n    style: "width:" + _vm.timePercentage + "%",\n    attrs: {\n      role: "progressbar",\n      "aria-valuenow": "25",\n      "aria-valuemin": "0",\n      "aria-valuemax": "100"\n    }\n  })])]) : _vm._e(), _vm._v(" "), _vm.displaySettings.showStock ? _c("div", {\n    staticClass: "live-shopping-progress"\n  }, [_c("div", {\n    staticClass: "live-shopping-progress-heading"\n  }, [_c("span", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingRemainingStock", {\n    quantityRemaining: _vm.itemQuantityRemaining,\n    quantityMax: _vm.liveShoppingData.liveShopping.quantityMax\n  })))])]), _vm._v(" "), _vm.displaySettings.showStockProgress ? _c("div", {\n    staticClass: "progress"\n  }, [_c("div", {\n    staticClass: "progress-bar",\n    class: "progress-" + Math.round(_vm.quantitySoldPercentage / 10) * 10,\n    style: "width:" + _vm.quantitySoldPercentage + "%",\n    attrs: {\n      role: "progressbar",\n      "aria-valuenow": "25",\n      "aria-valuemin": "0",\n      "aria-valuemax": "100"\n    }\n  })]) : _vm._e()]) : _vm._e()] : _vm._e()], 2) : _vm._e(), _vm._v(" "), _vm.hasStarted && !_vm.hasClosed ? _c("div", {\n    staticClass: "live-shopping-prices bg-danger"\n  }, [_c("div", {\n    staticClass: "live-shopping-prices-inner"\n  }, [!isNaN(_vm.itemPriceRebatePercentage) && _vm.itemPriceRebatePercentage > 0 ? _c("div", {\n    staticClass: "live-shopping-prices-rebate"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.liveShoppingRebate", {\n    rebate: _vm.itemPriceRebatePercentage\n  })))]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "live-shopping-prices-container"\n  }, [_c("div", {\n    staticClass: "live-shopping-price"\n  }, [_c("strong", [_vm._v(_vm._s(_vm.prices.price.unitPrice.formatted) + " *")])]), _vm._v(" "), _vm.isCrossPriceVisible ? _c("span", [_vm.prices.isRrpDefaultPrice ? _c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.oldPriceBefore)\n    }\n  }) : _c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.oldPriceRrp)\n    }\n  })]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "live-shopping-prices-additional-info"\n  }, [_vm.isCrossPriceVisible && _vm.liveShoppingData.item.prices.default.lowestPrice.value ? _c("div", {\n    staticClass: "live-shopping-lowest-price"\n  }, [_c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.$translate("Ceres::Template.singleItemLowestPrice", {\n        price: _vm.liveShoppingData.item.prices.default.lowestPrice.formatted\n      }))\n    }\n  })]) : _vm._e(), _vm._v(" "), !(_vm.liveShoppingData.item.unit.unitOfMeasurement === "C62" && _vm.liveShoppingData.item.unit.content === 1) ? _c("div", {\n    staticClass: "live-shopping-unit-price"\n  }, [_c("span", [_vm._v(_vm._s(_vm.liveShoppingData.item.unit.content))]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.liveShoppingData.item.unit.names.name))]), _vm._v(" "), _vm.liveShoppingData.item.variation.mayShowUnitPrice ? _c("span", [_vm._v("| " + _vm._s(_vm.prices.price.basePrice))]) : _vm._e()]) : _vm._e(), _vm._v("\\n\\n            " + _vm._s(_vm.$translate("Ceres::Template.liveShoppingFootnote")) + " "), _vm.showNetPrices ? [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemExclVAT")))] : [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemInclVAT")))], _vm._v(" " + _vm._s(_vm.$translate("Ceres::Template.itemExclusive")) + "\\n            "), _vm.$ceres.config.global.shippingCostsCategoryId > 0 ? _c("a", {\n    attrs: {\n      "data-toggle": "modal",\n      href: "#shippingscosts",\n      title: _vm.$translate("Ceres::Template.itemShippingCosts")\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemShippingCosts")))]) : _c("a", {\n    attrs: {\n      title: _vm.$translate("Ceres::Template.itemShippingCosts")\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemShippingCosts")))])], 2)]) : _c("div", {\n    staticClass: "thumb-content"\n  }, [_c("div", [_c("div", {\n    staticClass: "prices"\n  }, [_c("div", {\n    staticClass: "price-view-port"\n  }, [_vm.isCrossPriceVisible ? _c("del", {\n    staticClass: "crossprice"\n  }, [_vm._v("\\n                        " + _vm._s(_vm._f("itemCrossPrice")(_vm.prices.rrp.price.formatted)) + "\\n                    ")]) : _vm._e()]), _vm._v(" "), _c("div", {\n    staticClass: "price"\n  }, [_vm._v("\\n                    " + _vm._s(_vm.prices.price.price.formatted) + " *\\n                ")])]), _vm._v(" "), _vm.isCrossPriceVisible && _vm.liveShoppingData.item.prices.default.lowestPrice.value ? _c("div", {\n    staticClass: "category-lowest-price small"\n  }, [_c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.$translate("Ceres::Template.singleItemLowestPrice", {\n        price: _vm.liveShoppingData.item.prices.default.lowestPrice.formatted\n      }))\n    }\n  })]) : _vm._e(), _vm._v(" "), !(_vm.liveShoppingData.item.unit.unitOfMeasurement === "C62" && _vm.liveShoppingData.item.unit.content === 1) ? _c("div", {\n    staticClass: "category-unit-price small"\n  }, [_c("span", [_vm._v(_vm._s(_vm.liveShoppingData.item.unit.content))]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.liveShoppingData.item.unit.names.name))]), _vm._v(" "), _vm.liveShoppingData.item.variation.mayShowUnitPrice ? _c("span", [_vm._v("| " + _vm._s(_vm.prices.price.basePrice))]) : _vm._e()]) : _vm._e(), _vm._v(" "), _c("span", {\n    staticClass: "vat small text-muted"\n  }, [_vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.liveShoppingFootnote")) + " "), _vm.showNetPrices ? [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemExclVAT")))] : [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemInclVAT")))], _vm._v(" " + _vm._s(_vm.$translate("Ceres::Template.itemExclusive")) + "\\n                "), _vm.$ceres.config.global.shippingCostsCategoryId > 0 ? _c("a", {\n    attrs: {\n      "data-toggle": "modal",\n      href: "#shippingscosts",\n      title: _vm.$translate("Ceres::Template.itemShippingCosts")\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemShippingCosts")))]) : _c("a", {\n    attrs: {\n      title: _vm.$translate("Ceres::Template.itemShippingCosts")\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.itemShippingCosts")))])], 2)])])], 2);\n};\nvar LiveShoppingDetailsvue_type_template_id_0b16ffc8_staticRenderFns = [];\nLiveShoppingDetailsvue_type_template_id_0b16ffc8_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingDetails.vue?vue&type=template&id=0b16ffc8&\n\n// EXTERNAL MODULE: ./node_modules/dayjs/dayjs.min.js\nvar dayjs_min = __webpack_require__(7484);\nvar dayjs_min_default = /*#__PURE__*/__webpack_require__.n(dayjs_min);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/liveShopping/LiveShoppingDetails.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var LiveShoppingDetailsvue_type_script_lang_js_ = ({\n  props: {\n    liveShoppingData: {\n      type: Object,\n      required: true\n    },\n    displaySettings: {\n      type: Object,\n      default: function _default() {\n        return {\n          showCrossPrice: true,\n          showStock: true,\n          showStockProgress: true,\n          showTimer: true,\n          showTimerProgress: true\n        };\n      }\n    },\n    prices: {\n      type: Object,\n      required: true\n    },\n    isActiveByStock: {\n      type: Boolean\n    },\n    showNetPrices: {\n      type: Boolean\n    }\n  },\n  data: function data() {\n    return {\n      currentInterval: null,\n      duration: null,\n      hasClosed: null,\n      hasStarted: null,\n      itemPriceRebatePercentage: 0,\n      itemQuantityRemaining: 0,\n      momentBegin: null,\n      momentEnd: null,\n      quantitySoldPercentage: 0,\n      timePercentage: 0\n    };\n  },\n  computed: {\n    oldPriceBefore: function oldPriceBefore() {\n      return this.$translate(\'Ceres::Template.liveShoppingBefore\', {\n        \'price\': \'<del>\' + this.prices.rrp.unitPrice.formatted + \'</del>\'\n      });\n    },\n    oldPriceRrp: function oldPriceRrp() {\n      return this.$translate(\'Ceres::Template.liveShoppingRrp\', {\n        \'price\': \'<del>\' + this.prices.rrp.unitPrice.formatted + \'</del>\'\n      });\n    },\n    isCrossPriceVisible: function isCrossPriceVisible() {\n      return this.displaySettings.showCrossPrice && this.prices.rrp && this.prices.rrp.unitPrice.value > 0;\n    }\n  },\n  created: function created() {\n    this.initializeDataAndTimer();\n  },\n  methods: {\n    initializeDataAndTimer: function initializeDataAndTimer() {\n      var _this = this;\n      var momentNow = dayjs_min_default()();\n      this.momentBegin = dayjs_min_default().unix(this.liveShoppingData.liveShopping.fromTime);\n      this.momentEnd = dayjs_min_default().unix(this.liveShoppingData.liveShopping.toTime);\n      this.hasStarted = this.momentBegin.valueOf() < momentNow.valueOf();\n      this.hasClosed = this.momentEnd.valueOf() < momentNow.valueOf();\n      this.setQuantitySoldPercentage();\n      if (this.hasStarted && !this.hasClosed) {\n        this.setItemPriceRebatePercentage();\n      }\n      clearInterval(this.currentInterval);\n      this.calculations();\n      this.currentInterval = setInterval(function () {\n        _this.calculations();\n      }, 1000);\n    },\n    setQuantitySoldPercentage: function setQuantitySoldPercentage() {\n      var data = this.liveShoppingData.liveShopping;\n      var percentage = 100 - data.quantitySold / data.quantityMax * 100;\n      this.itemQuantityRemaining = data.quantityMax - data.quantitySold;\n      this.quantitySoldPercentage = percentage.toFixed(App.config.item.storeSpecial);\n    },\n    setItemPriceRebatePercentage: function setItemPriceRebatePercentage() {\n      var specialOfferPrice = this.prices.price.price.value;\n      var defaultPrice = this.prices.rrp && this.prices.rrp.price.value || 0;\n      if (defaultPrice === 0) {\n        this.itemPriceRebatePercentage = 0;\n      } else {\n        var percentage = 100 - specialOfferPrice / defaultPrice * 100;\n        percentage = percentage.toFixed(App.config.item.storeSpecial);\n        percentage = percentage.replace(".", App.decimalSeparator);\n        this.itemPriceRebatePercentage = percentage;\n      }\n    },\n    calculations: function calculations() {\n      var momentNow = dayjs_min_default()();\n      var fullSeconds = 0;\n      var remainSeconds = 0;\n      fullSeconds = this.momentEnd.diff(this.momentBegin, "second");\n      if (this.hasStarted) {\n        remainSeconds = this.momentEnd.diff(momentNow, "second");\n      } else {\n        remainSeconds = this.momentBegin.diff(momentNow, "second");\n      }\n      this.timePercentage = (remainSeconds / fullSeconds * 100).toFixed(App.config.item.storeSpecial);\n      this.duration = this.getDuration(remainSeconds);\n      var hasToStart = !this.hasStarted && this.momentBegin < momentNow;\n      var hasToClose = !this.hasClosed && this.momentEnd < momentNow;\n      if (hasToStart || hasToClose) {\n        clearInterval(this.currentInterval);\n        this.$emit("reload-offer");\n      }\n    },\n    getDuration: function getDuration(seconds) {\n      var days = Math.floor(seconds / (60 * 60 * 24));\n      seconds = seconds - days * 60 * 60 * 24;\n      var hours = Math.floor(seconds / (60 * 60));\n      seconds = seconds - hours * 60 * 60;\n      var minutes = Math.floor(seconds / 60);\n      seconds = seconds - minutes * 60;\n      return {\n        days: days,\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    }\n  },\n  watch: {\n    liveShoppingData: function liveShoppingData() {\n      this.initializeDataAndTimer();\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingDetails.vue?vue&type=script&lang=js&\n /* harmony default export */ var liveShopping_LiveShoppingDetailsvue_type_script_lang_js_ = (LiveShoppingDetailsvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingDetails.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  liveShopping_LiveShoppingDetailsvue_type_script_lang_js_,\n  LiveShoppingDetailsvue_type_template_id_0b16ffc8_render,\n  LiveShoppingDetailsvue_type_template_id_0b16ffc8_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var LiveShoppingDetails = (component.exports);\n// EXTERNAL MODULE: ./resources/js/src/app/components/itemList/ItemStoreSpecial.vue + 4 modules\nvar ItemStoreSpecial = __webpack_require__(2411);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/liveShopping/LiveShoppingItem.vue?vue&type=script&lang=js&\n\n\n\n\nvar TimeEnum = Object.freeze({\n  past: 1,\n  now: 2,\n  future: 3\n});\n/* harmony default export */ var LiveShoppingItemvue_type_script_lang_js_ = ({\n  components: {\n    LiveShoppingDetails: LiveShoppingDetails,\n    ItemStoreSpecial: ItemStoreSpecial/* default */.Z\n  },\n  props: {\n    liveShoppingId: {\n      type: Number,\n      required: true,\n      validator: function validator(value) {\n        return value % 1 === 0 && value >= 1 && value <= 10;\n      }\n    },\n    displaySettings: {\n      type: Object\n    },\n    paddingClasses: {\n      type: String,\n      default: null\n    },\n    paddingInlineStyles: {\n      type: String,\n      default: null\n    },\n    sorting: {\n      type: String,\n      default: null\n    },\n    showNetPrices: {\n      type: Boolean\n    }\n  },\n  computed: {\n    currentOffer: function currentOffer() {\n      return this.$store.state.liveShopping.liveShoppingOffers[this._uid];\n    },\n    isActive: function isActive() {\n      return this.isActiveByTime && this.isActiveByStock;\n    },\n    isActiveByTime: function isActiveByTime() {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.currentOffer)) {\n        var begin = parseInt(this.currentOffer.liveShopping.fromTime) * 1000;\n        var end = parseInt(this.currentOffer.liveShopping.toTime) * 1000;\n        var now = Date.now();\n        return begin < now && now < end;\n      }\n      return false;\n    },\n    isActiveByStock: function isActiveByStock() {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.currentOffer)) {\n        var liveShopping = this.currentOffer.liveShopping;\n        return liveShopping.quantitySold < liveShopping.quantityMax;\n      }\n      return false;\n    },\n    storeSpecial: function storeSpecial() {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.currentOffer)) {\n        if (this.isActive) {\n          return {\n            id: 1\n          };\n        }\n        var offerTime = this.whenIsCurrentOffer();\n        var name = "";\n        if (offerTime === TimeEnum.past) {\n          name = this.$translate("Ceres::Template.liveShoppingOfferClosed");\n        } else if (offerTime === TimeEnum.future) {\n          name = this.$translate("Ceres::Template.liveShoppingNextOffer");\n        } else if (offerTime === TimeEnum.now) {\n          name = this.$translate("Ceres::Template.liveShoppingOfferSoldOut");\n        }\n        return {\n          id: -1,\n          names: {\n            name: name\n          }\n        };\n      }\n      return null;\n    },\n    prices: function prices() {\n      var itemPrices = this.currentOffer.item.prices;\n      var prices = {\n        price: itemPrices.default,\n        rrp: itemPrices.rrp,\n        isRrpDefaultPrice: false\n      };\n      if (!(0,utils/* isNullOrUndefined */.le)(itemPrices.specialOffer)) {\n        prices.price = itemPrices.specialOffer;\n        prices.rrp = itemPrices.default || itemPrices.rrp;\n        prices.isRrpDefaultPrice = !!itemPrices.default;\n      }\n      return prices;\n    }\n  },\n  mounted: function mounted() {\n    this.reloadOffer();\n  },\n  methods: {\n    whenIsCurrentOffer: function whenIsCurrentOffer() {\n      var begin = parseInt(this.currentOffer.liveShopping.fromTime) * 1000;\n      var end = parseInt(this.currentOffer.liveShopping.toTime) * 1000;\n      var now = Date.now();\n      if (begin < now && now > end) {\n        return TimeEnum.past;\n      }\n      if (begin < now && now < end) {\n        return TimeEnum.now;\n      }\n      return TimeEnum.future;\n    },\n    reloadOffer: function reloadOffer() {\n      this.$store.dispatch("retrieveLiveShoppingOffer", {\n        liveShoppingId: this.liveShoppingId,\n        sorting: this.sorting,\n        uid: this._uid\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingItem.vue?vue&type=script&lang=js&\n /* harmony default export */ var liveShopping_LiveShoppingItemvue_type_script_lang_js_ = (LiveShoppingItemvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/liveShopping/LiveShoppingItem.vue\n\n\n\n\n\n/* normalize component */\n;\nvar LiveShoppingItem_component = (0,componentNormalizer/* default */.Z)(\n  liveShopping_LiveShoppingItemvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var LiveShoppingItem = (LiveShoppingItem_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1534\n')}}]);