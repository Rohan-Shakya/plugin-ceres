"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[32,33,47],{5314:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ButtonSizePropertyMixin; }\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar BUTTON_SIZES = ["btn-sm", "btn-lg"];\nvar LEGACY_CLASS_MAP = {\n  "sm": "btn-sm",\n  "md": "",\n  "lg": "btn-lg"\n};\nvar ButtonSizePropertyMixin = {\n  props: {\n    buttonSize: {\n      type: [String, null],\n      default: null,\n      validator: function validator(value) {\n        return [""].concat(BUTTON_SIZES, _toConsumableArray(Object.keys(LEGACY_CLASS_MAP))).indexOf(value) !== -1;\n      }\n    }\n  },\n  computed: {\n    buttonSizeClass: function buttonSizeClass() {\n      if (LEGACY_CLASS_MAP.hasOwnProperty(this.buttonSize)) {\n        return LEGACY_CLASS_MAP[this.buttonSize];\n      }\n      return this.buttonSize;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO0FBRXpDLElBQU1DLGdCQUFnQixHQUFHO0VBQ3JCLElBQUksRUFBRSxRQUFRO0VBQ2QsSUFBSSxFQUFFLEVBQUU7RUFDUixJQUFJLEVBQUU7QUFDVixDQUFDO0FBRU0sSUFBTUMsdUJBQXVCLEdBQ3BDO0VBQ0lDLEtBQUssRUFBRTtJQUNIQyxVQUFVLEVBQ1Y7TUFDSUMsSUFBSSxFQUFFLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDcEJDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFNBQVMsRUFBRSxtQkFBQUMsS0FBSyxFQUNoQjtRQUNJLE9BQU8sQ0FDSCxFQUFFLFNBQ0NULFlBQVkscUJBQ1pVLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQyxHQUNsQ1csT0FBTyxDQUFDSCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDM0I7SUFDSjtFQUNKLENBQUM7RUFFREksUUFBUSxFQUFFO0lBQ05DLGVBQWUsNkJBQ2Y7TUFDSSxJQUFJYixnQkFBZ0IsQ0FBQ2MsY0FBYyxDQUFDLElBQUksQ0FBQ1gsVUFBVSxDQUFDLEVBQ3BEO1FBQ0ksT0FBT0gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDRyxVQUFVLENBQUM7TUFDNUM7TUFFQSxPQUFPLElBQUksQ0FBQ0EsVUFBVTtJQUMxQjtFQUNKO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvbWl4aW5zL2J1dHRvblNpemVQcm9wZXJ0eS5taXhpbi5qcz9jMmQyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJVVFRPTl9TSVpFUyA9IFtcImJ0bi1zbVwiLCBcImJ0bi1sZ1wiXTtcblxuY29uc3QgTEVHQUNZX0NMQVNTX01BUCA9IHtcbiAgICBcInNtXCI6IFwiYnRuLXNtXCIsXG4gICAgXCJtZFwiOiBcIlwiLFxuICAgIFwibGdcIjogXCJidG4tbGdcIlxufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvblNpemVQcm9wZXJ0eU1peGluID1cbntcbiAgICBwcm9wczoge1xuICAgICAgICBidXR0b25TaXplOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBudWxsXSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB2YWxpZGF0b3I6IHZhbHVlID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgLi4uQlVUVE9OX1NJWkVTLFxuICAgICAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhMRUdBQ1lfQ0xBU1NfTUFQKVxuICAgICAgICAgICAgICAgIF0uaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGJ1dHRvblNpemVDbGFzcygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChMRUdBQ1lfQ0xBU1NfTUFQLmhhc093blByb3BlcnR5KHRoaXMuYnV0dG9uU2l6ZSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIExFR0FDWV9DTEFTU19NQVBbdGhpcy5idXR0b25TaXplXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiQlVUVE9OX1NJWkVTIiwiTEVHQUNZX0NMQVNTX01BUCIsIkJ1dHRvblNpemVQcm9wZXJ0eU1peGluIiwicHJvcHMiLCJidXR0b25TaXplIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJ2YWxpZGF0b3IiLCJ2YWx1ZSIsIk9iamVjdCIsImtleXMiLCJpbmRleE9mIiwiY29tcHV0ZWQiLCJidXR0b25TaXplQ2xhc3MiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5314\n')},6746:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ AddToBasket; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/AddToBasket.vue?vue&type=template&id=4d877efb&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [!_vm.showQuantity && _vm.useLargeScale && _vm.canBeAddedToBasket ? _c("div", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "add-to-basket-lg-container d-none d-lg-block",\n    class: {\n      "no-pointer-events": _vm.isLoading\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      title: _vm.$translate("Ceres::Template.singleItemAddToBasket")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.addToBasket();\n      }\n    }\n  }, [_c("icon", {\n    staticClass: "fa-lg mobile-icon-right",\n    attrs: {\n      icon: "cart-plus",\n      loading: _vm.isLoading\n    }\n  })], 1) : _vm._e(), _vm._v(" "), !_vm.showQuantity && _vm.useLargeScale && !_vm.canBeAddedToBasket ? _c("div", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "add-to-basket-lg-container d-none d-lg-block",\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      title: _vm.$translate("Ceres::Template.itemShowItem")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.directToItem();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-arrow-right fa-lg d-none d-sm-block"\n  })]) : _vm._e(), _vm._v(" "), _vm.showQuantity && !_vm.useLargeScale ? _c("div", {\n    staticClass: "d-inline",\n    class: {\n      "d-lg-none": !_vm.$ceres.isItemView\n    }\n  }, [_c("div", {\n    staticClass: "add-to-basket-container"\n  }, [_c("div", {\n    staticClass: "quantity-input-container"\n  }, [_c("quantity-input", {\n    attrs: {\n      value: _vm.quantity,\n      timeout: 0,\n      min: _vm.minimumQuantity,\n      max: _vm.maximumQuantity,\n      interval: _vm.intervalQuantity,\n      "variation-id": _vm.variationId,\n      waiting: _vm.isLoading || !_vm.isSalable || !_vm.allVariationsSelected\n    },\n    on: {\n      "quantity-change": _vm.updateQuantity,\n      "out-of-stock": _vm.handleButtonState\n    }\n  })], 1), _vm._v(" "), !_vm.allVariationsSelected || !_vm.isSalable ? _c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "btn btn-block btn-primary btn-appearance disabled",\n    class: _vm.buttonClasses,\n    style: _vm.paddingInlineStyles,\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      title: _vm.tooltipText\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-shopping-cart",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }), _vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.singleItemAddToBasket")) + "\\n            ")]) : !_vm.buttonLockState ? _c("button", {\n    staticClass: "btn btn-block btn-primary btn-appearance",\n    class: _vm.buttonClasses,\n    style: _vm.paddingInlineStyles,\n    attrs: {\n      disabled: _vm.isLoading || !_vm.hasPrice\n    },\n    on: {\n      click: function click($event) {\n        return _vm.addToBasket();\n      }\n    }\n  }, [_c("icon", {\n    attrs: {\n      icon: "shopping-cart",\n      loading: _vm.isLoading\n    }\n  }), _vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.singleItemAddToBasket")) + "\\n            ")], 1) : _c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "btn btn-block btn-primary btn-appearance disabled",\n    class: _vm.buttonClasses,\n    style: _vm.paddingInlineStyles,\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      title: _vm._f("translate")("Ceres::Template.singleItemQuantityMax", {\n        max: _vm.maximumQuantity\n      })\n    }\n  }, [_c("icon", {\n    attrs: {\n      icon: "shopping-cart",\n      waiting: _vm.isLoading\n    }\n  }), _vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.singleItemAddToBasket")) + "\\n            ")], 1)])]) : _vm._e(), _vm._v(" "), !_vm.showQuantity && !_vm.useLargeScale ? _c("div", {\n    staticClass: "d-inline",\n    class: {\n      "d-lg-none": !_vm.isWishList\n    }\n  }, [_c("div", {\n    staticClass: "btn-group",\n    attrs: {\n      role: "group",\n      "aria-label": "Thumb Control"\n    }\n  }, [_vm.canBeAddedToBasket ? _c("button", {\n    staticClass: "btn btn-primary btn-appearance mobile-width-button",\n    class: {\n      "no-pointer-events": _vm.isLoading\n    },\n    attrs: {\n      type: "button"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.addToBasket();\n      }\n    }\n  }, [_c("icon", {\n    staticClass: "fa-lg mobile-icon-right",\n    attrs: {\n      icon: "shopping-cart",\n      loading: _vm.isLoading\n    }\n  }), _vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.singleItemAddToBasket")) + "\\n            ")], 1) : _c("button", {\n    staticClass: "btn btn-primary btn-appearance mobile-width-button",\n    attrs: {\n      type: "button"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.directToItem();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-arrow-right fa-lg d-none d-sm-block",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  }), _vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.itemShowItem")) + "\\n            ")])])]) : _vm._e()]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/AddToBasket.vue?vue&type=template&id=4d877efb&\n\n// EXTERNAL MODULE: ./resources/js/src/app/exceptions/ExceptionMap.js\nvar ExceptionMap = __webpack_require__(6799);\n// EXTERNAL MODULE: ./resources/js/src/app/services/UrlService.js + 1 modules\nvar UrlService = __webpack_require__(6160);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n// EXTERNAL MODULE: ./resources/js/src/app/mixins/buttonSizeProperty.mixin.js\nvar buttonSizeProperty_mixin = __webpack_require__(5314);\n// EXTERNAL MODULE: ./resources/js/src/app/components/item/QuantityInput.vue + 4 modules\nvar QuantityInput = __webpack_require__(9556);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/basket/AddToBasket.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\n\nvar NotificationService = __webpack_require__(1841);\n/* harmony default export */ var AddToBasketvue_type_script_lang_js_ = ({\n  name: "add-to-basket",\n  mixins: [buttonSizeProperty_mixin/* ButtonSizePropertyMixin */.Z],\n  components: {\n    QuantityInput: QuantityInput["default"]\n  },\n  props: {\n    itemUrl: String,\n    showQuantity: {\n      type: Boolean,\n      default: false\n    },\n    useLargeScale: {\n      type: Boolean,\n      default: false\n    },\n    variationId: {\n      type: Number\n    },\n    isSalable: {\n      type: Boolean,\n      default: false\n    },\n    hasChildren: {\n      type: Boolean,\n      default: false\n    },\n    intervalQuantity: {\n      type: Number,\n      default: 1\n    },\n    minimumQuantity: {\n      type: Number,\n      default: 0\n    },\n    maximumQuantity: {\n      type: Number,\n      default: null\n    },\n    orderProperties: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    hasOrderProperties: {\n      type: Boolean,\n      default: false\n    },\n    hasRequiredOrderProperty: {\n      type: Boolean,\n      default: false\n    },\n    hasPrice: {\n      type: Boolean,\n      default: true\n    },\n    hasGraduatedPrice: {\n      type: Boolean,\n      default: false\n    },\n    paddingClasses: {\n      type: String,\n      default: null\n    },\n    paddingInlineStyles: {\n      type: String,\n      default: null\n    },\n    isWishList: {\n      type: Boolean,\n      default: false\n    },\n    propQuantity: {\n      type: Number,\n      default: null\n    },\n    itemType: {\n      type: String,\n      default: null\n    }\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  computed: _objectSpread({\n    isSet: function isSet() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variation && this.$store.state.items[this.itemId].variation.documents[0].data.item.itemType === "set" || this.itemType === "set";\n    },\n    canBeAddedToBasket: function canBeAddedToBasket() {\n      return this.isSalable && !this.hasChildren && !(this.minimumQuantity != 1 || this.intervalQuantity != 1) && !this.requiresProperties && this.hasPrice && !this.hasGraduatedPrice && !this.isSet;\n    },\n    requiresProperties: function requiresProperties() {\n      return App.config.item.requireOrderProperties && (this.hasOrderProperties || this.orderProperties.filter(function (property) {\n        return property.property.isShownOnItemPage;\n      }).length > 0) || this.hasRequiredOrderProperty;\n    },\n    buttonClasses: function buttonClasses() {\n      var classes = [];\n      if ((0,utils/* isDefined */.$K)(this.buttonSizeClass)) {\n        classes.push(this.buttonSizeClass);\n      }\n      if ((0,utils/* isDefined */.$K)(this.paddingClasses)) {\n        classes.push(this.paddingClasses.split(" "));\n      }\n      return classes;\n    },\n    tooltipText: function tooltipText() {\n      if (this.hasAvailableVariations) {\n        return this.$translate("Ceres::Template.singleItemPleaseSelectValidVariation");\n      } else {\n        return this.$translate("Ceres::Template.singleItemPleaseSelectNotAvailable");\n      }\n    },\n    variationOrderQuantity: function variationOrderQuantity() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationOrderQuantity;\n    },\n    variationMissingProperties: function variationMissingProperties() {\n      return this.$store.getters["".concat(this.itemId, "/variationMissingProperties")];\n    },\n    hasAvailableVariations: function hasAvailableVariations() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationSelect && this.$store.state.items[this.itemId].variationSelect.variations.some(function (variation) {\n        return variation.isSalable;\n      });\n    },\n    allVariationsSelected: function allVariationsSelected() {\n      if (this.isSet) {\n        return this.$store.getters["itemSetAllVariationSelected"];\n      } else {\n        // FIX return true if module is not registered. This equals the default value from the module\n        // and is required to use this component in other contexts, e.g. the category view\n        return !this.$store.state.items[this.itemId] || this.$store.state.items[this.itemId].variationSelect && this.$store.state.items[this.itemId].variationSelect.isVariationSelected;\n      }\n    },\n    isLoading: function isLoading() {\n      return this.$store.state.items.isAddToBasketLoading === this.variationId || this.$store.state.items.isSetLoading;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    basketItems: function basketItems(state) {\n      return state.basket.items;\n    },\n    isBasketLoading: function isBasketLoading(state) {\n      return state.basket.isBasketLoading;\n    }\n  })),\n  data: function data() {\n    return {\n      quantity: 1,\n      buttonLockState: false\n    };\n  },\n  methods: {\n    /**\n     * add an item to basket-resource\n     */\n    addToBasket: function addToBasket() {\n      var _this = this;\n      this.$store.dispatch("loadComponent", "add-item-to-basket-overlay");\n      this.$store.dispatch("loadComponent", "basket-preview");\n      if (this.variationMissingProperties !== undefined && this.variationMissingProperties.length) {\n        this.showMissingPropertiesError();\n      } else if (this.isSalable || this.isSet) {\n        this.$store.commit("setIsAddToBasketLoading", this.variationId);\n        var orderParamsAndSurcharge = extractPropertiesAndSurcharge(this.orderProperties);\n        var basketObject = {\n          variationId: this.variationId,\n          quantity: this.quantity,\n          basketItemOrderParams: orderParamsAndSurcharge.orderParams,\n          totalOrderParamsMarkup: orderParamsAndSurcharge.totalSurcharge\n        };\n        if (this.isSet) {\n          var setComponents = [];\n          this.$store.state.items.setComponentIds.forEach(function (itemId) {\n            var setComponent = _this.$store.getters["".concat(itemId, "/currentItemVariation")];\n            var variationId = setComponent && setComponent.variation.id;\n\n            // Extract order properties and total surcharge for set components\n            var setComponentOrderParamsAndSurcharge = extractPropertiesAndSurcharge(setComponent.properties.filter(function (prop) {\n              return prop.property.isOderProperty;\n            }));\n            setComponents.push({\n              variationId: variationId,\n              quantity: _this.$store.state.items[itemId].variationOrderQuantity,\n              basketItemOrderParams: setComponentOrderParamsAndSurcharge.orderParams,\n              totalOrderParamsMarkup: setComponentOrderParamsAndSurcharge.totalSurcharge\n            });\n          });\n          basketObject.setComponents = setComponents;\n        }\n        this.$store.dispatch("addBasketItem", basketObject).then(function (response) {\n          document.dispatchEvent(new CustomEvent("afterBasketItemAdded", {\n            detail: basketObject\n          }));\n          _this.$store.commit("setIsAddToBasketLoading", 0);\n        }, function (error) {\n          _this.$store.commit("setIsAddToBasketLoading", 0);\n          if (error.data) {\n            NotificationService.error(_this.$translate("Ceres::Template." + ExceptionMap/* default.get */.Z.get(error.data.exceptionCode.toString()), error.data.placeholder)).closeAfter(5000);\n          }\n        });\n      }\n    },\n    showMissingPropertiesError: function showMissingPropertiesError() {\n      this.$store.commit("".concat(this.itemId, "/setVariationMarkInvalidProps"), true);\n      var propertyNames = this.variationMissingProperties.map(function (property) {\n        return property.property.names.name;\n      });\n      var errorMsgContent = "";\n      var _iterator = _createForOfIteratorHelper(propertyNames),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var name = _step.value;\n          errorMsgContent += name + "<br>";\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      NotificationService.error(this.$translate("Ceres::Template.singleItemMissingOrderPropertiesError").replace("<properties>", errorMsgContent));\n    },\n    directToItem: function directToItem() {\n      (0,UrlService/* navigateTo */.T8)(this.itemUrl);\n    },\n    handleButtonState: function handleButtonState(value) {\n      this.buttonLockState = value;\n    },\n    /**\n     * update the property quantity of the current instance\n     * @param value\n     */\n    updateQuantity: function updateQuantity(value) {\n      this.quantity = value;\n    }\n  },\n  watch: {\n    quantity: function quantity(value) {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.itemId)) {\n        this.$store.commit("".concat(this.itemId, "/setVariationOrderQuantity"), value);\n        this.$store.commit("".concat(this.itemId, "/setVariationPropertySurcharges"), this.$store.getters["".concat(this.itemId, "/variationBasePrice")]);\n      }\n    },\n    variationOrderQuantity: function variationOrderQuantity(value) {\n      if (this.quantity !== value) {\n        this.quantity = value;\n      }\n    },\n    propQuantity: function propQuantity(value) {\n      if (!isNaN(value)) {\n        this.quantity = value;\n      }\n    }\n  }\n});\nfunction extractPropertiesAndSurcharge(orderProperties) {\n  var totalSurcharge = 0;\n  var orderParams = [];\n  orderProperties.forEach(function (orderProperty) {\n    if (!(0,utils/* isNullOrUndefined */.le)(orderProperty.property.value)) {\n      var property = orderProperty.property;\n      if (property.valueType === "float" && !(0,utils/* isNullOrUndefined */.le)(property.value) && property.value.slice(-1) === App.decimalSeparator) {\n        property.value = property.value.substr(0, property.value.length - 1);\n      }\n      totalSurcharge += (orderProperty.surcharge || 0) + (property.surcharge || 0);\n      orderParams.push({\n        propertyId: property.id,\n        type: property.valueType,\n        name: property.names.name,\n        value: property.value\n      });\n    }\n  });\n  return {\n    orderParams: orderParams,\n    totalSurcharge: totalSurcharge\n  };\n}\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/AddToBasket.vue?vue&type=script&lang=js&\n /* harmony default export */ var basket_AddToBasketvue_type_script_lang_js_ = (AddToBasketvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/basket/AddToBasket.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  basket_AddToBasketvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var AddToBasket = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L3NyYy9hcHAvY29tcG9uZW50cy9iYXNrZXQvQWRkVG9CYXNrZXQudnVlPzI3ODkiLCJ3ZWJwYWNrOi8vQ2VyZXMvLi9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2Jhc2tldC9BZGRUb0Jhc2tldC52dWU/YTQ0NyIsIndlYnBhY2s6Ly9DZXJlcy9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2Jhc2tldC9BZGRUb0Jhc2tldC52dWU/NDY1NiIsIndlYnBhY2s6Ly9DZXJlcy8uL3Jlc291cmNlcy9qcy9zcmMvYXBwL2NvbXBvbmVudHMvYmFza2V0L0FkZFRvQmFza2V0LnZ1ZT8xMDk3Iiwid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9iYXNrZXQvQWRkVG9CYXNrZXQudnVlP2E1NzAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICAhX3ZtLnNob3dRdWFudGl0eSAmJiBfdm0udXNlTGFyZ2VTY2FsZSAmJiBfdm0uY2FuQmVBZGRlZFRvQmFza2V0XG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW3sgbmFtZTogXCJ0b29sdGlwXCIsIHJhd05hbWU6IFwidi10b29sdGlwXCIgfV0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJhZGQtdG8tYmFza2V0LWxnLWNvbnRhaW5lciBkLW5vbmUgZC1sZy1ibG9ja1wiLFxuICAgICAgICAgICAgY2xhc3M6IHsgXCJuby1wb2ludGVyLWV2ZW50c1wiOiBfdm0uaXNMb2FkaW5nIH0sXG4gICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICBcImRhdGEtdG9nZ2xlXCI6IFwidG9vbHRpcFwiLFxuICAgICAgICAgICAgICBcImRhdGEtcGxhY2VtZW50XCI6IFwidG9wXCIsXG4gICAgICAgICAgICAgIHRpdGxlOiBfdm0uJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5zaW5nbGVJdGVtQWRkVG9CYXNrZXRcIiksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFkZFRvQmFza2V0KClcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImljb25cIiwge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYS1sZyBtb2JpbGUtaWNvbi1yaWdodFwiLFxuICAgICAgICAgICAgICBhdHRyczogeyBpY29uOiBcImNhcnQtcGx1c1wiLCBsb2FkaW5nOiBfdm0uaXNMb2FkaW5nIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgICFfdm0uc2hvd1F1YW50aXR5ICYmIF92bS51c2VMYXJnZVNjYWxlICYmICFfdm0uY2FuQmVBZGRlZFRvQmFza2V0XG4gICAgICA/IF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGlyZWN0aXZlczogW3sgbmFtZTogXCJ0b29sdGlwXCIsIHJhd05hbWU6IFwidi10b29sdGlwXCIgfV0sXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJhZGQtdG8tYmFza2V0LWxnLWNvbnRhaW5lciBkLW5vbmUgZC1sZy1ibG9ja1wiLFxuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcInRvb2x0aXBcIixcbiAgICAgICAgICAgICAgXCJkYXRhLXBsYWNlbWVudFwiOiBcInRvcFwiLFxuICAgICAgICAgICAgICB0aXRsZTogX3ZtLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuaXRlbVNob3dJdGVtXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF92bS5kaXJlY3RUb0l0ZW0oKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwiaVwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImZhIGZhLWFycm93LXJpZ2h0IGZhLWxnIGQtbm9uZSBkLXNtLWJsb2NrXCIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdXG4gICAgICAgIClcbiAgICAgIDogX3ZtLl9lKCksXG4gICAgX3ZtLl92KFwiIFwiKSxcbiAgICBfdm0uc2hvd1F1YW50aXR5ICYmICFfdm0udXNlTGFyZ2VTY2FsZVxuICAgICAgPyBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImQtaW5saW5lXCIsXG4gICAgICAgICAgICBjbGFzczogeyBcImQtbGctbm9uZVwiOiAhX3ZtLiRjZXJlcy5pc0l0ZW1WaWV3IH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImFkZC10by1iYXNrZXQtY29udGFpbmVyXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwicXVhbnRpdHktaW5wdXQtY29udGFpbmVyXCIgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcInF1YW50aXR5LWlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgbWluOiBfdm0ubWluaW11bVF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgIG1heDogX3ZtLm1heGltdW1RdWFudGl0eSxcbiAgICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbDogX3ZtLmludGVydmFsUXVhbnRpdHksXG4gICAgICAgICAgICAgICAgICAgICAgXCJ2YXJpYXRpb24taWRcIjogX3ZtLnZhcmlhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgIHdhaXRpbmc6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uaXNMb2FkaW5nIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhX3ZtLmlzU2FsYWJsZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIV92bS5hbGxWYXJpYXRpb25zU2VsZWN0ZWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJxdWFudGl0eS1jaGFuZ2VcIjogX3ZtLnVwZGF0ZVF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgIFwib3V0LW9mLXN0b2NrXCI6IF92bS5oYW5kbGVCdXR0b25TdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAhX3ZtLmFsbFZhcmlhdGlvbnNTZWxlY3RlZCB8fCAhX3ZtLmlzU2FsYWJsZVxuICAgICAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbeyBuYW1lOiBcInRvb2x0aXBcIiwgcmF3TmFtZTogXCJ2LXRvb2x0aXBcIiB9XSxcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGJ0bi1ibG9jayBidG4tcHJpbWFyeSBidG4tYXBwZWFyYW5jZSBkaXNhYmxlZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uYnV0dG9uQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLnBhZGRpbmdJbmxpbmVTdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS10b2dnbGVcIjogXCJ0b29sdGlwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRhdGEtcGxhY2VtZW50XCI6IFwidG9wXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogX3ZtLnRvb2x0aXBUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImlcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZmEgZmEtc2hvcHBpbmctY2FydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbUFkZFRvQmFza2V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIDogIV92bS5idXR0b25Mb2NrU3RhdGVcbiAgICAgICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1ibG9jayBidG4tcHJpbWFyeSBidG4tYXBwZWFyYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBfdm0uYnV0dG9uQ2xhc3NlcyxcbiAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogX3ZtLnBhZGRpbmdJbmxpbmVTdHlsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgZGlzYWJsZWQ6IF92bS5pc0xvYWRpbmcgfHwgIV92bS5oYXNQcmljZSB9LFxuICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFkZFRvQmFza2V0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaWNvblwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBcInNob3BwaW5nLWNhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogX3ZtLmlzTG9hZGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLiR0cmFuc2xhdGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNlcmVzOjpUZW1wbGF0ZS5zaW5nbGVJdGVtQWRkVG9CYXNrZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBfYyhcbiAgICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFt7IG5hbWU6IFwidG9vbHRpcFwiLCByYXdOYW1lOiBcInYtdG9vbHRpcFwiIH1dLFxuICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJidG4gYnRuLWJsb2NrIGJ0bi1wcmltYXJ5IGJ0bi1hcHBlYXJhbmNlIGRpc2FibGVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IF92bS5idXR0b25DbGFzc2VzLFxuICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBfdm0ucGFkZGluZ0lubGluZVN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLXRvZ2dsZVwiOiBcInRvb2x0aXBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS1wbGFjZW1lbnRcIjogXCJ0b3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBfdm0uX2YoXCJ0cmFuc2xhdGVcIikoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2VyZXM6OlRlbXBsYXRlLnNpbmdsZUl0ZW1RdWFudGl0eU1heFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB7IG1heDogX3ZtLm1heGltdW1RdWFudGl0eSB9XG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfYyhcImljb25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogXCJzaG9wcGluZy1jYXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdhaXRpbmc6IF92bS5pc0xvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbUFkZFRvQmFza2V0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgICBfdm0uX3YoXCIgXCIpLFxuICAgICFfdm0uc2hvd1F1YW50aXR5ICYmICFfdm0udXNlTGFyZ2VTY2FsZVxuICAgICAgPyBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiZC1pbmxpbmVcIiwgY2xhc3M6IHsgXCJkLWxnLW5vbmVcIjogIV92bS5pc1dpc2hMaXN0IH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImJ0bi1ncm91cFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvbGU6IFwiZ3JvdXBcIiwgXCJhcmlhLWxhYmVsXCI6IFwiVGh1bWIgQ29udHJvbFwiIH0sXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfdm0uY2FuQmVBZGRlZFRvQmFza2V0XG4gICAgICAgICAgICAgICAgICA/IF9jKFxuICAgICAgICAgICAgICAgICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1hcHBlYXJhbmNlIG1vYmlsZS13aWR0aC1idXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IFwibm8tcG9pbnRlci1ldmVudHNcIjogX3ZtLmlzTG9hZGluZyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmFkZFRvQmFza2V0KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcImljb25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJmYS1sZyBtb2JpbGUtaWNvbi1yaWdodFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IFwic2hvcHBpbmctY2FydFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IF92bS5pc0xvYWRpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNlcmVzOjpUZW1wbGF0ZS5zaW5nbGVJdGVtQWRkVG9CYXNrZXRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIDogX2MoXG4gICAgICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJidG4gYnRuLXByaW1hcnkgYnRuLWFwcGVhcmFuY2UgbW9iaWxlLXdpZHRoLWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmRpcmVjdFRvSXRlbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJpXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmYSBmYS1hcnJvdy1yaWdodCBmYS1sZyBkLW5vbmUgZC1zbS1ibG9ja1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLml0ZW1TaG93SXRlbVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApLFxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgOiBfdm0uX2UoKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cnVsZVNldFsxXS5ydWxlc1syXSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FkZFRvQmFza2V0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ZDg3N2VmYiZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2PlxuICAgICAgICA8ZGl2IDpjbGFzcz1cInsnbm8tcG9pbnRlci1ldmVudHMnOiBpc0xvYWRpbmd9XCIgY2xhc3M9XCJhZGQtdG8tYmFza2V0LWxnLWNvbnRhaW5lciBkLW5vbmUgZC1sZy1ibG9ja1wiIHYtaWY9XCIhc2hvd1F1YW50aXR5ICYmIHVzZUxhcmdlU2NhbGUgJiYgY2FuQmVBZGRlZFRvQmFza2V0XCJcbiAgICAgICAgICAgICB2LXRvb2x0aXAgZGF0YS10b2dnbGU9XCJ0b29sdGlwXCIgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIiA6dGl0bGU9XCIkdHJhbnNsYXRlKCdDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbUFkZFRvQmFza2V0JylcIiBAY2xpY2s9XCJhZGRUb0Jhc2tldCgpXCI+XG4gICAgICAgICAgICA8aWNvbiBpY29uPVwiY2FydC1wbHVzXCIgY2xhc3M9XCJmYS1sZyBtb2JpbGUtaWNvbi1yaWdodFwiIDpsb2FkaW5nPVwiaXNMb2FkaW5nXCI+PC9pY29uPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWRkLXRvLWJhc2tldC1sZy1jb250YWluZXIgZC1ub25lIGQtbGctYmxvY2tcIiB2LWlmPVwiIXNob3dRdWFudGl0eSAmJiB1c2VMYXJnZVNjYWxlICYmICFjYW5CZUFkZGVkVG9CYXNrZXRcIlxuICAgICAgICAgICAgIHYtdG9vbHRpcCBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIiBkYXRhLXBsYWNlbWVudD1cInRvcFwiIDp0aXRsZT1cIiR0cmFuc2xhdGUoJ0NlcmVzOjpUZW1wbGF0ZS5pdGVtU2hvd0l0ZW0nKVwiIEBjbGljaz1cImRpcmVjdFRvSXRlbSgpXCI+XG4gICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFycm93LXJpZ2h0IGZhLWxnIGQtbm9uZSBkLXNtLWJsb2NrXCI+PC9pPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1pbmxpbmVcIiB2LWlmPVwic2hvd1F1YW50aXR5ICYmICF1c2VMYXJnZVNjYWxlXCIgOmNsYXNzPVwieydkLWxnLW5vbmUnOiAhJGNlcmVzLmlzSXRlbVZpZXcgfVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFkZC10by1iYXNrZXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInF1YW50aXR5LWlucHV0LWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8cXVhbnRpdHktaW5wdXQgOnZhbHVlPVwicXVhbnRpdHlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQHF1YW50aXR5LWNoYW5nZT1cInVwZGF0ZVF1YW50aXR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBvdXQtb2Ytc3RvY2s9XCJoYW5kbGVCdXR0b25TdGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6dGltZW91dD1cIjBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOm1pbj1cIm1pbmltdW1RdWFudGl0eVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6bWF4PVwibWF4aW11bVF1YW50aXR5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDppbnRlcnZhbD1cImludGVydmFsUXVhbnRpdHlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnZhcmlhdGlvbi1pZD1cInZhcmlhdGlvbklkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDp3YWl0aW5nPVwiaXNMb2FkaW5nIHx8ICFpc1NhbGFibGUgfHwgIWFsbFZhcmlhdGlvbnNTZWxlY3RlZFwiPlxuICAgICAgICAgICAgICAgICAgICA8L3F1YW50aXR5LWlucHV0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgdi1pZj1cIiFhbGxWYXJpYXRpb25zU2VsZWN0ZWQgfHwgIWlzU2FsYWJsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXByaW1hcnkgYnRuLWFwcGVhcmFuY2UgZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgdi10b29sdGlwXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XCJ0b3BcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOnRpdGxlPVwidG9vbHRpcFRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiYnV0dG9uQ2xhc3Nlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJwYWRkaW5nSW5saW5lU3R5bGVzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEgZmEtc2hvcHBpbmctY2FydFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAge3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5zaW5nbGVJdGVtQWRkVG9CYXNrZXRcIikgfX1cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICB2LWVsc2UtaWY9XCIhYnV0dG9uTG9ja1N0YXRlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpkaXNhYmxlZD1cImlzTG9hZGluZyB8fCAhaGFzUHJpY2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1wcmltYXJ5IGJ0bi1hcHBlYXJhbmNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBjbGljaz1cImFkZFRvQmFza2V0KClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOmNsYXNzPVwiYnV0dG9uQ2xhc3Nlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICA6c3R5bGU9XCJwYWRkaW5nSW5saW5lU3R5bGVzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpY29uIGljb249XCJzaG9wcGluZy1jYXJ0XCIgOmxvYWRpbmc9XCJpc0xvYWRpbmdcIj48L2ljb24+XG4gICAgICAgICAgICAgICAgICAgIHt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbUFkZFRvQmFza2V0XCIpIH19XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB2LWVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBidG4tcHJpbWFyeSBidG4tYXBwZWFyYW5jZSBkaXNhYmxlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LXRvb2x0aXBcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD1cInRvcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6dGl0bGU9XCInQ2VyZXM6OlRlbXBsYXRlLnNpbmdsZUl0ZW1RdWFudGl0eU1heCcgfCB0cmFuc2xhdGUoeyBtYXg6IG1heGltdW1RdWFudGl0eSB9KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6Y2xhc3M9XCJidXR0b25DbGFzc2VzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIDpzdHlsZT1cInBhZGRpbmdJbmxpbmVTdHlsZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGljb24gaWNvbj1cInNob3BwaW5nLWNhcnRcIiA6d2FpdGluZz1cImlzTG9hZGluZ1wiPjwvaWNvbj5cbiAgICAgICAgICAgICAgICAgICAge3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5zaW5nbGVJdGVtQWRkVG9CYXNrZXRcIikgfX1cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiZC1pbmxpbmVcIiB2LWlmPVwiIXNob3dRdWFudGl0eSAmJiAhdXNlTGFyZ2VTY2FsZVwiIDpjbGFzcz1cInsnZC1sZy1ub25lJzogIWlzV2lzaExpc3QgfVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cFwiIHJvbGU9XCJncm91cFwiIGFyaWEtbGFiZWw9XCJUaHVtYiBDb250cm9sXCI+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgOmNsYXNzPVwieyduby1wb2ludGVyLWV2ZW50cyc6IGlzTG9hZGluZ31cIiB2LWlmPVwiY2FuQmVBZGRlZFRvQmFza2V0XCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLWFwcGVhcmFuY2UgbW9iaWxlLXdpZHRoLWJ1dHRvblwiIEBjbGljaz1cImFkZFRvQmFza2V0KClcIj5cbiAgICAgICAgICAgICAgICAgICAgPGljb24gaWNvbj1cInNob3BwaW5nLWNhcnRcIiBjbGFzcz1cImZhLWxnIG1vYmlsZS1pY29uLXJpZ2h0XCIgOmxvYWRpbmc9XCJpc0xvYWRpbmdcIj48L2ljb24+XG4gICAgICAgICAgICAgICAgICAgIHt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbUFkZFRvQmFza2V0XCIpIH19XG4gICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgdi1lbHNlIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1hcHBlYXJhbmNlIG1vYmlsZS13aWR0aC1idXR0b25cIiBAY2xpY2s9XCJkaXJlY3RUb0l0ZW0oKVwiPlxuICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz1cImZhIGZhLWFycm93LXJpZ2h0IGZhLWxnIGQtbm9uZSBkLXNtLWJsb2NrXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgICAgICAgICAgICB7eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLml0ZW1TaG93SXRlbVwiKSB9fVxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCBFeGNlcHRpb25NYXAgZnJvbSBcIi4uLy4uL2V4Y2VwdGlvbnMvRXhjZXB0aW9uTWFwXCI7XG5pbXBvcnQgeyBuYXZpZ2F0ZVRvIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL1VybFNlcnZpY2VcIjtcbmltcG9ydCB7IGlzTnVsbE9yVW5kZWZpbmVkLCBpc0RlZmluZWQgfSBmcm9tIFwiLi4vLi4vaGVscGVyL3V0aWxzXCI7XG5pbXBvcnQgeyBtYXBTdGF0ZSB9IGZyb20gXCJ2dWV4XCI7XG5pbXBvcnQgeyBCdXR0b25TaXplUHJvcGVydHlNaXhpbiB9IGZyb20gXCIuLi8uLi9taXhpbnMvYnV0dG9uU2l6ZVByb3BlcnR5Lm1peGluXCI7XG5pbXBvcnQgUXVhbnRpdHlJbnB1dCBmcm9tIFwiLi4vaXRlbS9RdWFudGl0eUlucHV0LnZ1ZVwiO1xuXG5jb25zdCBOb3RpZmljYXRpb25TZXJ2aWNlID0gcmVxdWlyZShcIi4uLy4uL3NlcnZpY2VzL05vdGlmaWNhdGlvblNlcnZpY2VcIik7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lOiBcImFkZC10by1iYXNrZXRcIixcblxuICAgIG1peGluczogW0J1dHRvblNpemVQcm9wZXJ0eU1peGluXSxcbiAgICBcbiAgICBjb21wb25lbnRzOlxuICAgIHtcbiAgICAgICAgUXVhbnRpdHlJbnB1dFxuICAgIH0sXG5cbiAgICBwcm9wczpcbiAgICB7XG4gICAgICAgIGl0ZW1Vcmw6IFN0cmluZyxcbiAgICAgICAgc2hvd1F1YW50aXR5OlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdXNlTGFyZ2VTY2FsZTpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIHZhcmlhdGlvbklkOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXJcbiAgICAgICAgfSxcbiAgICAgICAgaXNTYWxhYmxlOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgaGFzQ2hpbGRyZW46XG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBpbnRlcnZhbFF1YW50aXR5OlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICBkZWZhdWx0OiAxXG4gICAgICAgIH0sXG4gICAgICAgIG1pbmltdW1RdWFudGl0eTpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICB9LFxuICAgICAgICBtYXhpbXVtUXVhbnRpdHk6XG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcixcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgb3JkZXJQcm9wZXJ0aWVzOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtdXG4gICAgICAgIH0sXG4gICAgICAgIGhhc09yZGVyUHJvcGVydGllczpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGhhc1JlcXVpcmVkT3JkZXJQcm9wZXJ0eTpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGhhc1ByaWNlOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBoYXNHcmFkdWF0ZWRQcmljZTpcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgcGFkZGluZ0NsYXNzZXM6XG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgcGFkZGluZ0lubGluZVN0eWxlczpcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBpc1dpc2hMaXN0OlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgcHJvcFF1YW50aXR5OlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBOdW1iZXIsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGl0ZW1UeXBlOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgaW5qZWN0OiB7XG4gICAgICAgIGl0ZW1JZDoge1xuICAgICAgICAgICAgZGVmYXVsdDogbnVsbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOlxuICAgIHtcbiAgICAgICAgaXNTZXQoKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXVxuICAgICAgICAgICAgICAgICYmIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXS52YXJpYXRpb25cbiAgICAgICAgICAgICAgICAmJiB0aGlzLiRzdG9yZS5zdGF0ZS5pdGVtc1t0aGlzLml0ZW1JZF0udmFyaWF0aW9uLmRvY3VtZW50c1swXS5kYXRhLml0ZW0uaXRlbVR5cGUgPT09IFwic2V0XCJcbiAgICAgICAgICAgICkgfHwgdGhpcy5pdGVtVHlwZSA9PT0gXCJzZXRcIjtcbiAgICAgICAgfSxcblxuICAgICAgICBjYW5CZUFkZGVkVG9CYXNrZXQoKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1NhbGFibGUgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5oYXNDaGlsZHJlbiAmJlxuICAgICAgICAgICAgICAgICEodGhpcy5taW5pbXVtUXVhbnRpdHkgIT0gMSB8fCB0aGlzLmludGVydmFsUXVhbnRpdHkgIT0gMSkgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5yZXF1aXJlc1Byb3BlcnRpZXMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLmhhc1ByaWNlICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuaGFzR3JhZHVhdGVkUHJpY2UgJiZcbiAgICAgICAgICAgICAgICAhdGhpcy5pc1NldDtcbiAgICAgICAgfSxcblxuICAgICAgICByZXF1aXJlc1Byb3BlcnRpZXMoKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gKEFwcC5jb25maWcuaXRlbS5yZXF1aXJlT3JkZXJQcm9wZXJ0aWVzICYmIFxuICAgICAgICAgICAgICAgICh0aGlzLmhhc09yZGVyUHJvcGVydGllcyB8fCB0aGlzLm9yZGVyUHJvcGVydGllcy5maWx0ZXIocHJvcGVydHkgPT4gcHJvcGVydHkucHJvcGVydHkuaXNTaG93bk9uSXRlbVBhZ2UpLmxlbmd0aCA+IDApKSB8fFxuICAgICAgICAgICAgICAgIHRoaXMuaGFzUmVxdWlyZWRPcmRlclByb3BlcnR5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGJ1dHRvbkNsYXNzZXMoKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBjbGFzc2VzID0gW107XG5cbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodGhpcy5idXR0b25TaXplQ2xhc3MpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzZXMucHVzaCh0aGlzLmJ1dHRvblNpemVDbGFzcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQodGhpcy5wYWRkaW5nQ2xhc3NlcykpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKHRoaXMucGFkZGluZ0NsYXNzZXMuc3BsaXQoXCIgXCIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9vbHRpcFRleHQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNBdmFpbGFibGVWYXJpYXRpb25zKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbVBsZWFzZVNlbGVjdFZhbGlkVmFyaWF0aW9uXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbVBsZWFzZVNlbGVjdE5vdEF2YWlsYWJsZVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB2YXJpYXRpb25PcmRlclF1YW50aXR5KClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXSAmJiB0aGlzLiRzdG9yZS5zdGF0ZS5pdGVtc1t0aGlzLml0ZW1JZF0udmFyaWF0aW9uT3JkZXJRdWFudGl0eTtcbiAgICAgICAgfSxcblxuICAgICAgICB2YXJpYXRpb25NaXNzaW5nUHJvcGVydGllcygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5nZXR0ZXJzW2Ake3RoaXMuaXRlbUlkfS92YXJpYXRpb25NaXNzaW5nUHJvcGVydGllc2BdO1xuICAgICAgICB9LFxuXG4gICAgICAgIGhhc0F2YWlsYWJsZVZhcmlhdGlvbnMoKVxuICAgICAgICB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuc3RhdGUuaXRlbXNbdGhpcy5pdGVtSWRdXG4gICAgICAgICAgICAgICAgJiYgdGhpcy4kc3RvcmUuc3RhdGUuaXRlbXNbdGhpcy5pdGVtSWRdLnZhcmlhdGlvblNlbGVjdFxuICAgICAgICAgICAgICAgICYmIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXS52YXJpYXRpb25TZWxlY3QudmFyaWF0aW9ucy5zb21lKHZhcmlhdGlvbiA9PiB2YXJpYXRpb24uaXNTYWxhYmxlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBhbGxWYXJpYXRpb25zU2VsZWN0ZWQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1NldClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1tcIml0ZW1TZXRBbGxWYXJpYXRpb25TZWxlY3RlZFwiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBGSVggcmV0dXJuIHRydWUgaWYgbW9kdWxlIGlzIG5vdCByZWdpc3RlcmVkLiBUaGlzIGVxdWFscyB0aGUgZGVmYXVsdCB2YWx1ZSBmcm9tIHRoZSBtb2R1bGVcbiAgICAgICAgICAgICAgICAvLyBhbmQgaXMgcmVxdWlyZWQgdG8gdXNlIHRoaXMgY29tcG9uZW50IGluIG90aGVyIGNvbnRleHRzLCBlLmcuIHRoZSBjYXRlZ29yeSB2aWV3XG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLiRzdG9yZS5zdGF0ZS5pdGVtc1t0aGlzLml0ZW1JZF1cbiAgICAgICAgICAgICAgICAgICAgfHwgKHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXS52YXJpYXRpb25TZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICYmIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zW3RoaXMuaXRlbUlkXS52YXJpYXRpb25TZWxlY3QuaXNWYXJpYXRpb25TZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNMb2FkaW5nKClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zLmlzQWRkVG9CYXNrZXRMb2FkaW5nID09PSB0aGlzLnZhcmlhdGlvbklkIHx8IHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zLmlzU2V0TG9hZGluZztcbiAgICAgICAgfSxcblxuICAgICAgICAuLi5tYXBTdGF0ZSh7XG4gICAgICAgICAgICBiYXNrZXRJdGVtczogc3RhdGUgPT4gc3RhdGUuYmFza2V0Lml0ZW1zLFxuICAgICAgICAgICAgaXNCYXNrZXRMb2FkaW5nOiBzdGF0ZSA9PiBzdGF0ZS5iYXNrZXQuaXNCYXNrZXRMb2FkaW5nXG4gICAgICAgIH0pXG4gICAgfSxcblxuICAgIGRhdGEoKVxuICAgIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHF1YW50aXR5OiAxLFxuICAgICAgICAgICAgYnV0dG9uTG9ja1N0YXRlOiBmYWxzZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBtZXRob2RzOlxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIGFkZCBhbiBpdGVtIHRvIGJhc2tldC1yZXNvdXJjZVxuICAgICAgICAgKi9cbiAgICAgICAgYWRkVG9CYXNrZXQoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChcImxvYWRDb21wb25lbnRcIiwgXCJhZGQtaXRlbS10by1iYXNrZXQtb3ZlcmxheVwiKTtcbiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKFwibG9hZENvbXBvbmVudFwiLCBcImJhc2tldC1wcmV2aWV3XCIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy52YXJpYXRpb25NaXNzaW5nUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmIHRoaXMudmFyaWF0aW9uTWlzc2luZ1Byb3BlcnRpZXMubGVuZ3RoKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd01pc3NpbmdQcm9wZXJ0aWVzRXJyb3IoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTYWxhYmxlIHx8IHRoaXMuaXNTZXQpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KFwic2V0SXNBZGRUb0Jhc2tldExvYWRpbmdcIiwgdGhpcy52YXJpYXRpb25JZCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBvcmRlclBhcmFtc0FuZFN1cmNoYXJnZSA9IGV4dHJhY3RQcm9wZXJ0aWVzQW5kU3VyY2hhcmdlKHRoaXMub3JkZXJQcm9wZXJ0aWVzKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGJhc2tldE9iamVjdCA9XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhdGlvbklkICAgICAgICAgICAgIDogICB0aGlzLnZhcmlhdGlvbklkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHkgICAgICAgICAgICAgICAgOiAgIHRoaXMucXVhbnRpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICBiYXNrZXRJdGVtT3JkZXJQYXJhbXMgICA6ICAgb3JkZXJQYXJhbXNBbmRTdXJjaGFyZ2Uub3JkZXJQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3RhbE9yZGVyUGFyYW1zTWFya3VwICA6ICAgb3JkZXJQYXJhbXNBbmRTdXJjaGFyZ2UudG90YWxTdXJjaGFyZ2VcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmKHRoaXMuaXNTZXQpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRDb21wb25lbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLnN0YXRlLml0ZW1zLnNldENvbXBvbmVudElkcy5mb3JFYWNoKGl0ZW1JZCA9PlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRDb21wb25lbnQgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzW2Ake2l0ZW1JZH0vY3VycmVudEl0ZW1WYXJpYXRpb25gXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFyaWF0aW9uSWQgPSBzZXRDb21wb25lbnQgJiYgc2V0Q29tcG9uZW50LnZhcmlhdGlvbi5pZDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBvcmRlciBwcm9wZXJ0aWVzIGFuZCB0b3RhbCBzdXJjaGFyZ2UgZm9yIHNldCBjb21wb25lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXRDb21wb25lbnRPcmRlclBhcmFtc0FuZFN1cmNoYXJnZSA9IGV4dHJhY3RQcm9wZXJ0aWVzQW5kU3VyY2hhcmdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENvbXBvbmVudC5wcm9wZXJ0aWVzLmZpbHRlcihwcm9wID0+IHByb3AucHJvcGVydHkuaXNPZGVyUHJvcGVydHkpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRDb21wb25lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhdGlvbklkOiB2YXJpYXRpb25JZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eTogdGhpcy4kc3RvcmUuc3RhdGUuaXRlbXNbaXRlbUlkXS52YXJpYXRpb25PcmRlclF1YW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2tldEl0ZW1PcmRlclBhcmFtczogc2V0Q29tcG9uZW50T3JkZXJQYXJhbXNBbmRTdXJjaGFyZ2Uub3JkZXJQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxPcmRlclBhcmFtc01hcmt1cDogc2V0Q29tcG9uZW50T3JkZXJQYXJhbXNBbmRTdXJjaGFyZ2UudG90YWxTdXJjaGFyZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgYmFza2V0T2JqZWN0LnNldENvbXBvbmVudHMgPSBzZXRDb21wb25lbnRzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKFwiYWRkQmFza2V0SXRlbVwiLCBiYXNrZXRPYmplY3QpLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0+XG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiYWZ0ZXJCYXNrZXRJdGVtQWRkZWRcIiwgeyBkZXRhaWw6IGJhc2tldE9iamVjdCB9KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoXCJzZXRJc0FkZFRvQmFza2V0TG9hZGluZ1wiLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgPT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KFwic2V0SXNBZGRUb0Jhc2tldExvYWRpbmdcIiwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvci5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2VyZXM6OlRlbXBsYXRlLlwiICsgRXhjZXB0aW9uTWFwLmdldChlcnJvci5kYXRhLmV4Y2VwdGlvbkNvZGUudG9TdHJpbmcoKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5kYXRhLnBsYWNlaG9sZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmNsb3NlQWZ0ZXIoNTAwMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzaG93TWlzc2luZ1Byb3BlcnRpZXNFcnJvcigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdChgJHt0aGlzLml0ZW1JZH0vc2V0VmFyaWF0aW9uTWFya0ludmFsaWRQcm9wc2AsIHRydWUpO1xuXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eU5hbWVzID0gdGhpcy52YXJpYXRpb25NaXNzaW5nUHJvcGVydGllcy5tYXAocHJvcGVydHkgPT4gcHJvcGVydHkucHJvcGVydHkubmFtZXMubmFtZSk7XG4gICAgICAgICAgICBsZXQgZXJyb3JNc2dDb250ZW50ID0gXCJcIjtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIHByb3BlcnR5TmFtZXMpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZXJyb3JNc2dDb250ZW50ICs9IG5hbWUgKyBcIjxicj5cIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTm90aWZpY2F0aW9uU2VydmljZS5lcnJvcih0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuc2luZ2xlSXRlbU1pc3NpbmdPcmRlclByb3BlcnRpZXNFcnJvclwiKS5yZXBsYWNlKFwiPHByb3BlcnRpZXM+XCIsIGVycm9yTXNnQ29udGVudCkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpcmVjdFRvSXRlbSgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hdmlnYXRlVG8odGhpcy5pdGVtVXJsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBoYW5kbGVCdXR0b25TdGF0ZSh2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5idXR0b25Mb2NrU3RhdGUgPSB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogdXBkYXRlIHRoZSBwcm9wZXJ0eSBxdWFudGl0eSBvZiB0aGUgY3VycmVudCBpbnN0YW5jZVxuICAgICAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIHVwZGF0ZVF1YW50aXR5KHZhbHVlKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnF1YW50aXR5ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgd2F0Y2g6XG4gICAge1xuICAgICAgICBxdWFudGl0eSh2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYoIWlzTnVsbE9yVW5kZWZpbmVkKHRoaXMuaXRlbUlkKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoYCR7dGhpcy5pdGVtSWR9L3NldFZhcmlhdGlvbk9yZGVyUXVhbnRpdHlgLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KGAke3RoaXMuaXRlbUlkfS9zZXRWYXJpYXRpb25Qcm9wZXJ0eVN1cmNoYXJnZXNgLCB0aGlzLiRzdG9yZS5nZXR0ZXJzW2Ake3RoaXMuaXRlbUlkfS92YXJpYXRpb25CYXNlUHJpY2VgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdmFyaWF0aW9uT3JkZXJRdWFudGl0eSh2YWx1ZSlcbiAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRoaXMucXVhbnRpdHkgIT09IHZhbHVlKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpdHkgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwcm9wUXVhbnRpdHkodmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICghaXNOYU4odmFsdWUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpdHkgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXNBbmRTdXJjaGFyZ2Uob3JkZXJQcm9wZXJ0aWVzKVxue1xuICAgIGxldCB0b3RhbFN1cmNoYXJnZSA9IDA7XG4gICAgY29uc3Qgb3JkZXJQYXJhbXMgPSBbXTtcblxuICAgIG9yZGVyUHJvcGVydGllcy5mb3JFYWNoKChvcmRlclByb3BlcnR5KSA9PlxuICAgIHtcbiAgICAgICAgaWYoIWlzTnVsbE9yVW5kZWZpbmVkKG9yZGVyUHJvcGVydHkucHJvcGVydHkudmFsdWUpKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG9yZGVyUHJvcGVydHkucHJvcGVydHk7XG5cbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eS52YWx1ZVR5cGUgPT09IFwiZmxvYXRcIiAmJlxuICAgICAgICAgICAgICAgICFpc051bGxPclVuZGVmaW5lZChwcm9wZXJ0eS52YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eS52YWx1ZS5zbGljZSgtMSkgPT09IEFwcC5kZWNpbWFsU2VwYXJhdG9yKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gcHJvcGVydHkudmFsdWUuc3Vic3RyKDAsIHByb3BlcnR5LnZhbHVlLmxlbmd0aCAtIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0b3RhbFN1cmNoYXJnZSArPSAob3JkZXJQcm9wZXJ0eS5zdXJjaGFyZ2UgfHwgMCkgKyAocHJvcGVydHkuc3VyY2hhcmdlIHx8IDApO1xuXG4gICAgICAgICAgICBvcmRlclBhcmFtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUlkOiBwcm9wZXJ0eS5pZCxcbiAgICAgICAgICAgICAgICB0eXBlOiBwcm9wZXJ0eS52YWx1ZVR5cGUsXG4gICAgICAgICAgICAgICAgbmFtZTogcHJvcGVydHkubmFtZXMubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogcHJvcGVydHkudmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBvcmRlclBhcmFtczogb3JkZXJQYXJhbXMsXG4gICAgICAgIHRvdGFsU3VyY2hhcmdlOiB0b3RhbFN1cmNoYXJnZVxuICAgIH07XG59XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMi51c2UhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGRUb0Jhc2tldC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMi51c2UhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BZGRUb0Jhc2tldC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FkZFRvQmFza2V0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD00ZDg3N2VmYiZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BZGRUb0Jhc2tldC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FkZFRvQmFza2V0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm5hbWVzIjpbInJlbmRlciIsIl92bSIsIl9jIiwiX3NlbGYiLCJzaG93UXVhbnRpdHkiLCJ1c2VMYXJnZVNjYWxlIiwiY2FuQmVBZGRlZFRvQmFza2V0IiwiZGlyZWN0aXZlcyIsIm5hbWUiLCJyYXdOYW1lIiwic3RhdGljQ2xhc3MiLCJjbGFzcyIsImlzTG9hZGluZyIsImF0dHJzIiwidGl0bGUiLCIkdHJhbnNsYXRlIiwib24iLCJjbGljayIsIiRldmVudCIsImFkZFRvQmFza2V0IiwiaWNvbiIsImxvYWRpbmciLCJfZSIsIl92IiwiZGlyZWN0VG9JdGVtIiwiJGNlcmVzIiwiaXNJdGVtVmlldyIsInZhbHVlIiwicXVhbnRpdHkiLCJ0aW1lb3V0IiwibWluIiwibWluaW11bVF1YW50aXR5IiwibWF4IiwibWF4aW11bVF1YW50aXR5IiwiaW50ZXJ2YWwiLCJpbnRlcnZhbFF1YW50aXR5IiwidmFyaWF0aW9uSWQiLCJ3YWl0aW5nIiwiaXNTYWxhYmxlIiwiYWxsVmFyaWF0aW9uc1NlbGVjdGVkIiwidXBkYXRlUXVhbnRpdHkiLCJoYW5kbGVCdXR0b25TdGF0ZSIsImJ1dHRvbkNsYXNzZXMiLCJzdHlsZSIsInBhZGRpbmdJbmxpbmVTdHlsZXMiLCJ0b29sdGlwVGV4dCIsIl9zIiwiYnV0dG9uTG9ja1N0YXRlIiwiZGlzYWJsZWQiLCJoYXNQcmljZSIsIl9mIiwiaXNXaXNoTGlzdCIsInJvbGUiLCJ0eXBlIiwic3RhdGljUmVuZGVyRm5zIiwiX3dpdGhTdHJpcHBlZCIsIm1peGlucyIsImNvbXBvbmVudHMiLCJRdWFudGl0eUlucHV0IiwicHJvcHMiLCJpdGVtVXJsIiwiZGVmYXVsdCIsImhhc0NoaWxkcmVuIiwib3JkZXJQcm9wZXJ0aWVzIiwiaGFzT3JkZXJQcm9wZXJ0aWVzIiwiaGFzUmVxdWlyZWRPcmRlclByb3BlcnR5IiwiaGFzR3JhZHVhdGVkUHJpY2UiLCJwYWRkaW5nQ2xhc3NlcyIsInByb3BRdWFudGl0eSIsIml0ZW1UeXBlIiwiaW5qZWN0IiwiaXRlbUlkIiwiY29tcHV0ZWQiLCJpc1NldCIsInJlcXVpcmVzUHJvcGVydGllcyIsImNsYXNzZXMiLCJ2YXJpYXRpb25PcmRlclF1YW50aXR5IiwidmFyaWF0aW9uTWlzc2luZ1Byb3BlcnRpZXMiLCJoYXNBdmFpbGFibGVWYXJpYXRpb25zIiwibWFwU3RhdGUiLCJiYXNrZXRJdGVtcyIsImlzQmFza2V0TG9hZGluZyIsImRhdGEiLCJtZXRob2RzIiwiYmFza2V0SXRlbU9yZGVyUGFyYW1zIiwidG90YWxPcmRlclBhcmFtc01hcmt1cCIsInNldENvbXBvbmVudCIsInNldENvbXBvbmVudHMiLCJiYXNrZXRPYmplY3QiLCJkb2N1bWVudCIsImRldGFpbCIsIk5vdGlmaWNhdGlvblNlcnZpY2UiLCJlcnJvciIsInNob3dNaXNzaW5nUHJvcGVydGllc0Vycm9yIiwicHJvcGVydHlOYW1lcyIsImVycm9yTXNnQ29udGVudCIsIm5hdmlnYXRlVG8iLCJ3YXRjaCIsInByb3BlcnR5IiwidG90YWxTdXJjaGFyZ2UiLCJvcmRlclBhcmFtcyIsInByb3BlcnR5SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6746\n')},9556:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ QuantityInput; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "qty-box d-flex h-100"\n  }, [_c("input", {\n    ref: "quantityInputField",\n    staticClass: "qty-input text-center",\n    attrs: {\n      type: "text",\n      disabled: _vm.waiting,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInput")\n    },\n    domProps: {\n      value: _vm.displayValue\n    },\n    on: {\n      change: function change($event) {\n        return _vm.setValue($event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("div", {\n    staticClass: "qty-btn-container d-flex flex-column"\n  }, [_c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip",\n      value: _vm.isMaximum && _vm.compMax !== 0,\n      expression: "isMaximum && compMax !== 0"\n    }],\n    staticClass: "btn qty-btn flex-fill d-flex justify-content-center p-0",\n    class: {\n      disabled: _vm.isMaximum || _vm.waiting,\n      "btn-appearance": _vm.useAppearance\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "top",\n      "data-testing": "quantity-btn-increase",\n      title: _vm.maximumHint,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInputIncrease")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.increaseValue();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-plus default-float",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  })]), _vm._v(" "), _c("button", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip",\n      value: _vm.isMinimum && _vm.compMax !== 0,\n      expression: "isMinimum && compMax !== 0"\n    }],\n    staticClass: "btn qty-btn flex-fill d-flex justify-content-center p-0",\n    class: {\n      disabled: _vm.isMinimum || _vm.waiting,\n      "btn-appearance": _vm.useAppearance\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      "data-placement": "bottom",\n      "data-testing": "quantity-btn-decrease",\n      title: _vm.minimumHint,\n      "aria-label": _vm.$translate("Ceres::Template.itemQuantityInputDecrease")\n    },\n    on: {\n      click: function click($event) {\n        return _vm.decreaseValue();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-minus default-float",\n    attrs: {\n      "aria-hidden": "true"\n    }\n  })])])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/number.js\nvar number = __webpack_require__(260);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/debounce.js\nvar debounce = __webpack_require__(9852);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/* harmony default export */ var QuantityInputvue_type_script_lang_js_ = ({\n  name: "quantity-input",\n  props: {\n    value: {\n      type: Number,\n      required: true\n    },\n    timeout: {\n      type: Number,\n      required: false,\n      default: 500\n    },\n    min: {\n      type: Number,\n      required: false,\n      default: 0\n    },\n    max: {\n      type: Number,\n      required: false\n    },\n    interval: {\n      type: Number,\n      required: false,\n      default: 1\n    },\n    waiting: {\n      type: Boolean,\n      required: false\n    },\n    variationId: {\n      type: Number,\n      required: false\n    },\n    useAppearance: Boolean\n  },\n  data: function data() {\n    return {\n      compValue: this.value,\n      compMin: this.min,\n      compMax: this.max,\n      compInterval: this.interval,\n      compDecimals: 0,\n      onValueChanged: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n    this.compInterval = (0,utils/* defaultValue */.LS)(this.compInterval, 1);\n    this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\n    var minDecimals = (0,number/* floatLength */.GQ)(this.min);\n    var intervalDecimals = (0,number/* floatLength */.GQ)(this.compInterval);\n    this.compDecimals = Math.max(minDecimals, intervalDecimals);\n    this.onValueChanged = (0,debounce/* debounce */.D)(function () {\n      _this.$emit("quantity-change", _this.compValue);\n    }, (0,utils/* defaultValue */.LS)(this.timeout, 500));\n    if (!(0,utils/* isNullOrUndefined */.le)(this.variationId)) {\n      this.fetchQuantityFromBasket();\n    }\n  },\n  computed: _objectSpread({\n    variationBasketQuantity: function variationBasketQuantity() {\n      var _this2 = this;\n      if ((0,utils/* isNullOrUndefined */.le)(this.variationId)) {\n        return 0;\n      }\n      if (this.itemSetVariationId <= 0 || this.variationId === this.itemSetVariationId) {\n        var basketObject = this.$store.state.basket.items.find(function (variations) {\n          return variations.variationId === _this2.variationId;\n        });\n        return basketObject ? basketObject.quantity : 0;\n      }\n      return 0;\n    },\n    isMinimum: function isMinimum() {\n      return (0,utils/* isDefined */.$K)(this.compMin) && this.compValue - this.compInterval < this.compMin;\n    },\n    isMaximum: function isMaximum() {\n      return (0,utils/* isDefined */.$K)(this.compMax) && this.compValue + this.compInterval > this.compMax;\n    },\n    minimumHint: function minimumHint() {\n      return this.$translate("Ceres::Template.singleItemQuantityMin", {\n        min: this.$options.filters.numberFormat(this.compMin)\n      });\n    },\n    maximumHint: function maximumHint() {\n      return this.$translate("Ceres::Template.singleItemQuantityMax", {\n        max: this.$options.filters.numberFormat(this.max)\n      });\n    },\n    displayValue: function displayValue() {\n      return this.$options.filters.numberFormat(this.compValue);\n    },\n    itemSetVariationId: function itemSetVariationId() {\n      if (this.$store.state.items.itemSetId > 0) {\n        return this.$store.getters["".concat(this.$store.state.items.itemSetId, "/currentItemVariation")].variation.id;\n      }\n      return 0;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    basketItems: function basketItems(state) {\n      return state.basket.items;\n    }\n  })),\n  watch: {\n    variationId: function variationId(newValue) {\n      if ((0,utils/* isDefined */.$K)(newValue)) {\n        this.fetchQuantityFromBasket();\n      }\n    },\n    basketItems: {\n      handler: function handler(newValue, oldValue) {\n        if ((0,utils/* isDefined */.$K)(this.variationId)) {\n          this.fetchQuantityFromBasket();\n        }\n      },\n      deep: true\n    },\n    min: function min(newValue) {\n      this.compMin = newValue;\n      this.fetchQuantityFromBasket();\n    },\n    max: function max(newValue) {\n      this.compMax = newValue;\n      this.fetchQuantityFromBasket();\n    },\n    value: function value(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.setValue(newValue);\n      }\n    },\n    interval: function interval(newInterval) {\n      this.compInterval = (0,utils/* defaultValue */.LS)(newInterval, 1);\n    }\n  },\n  methods: {\n    increaseValue: function increaseValue() {\n      var newValue = (0,number/* formatFloat */.$1)(this.compValue + this.compInterval, this.compDecimals);\n      if (((0,utils/* isNullOrUndefined */.le)(this.compMax) || newValue <= this.compMax) && !this.waiting) {\n        this.setValue(newValue);\n      }\n    },\n    decreaseValue: function decreaseValue() {\n      var newValue = (0,number/* formatFloat */.$1)(this.compValue - this.compInterval, this.compDecimals);\n      if (((0,utils/* isNullOrUndefined */.le)(this.compMin) || newValue >= this.compMin) && !this.waiting) {\n        this.setValue(newValue);\n      }\n    },\n    setValue: function setValue(value) {\n      // consider the configured decimal seperator (if the input is typed in the input field)\n      if (typeof value === "string") {\n        value = value.replace(App.decimalSeparator || ",", ".");\n      }\n      value = parseFloat(value);\n      if (isNaN(value)) {\n        value = (0,utils/* defaultValue */.LS)(this.compMin, 1);\n      }\n\n      // limit new value to min/ max value\n      value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n\n      // make sure, new value is an even multiple of interval\n      var diff;\n      if (this.variationBasketQuantity === 0 && this.min !== 0) {\n        diff = (0,number/* formatFloat */.$1)((value - this.min) % this.compInterval, this.compDecimals, true);\n      } else {\n        diff = (0,number/* formatFloat */.$1)(value % this.compInterval, this.compDecimals, true);\n      }\n      if (diff > 0 && diff !== this.compInterval) {\n        if (diff < this.compInterval / 2) {\n          value -= diff;\n        } else {\n          value += this.compInterval - diff;\n        }\n        value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n      }\n\n      // cut fraction\n      value = (0,number/* formatFloat */.$1)(value, this.compDecimals);\n      if (value !== this.compValue) {\n        this.compValue = value;\n        this.onValueChanged();\n      } else if (!(0,utils/* isNullOrUndefined */.le)(this.$refs.quantityInputField)) {\n        this.$refs.quantityInputField.value = this.displayValue;\n      }\n    },\n    fetchQuantityFromBasket: function fetchQuantityFromBasket() {\n      if (!(0,utils/* isNullOrUndefined */.le)(this.min) && this.variationBasketQuantity >= this.min && this.variationBasketQuantity !== 0) {\n        // set the minimum value to the interval, if the item is already in the basket\n        this.compMin = this.compInterval;\n      } else if (this.variationBasketQuantity === 0) {\n        // reset the minimum, when item is not in the basket\n        this.compMin = this.min;\n      }\n      if (!(0,utils/* isNullOrUndefined */.le)(this.max)) {\n        // decrease maximum quantity by quantity of variations already in basket\n        this.compMax = this.max - this.variationBasketQuantity;\n        if (this.variationBasketQuantity + this.compInterval > this.max) {\n          this.compMin = 0;\n          this.compMax = 0;\n          this.$emit("out-of-stock", true);\n        } else {\n          this.$emit("out-of-stock", false);\n        }\n      } else {\n        this.$emit("out-of-stock", false);\n      }\n      this.setValue(this.compMin);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_QuantityInputvue_type_script_lang_js_ = (QuantityInputvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_QuantityInputvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var QuantityInput = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9556\n')},7758:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ SingleAddToBasket; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/SingleAddToBasket.vue?vue&type=template&id=98012874&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.currentVariation ? _c("add-to-basket", {\n    attrs: {\n      "variation-id": _vm.currentVariation.variation.id,\n      "is-salable": !!_vm.currentVariation.filter && _vm.currentVariation.filter.isSalable,\n      "has-children": !!_vm.currentVariation.filter && _vm.currentVariation.filter.hasActiveChildren,\n      "interval-quantity": _vm.currentVariation.variation.intervalOrderQuantity || 1,\n      "minimum-quantity": _vm.currentVariation.variation.minimumOrderQuantity,\n      "maximum-quantity": !!_vm.currentVariation.variation.maximumOrderQuantity && _vm.currentVariation.variation.maximumOrderQuantity > 0 ? _vm.currentVariation.variation.maximumOrderQuantity : null,\n      "order-properties": _vm.currentVariation.properties.filter(function (prop) {\n        return prop.property.isOderProperty;\n      }),\n      "has-order-properties": _vm.currentVariation.hasOrderProperties,\n      "has-required-order-property": _vm.currentVariation.hasRequiredOrderProperty,\n      "use-large-scale": false,\n      "show-quantity": true,\n      "item-url": _vm._f("itemURL")(_vm.currentVariation),\n      "has-price": _vm._f("hasItemDefaultPrice")(_vm.currentVariation),\n      "button-size": _vm.buttonSize,\n      "padding-classes": _vm.paddingClasses,\n      "padding-inline-styles": _vm.paddingStyles,\n      "data-testing": "single-add-to-basket-button"\n    }\n  }) : _vm._e();\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/SingleAddToBasket.vue?vue&type=template&id=98012874&\n\n// EXTERNAL MODULE: ./resources/js/src/app/components/basket/AddToBasket.vue + 4 modules\nvar AddToBasket = __webpack_require__(6746);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/SingleAddToBasket.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var SingleAddToBasketvue_type_script_lang_js_ = ({\n  name: "single-add-to-basket",\n  components: {\n    AddToBasket: AddToBasket["default"]\n  },\n  props: {\n    buttonSize: String,\n    paddingClasses: String,\n    paddingStyles: String\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  computed: {\n    currentVariation: function currentVariation() {\n      return this.$store.getters["".concat(this.itemId, "/currentItemVariation")];\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/SingleAddToBasket.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_SingleAddToBasketvue_type_script_lang_js_ = (SingleAddToBasketvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/SingleAddToBasket.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_SingleAddToBasketvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var SingleAddToBasket = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7758\n')}}]);