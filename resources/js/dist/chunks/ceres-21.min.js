"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[21],{5314:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ButtonSizePropertyMixin; }\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar BUTTON_SIZES = ["btn-sm", "btn-lg"];\nvar LEGACY_CLASS_MAP = {\n  "sm": "btn-sm",\n  "md": "",\n  "lg": "btn-lg"\n};\nvar ButtonSizePropertyMixin = {\n  props: {\n    buttonSize: {\n      type: [String, null],\n      default: null,\n      validator: function validator(value) {\n        return [""].concat(BUTTON_SIZES, _toConsumableArray(Object.keys(LEGACY_CLASS_MAP))).indexOf(value) !== -1;\n      }\n    }\n  },\n  computed: {\n    buttonSizeClass: function buttonSizeClass() {\n      if (LEGACY_CLASS_MAP.hasOwnProperty(this.buttonSize)) {\n        return LEGACY_CLASS_MAP[this.buttonSize];\n      }\n      return this.buttonSize;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO0FBRXpDLElBQU1DLGdCQUFnQixHQUFHO0VBQ3JCLElBQUksRUFBRSxRQUFRO0VBQ2QsSUFBSSxFQUFFLEVBQUU7RUFDUixJQUFJLEVBQUU7QUFDVixDQUFDO0FBRU0sSUFBTUMsdUJBQXVCLEdBQ3BDO0VBQ0lDLEtBQUssRUFBRTtJQUNIQyxVQUFVLEVBQ1Y7TUFDSUMsSUFBSSxFQUFFLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDcEJDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFNBQVMsRUFBRSxtQkFBQUMsS0FBSyxFQUNoQjtRQUNJLE9BQU8sQ0FDSCxFQUFFLFNBQ0NULFlBQVkscUJBQ1pVLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQyxHQUNsQ1csT0FBTyxDQUFDSCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDM0I7SUFDSjtFQUNKLENBQUM7RUFFREksUUFBUSxFQUFFO0lBQ05DLGVBQWUsNkJBQ2Y7TUFDSSxJQUFJYixnQkFBZ0IsQ0FBQ2MsY0FBYyxDQUFDLElBQUksQ0FBQ1gsVUFBVSxDQUFDLEVBQ3BEO1FBQ0ksT0FBT0gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDRyxVQUFVLENBQUM7TUFDNUM7TUFFQSxPQUFPLElBQUksQ0FBQ0EsVUFBVTtJQUMxQjtFQUNKO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvbWl4aW5zL2J1dHRvblNpemVQcm9wZXJ0eS5taXhpbi5qcz9jMmQyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJVVFRPTl9TSVpFUyA9IFtcImJ0bi1zbVwiLCBcImJ0bi1sZ1wiXTtcblxuY29uc3QgTEVHQUNZX0NMQVNTX01BUCA9IHtcbiAgICBcInNtXCI6IFwiYnRuLXNtXCIsXG4gICAgXCJtZFwiOiBcIlwiLFxuICAgIFwibGdcIjogXCJidG4tbGdcIlxufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvblNpemVQcm9wZXJ0eU1peGluID1cbntcbiAgICBwcm9wczoge1xuICAgICAgICBidXR0b25TaXplOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBudWxsXSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB2YWxpZGF0b3I6IHZhbHVlID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgLi4uQlVUVE9OX1NJWkVTLFxuICAgICAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhMRUdBQ1lfQ0xBU1NfTUFQKVxuICAgICAgICAgICAgICAgIF0uaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGJ1dHRvblNpemVDbGFzcygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChMRUdBQ1lfQ0xBU1NfTUFQLmhhc093blByb3BlcnR5KHRoaXMuYnV0dG9uU2l6ZSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIExFR0FDWV9DTEFTU19NQVBbdGhpcy5idXR0b25TaXplXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiQlVUVE9OX1NJWkVTIiwiTEVHQUNZX0NMQVNTX01BUCIsIkJ1dHRvblNpemVQcm9wZXJ0eU1peGluIiwicHJvcHMiLCJidXR0b25TaXplIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJ2YWxpZGF0b3IiLCJ2YWx1ZSIsIk9iamVjdCIsImtleXMiLCJpbmRleE9mIiwiY29tcHV0ZWQiLCJidXR0b25TaXplQ2xhc3MiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5314\n')},2683:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": function() { return /* binding */ AddressInputGroup; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=template&id=3aa29a85&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "row"\n  }, [_vm.value.showPickupStation && _vm.selectedCountry.isoCode2 === "DE" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "delivery_address.name1") && !_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name1",\n      "data-validate": "text"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-testing": "packing-station-de-company"\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.title"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-testing": "packing-station-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "packing-station-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _vm.isParcelOrOfficeAvailable ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12"\n  }, [_c("input", {\n    attrs: {\n      type: "checkbox",\n      name: "togglePickup",\n      id: "showPickup" + _vm._uid\n    },\n    domProps: {\n      checked: _vm.value.showPickupStation\n    },\n    on: {\n      change: function change($event) {\n        return _vm.togglePickupStation($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "showPickup" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressToPickupStation")))])])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "",\n      "data-model": "address1"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "address1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      change: function change($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }, [_vm.isParcelBoxAvailable ? _c("option", {\n    attrs: {\n      value: "PACKSTATION"\n    },\n    domProps: {\n      selected: _vm.isPickupStation\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPackingStation")))]) : _vm._e(), _vm._v(" "), _vm.isPostOfficeAvailable ? _c("option", {\n    attrs: {\n      value: "POSTFILIALE"\n    },\n    domProps: {\n      selected: _vm.isPostOffice\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostOffice")))]) : _vm._e()]), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "\'address1\' + _uid"\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPickupLocation")))])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _vm.isPickupStation ? _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPackingStationNumber")) + "*")]) : _vm._e(), _vm._v(" "), _vm.isPostOffice ? _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostOfficeNumber")) + "*")]) : _vm._e()])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postNumber"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "postnumber",\n      id: "postnumber" + _vm._uid,\n      "data-testing": "packing-station-de-postnumber"\n    },\n    domProps: {\n      value: _vm.value.postNumber\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postNumber", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "postnumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPostNummer")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "packing-station-de-postalcode"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "packing-station-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.email"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "packing-station-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "delivery_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "DE" && _vm.addressType === "1" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "billing_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields,\n      "default-salutation": _vm.defaultSalutation\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "billing_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "billing_address.name1") && !_vm.isInOptionalFields("de", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-company"\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("de", "billing_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("de", "billing_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("de", "billing_address.vatNumber") || !_vm.isInOptionalFields("de", "billing_address.salutation") && _vm.isInOptionalFields("de", "billing_address.name1") && _vm.isInOptionalFields("de", "billing_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "billing-address-de-name-inputs"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.title"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-title"\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "billing_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "billing_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "billing_address"),\n      expression: "areNameFieldsRequired(\'de\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "billing-address-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "billing_address"),\n      expression: "areNameFieldsRequired(\'de\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "billing-address-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "billing_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "billing_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.birthday") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:date",\n      value: _vm.isInRequiredFields("de", "billing_address.birthday") || !!_vm.value.birthday && !!_vm.value.birthday.length,\n      expression: "isInRequiredFields(\'de\', \'billing_address.birthday\') || !!value.birthday && !!value.birthday.length",\n      arg: "date"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "birthday"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "date",\n      min: "1901-12-14",\n      max: new Date().toISOString().split("T")[0],\n      name: "birthday",\n      placeholder: _vm.$translate("Ceres::Template.addressBirthdatePlaceholder"),\n      id: "txtBirthdate" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.birthday\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("birthday", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtBirthdate" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressBirthdate", "de", "billing_address.birthday")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "billing_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "billing-address-de-street-inputs"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid,\n      "data-testing": "billing-address-de-street"\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressStreet")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid,\n      "data-testing": "billing-address-de-house-number"\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressNumber")) + "*")])])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.address3"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress1", "de", "billing_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "billing_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "billing_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "billing-address-de-zip"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "billing-address-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "billing_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "billing_address.email"),\n      expression: "isInRequiredFields(\'de\', \'billing_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "billing-address-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "billing_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "GB" && _vm.addressType === "1" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("gb", "billing_address.salutation"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "gb", "billing_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("gb", "billing_address.name1") && !_vm.isInOptionalFields("gb", "billing_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("gb", "billing_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("gb", "billing_address.vatNumber") || !_vm.isInOptionalFields("gb", "billing_address.salutation") && _vm.isInOptionalFields("gb", "billing_address.name1") && _vm.isInOptionalFields("gb", "billing_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.title"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "gb", "billing_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("gb", "billing_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "billing_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-model": "name2",\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("gb", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "billing_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'billing_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-model": "name3"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("gb", "billing_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.contactPerson"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "gb", "billing_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.name4") ? _c("div", {\n    staticClass: "col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.name4"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressGBNameAffix", "gb", "billing_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.birthday") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:date",\n      value: _vm.isInRequiredFields("gb", "billing_address.birthday") || !!_vm.value.birthday && !!_vm.value.birthday.length,\n      expression: "isInRequiredFields(\'gb\', \'billing_address.birthday\') || !!value.birthday && !!value.birthday.length",\n      arg: "date"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "birthday"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "date",\n      min: "1901-12-14",\n      max: new Date().toISOString().split("T")[0],\n      name: "birthday",\n      placeholder: _vm.$translate("Ceres::Template.addressBirthdatePlaceholder"),\n      id: "txtBirthdate" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.birthday\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("birthday", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtBirthdate" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressBirthdate", "gb", "billing_address.birthday")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.phoneNumber"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "gb", "billing_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12",\n    attrs: {\n      "data-testing": "invoice-addresses-street-select-gb"\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressENAddressLine1")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.address2") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address2"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address2\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine2", "gb", "billing_address.address2")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address3"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine3", "gb", "billing_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "billing_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.address4"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine4", "gb", "billing_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "billing_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "billing_address.email"),\n      expression: "isInRequiredFields(\'gb\', \'billing_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "billing-address-gb-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "gb", "billing_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "DE" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("de", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "de", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("de", "delivery_address.name1") && !_vm.isInOptionalFields("de", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("de", "delivery_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("de", "delivery_address.vatNumber") || !_vm.isInOptionalFields("de", "delivery_address.salutation") && _vm.isInOptionalFields("de", "delivery_address.name1") && _vm.isInOptionalFields("de", "delivery_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.title"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "de", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("de", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "delivery-address-de-firstname"\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("de", "delivery_address"),\n      expression: "areNameFieldsRequired(\'de\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid,\n      "data-testing": "delivery-address-de-lastname"\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("de", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "de", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalName", "de", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "de", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _vm.isParcelOrOfficeAvailable ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12"\n  }, [_c("input", {\n    attrs: {\n      type: "checkbox",\n      name: "togglePickup",\n      id: "showPickup" + _vm._uid\n    },\n    domProps: {\n      checked: _vm.value.showPickupStation\n    },\n    on: {\n      change: function change($event) {\n        return _vm.togglePickupStation($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "showPickup" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressToPickupStation")))])])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid,\n      "data-testing": "delivery-address-de-street"\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressStreet")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid,\n      "data-testing": "delivery-address-de-housenumber"\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressNumber")) + "*")])])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address3"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress1", "de", "delivery_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("de", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateAddress",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressAdditionalAddress2", "de", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid,\n      "data-testing": "delivery-address-de-zip"\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid,\n      "data-testing": "delivery-address-de-town"\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("de", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("de", "delivery_address.email"),\n      expression: "isInRequiredFields(\'de\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "delivery-address-de-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "de", "delivery_address.email")))])])]) : _vm._e()])])] : _vm.localeToShow == "GB" && _vm.addressType === "2" ? [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("gb", "delivery_address.salutation"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.salutation\')"\n    }],\n    staticClass: "input-unit"\n  }, [_c("salutation-select", {\n    attrs: {\n      id: "txtSalutation" + _vm._uid,\n      "address-type": _vm.addressType,\n      "address-data": _vm.value,\n      "enabled-address-fields": _vm.optionalAddressFields\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent($event.field, $event.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtSalutation" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressSalutation", "gb", "delivery_address.salutation")) + "\\n                        ")])], 1)]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.value.gender === "company" || _vm.isInOptionalFields("gb", "delivery_address.name1") && !_vm.isInOptionalFields("gb", "delivery_address.salutation") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "name1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "company",\n      id: "txtCompany" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtCompany" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressCompany")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("vat-id", {\n    attrs: {\n      "is-required": _vm.isInRequiredFields("gb", "delivery_address.vatNumber"),\n      "selected-country-id": _vm.value.countryId,\n      value: _vm.value.vatNumber || "",\n      "show-input": _vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.value.gender === "company" && _vm.isInOptionalFields("gb", "delivery_address.vatNumber") || !_vm.isInOptionalFields("gb", "delivery_address.salutation") && _vm.isInOptionalFields("gb", "delivery_address.name1") && _vm.isInOptionalFields("gb", "delivery_address.vatNumber")\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("vatNumber", $event);\n      }\n    }\n  })], 1)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.title") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.title"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.title\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "title"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "title",\n      id: "txtTitle" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.title\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("title", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTitle" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTitle", "gb", "delivery_address.title")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.areNameFieldsShown("gb", "delivery_address") ? [_c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "delivery_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "firstName",\n      id: "txtFirstName" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.value.name2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtFirstName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressFirstName"))), _vm.areNameFieldsRequired("gb", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.areNameFieldsRequired("gb", "delivery_address"),\n      expression: "areNameFieldsRequired(\'gb\', \'delivery_address\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtLastName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtLastName" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressLastName"))), _vm.areNameFieldsRequired("gb", "delivery_address") ? [_vm._v("*")] : _vm._e()], 2)])])] : _c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.contactPerson"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.contactPerson\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "contactPerson"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "lastName",\n      id: "txtContactPerson" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.contactPerson\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("contactPerson", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtContactPerson" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressContactPerson", "gb", "delivery_address.contactPerson")) + "\\n                        ")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.name4") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.name4"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.name4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "name4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "decorateName",\n      id: "txtAdditionalName" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.name4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("name4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtAdditionalName" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressGBNameAffix", "gb", "delivery_address.name4")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.phoneNumber") ? _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.phoneNumber"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.phoneNumber\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "telephone"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "telephone",\n      id: "txtTelephone" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.telephone\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("telephone", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtTelephone" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressTelephone", "gb", "delivery_address.phoneNumber")) + "\\n                        ")])])]) : _vm._e()], 2)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-sm-8"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "address1"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "street",\n      autocomplete: "address-line1",\n      id: "txtStreet" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address1\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address1", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtStreet" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressENAddressLine1")) + "*")])])]), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.address2") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address2"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address2\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address2"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "housenumber",\n      autocomplete: "address-line2",\n      id: "txtNumber" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address2\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address2", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine2", "gb", "delivery_address.address2")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.address3") ? _c("div", {\n    staticClass: "col-12 col-sm-6"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address3"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address3\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address3"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress0" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address3\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address3", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress0" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine3", "gb", "delivery_address.address3")) + "\\n                        ")])])]) : _vm._e(), _vm._v(" "), _vm.isInOptionalFields("gb", "delivery_address.address4") ? _c("div", {\n    staticClass: "col-12 col-sm-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.address4"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.address4\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "address4"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "buildingName",\n      id: "decorateAddress1" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.address4\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("address4", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "decorateAddress1" + _vm._uid\n    }\n  }, [_vm._v("\\n                            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressENAddressLine4", "gb", "delivery_address.address4")) + "\\n                        ")])])]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "town"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "town",\n      id: "txtPlace" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.town\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("town", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtPlace" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPlace")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "text",\n      "data-model": "postalCode"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "text",\n      name: "zip",\n      id: "txtZip" + _vm._uid\n    },\n    domProps: {\n      value: _vm.value.postalCode\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("postalCode", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtZip" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressZip")) + "*")])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-sm-4",\n    attrs: {\n      "data-testing": "address-country-select"\n    }\n  }, [_c("country-select", {\n    attrs: {\n      "selected-country-id": _vm.value.countryId,\n      "selected-state-id": _vm.value.stateId,\n      "address-type": _vm.addressType,\n      "optional-address-fields": _vm.optionalAddressFields,\n      "required-address-fields": _vm.requiredAddressFields\n    },\n    on: {\n      "country-changed": function countryChanged($event) {\n        return _vm.onSelectedCountryChanged($event);\n      },\n      "state-changed": function stateChanged($event) {\n        return _vm.emitInputEvent("stateId", $event);\n      }\n    }\n  })], 1), _vm._v(" "), _vm._t("custom-address-fields"), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("hr", {\n    staticClass: "mt-0"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "row"\n  }, [_vm.isInOptionalFields("gb", "delivery_address.email") ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isInRequiredFields("gb", "delivery_address.email"),\n      expression: "isInRequiredFields(\'gb\', \'delivery_address.email\')",\n      arg: "text"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "email"\n    }\n  }, [_c("input", {\n    attrs: {\n      type: "mail",\n      name: "email",\n      id: "email" + _vm._uid,\n      "data-testing": "delivery-address-gb-email-input"\n    },\n    domProps: {\n      value: _vm.value.email\n    },\n    on: {\n      input: function input($event) {\n        return _vm.emitInputEvent("email", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.addressMail", "gb", "delivery_address.email")))])])]) : _vm._e()])])] : _vm._e()], 2);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=template&id=3aa29a85&\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=template&id=7efc2198&\nvar SalutationSelectvue_type_template_id_7efc2198_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      "data-testing": "salutation-select",\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.addressData.gender\n    },\n    on: {\n      change: function change($event) {\n        return _vm.emitInputEvent($event.target.value);\n      }\n    }\n  }, _vm._l(_vm.currentSalutation, function (salutation, index) {\n    return _c("option", {\n      key: index,\n      domProps: {\n        value: salutation.key,\n        selected: _vm.addressData.gender === salutation.key && _vm.checkGenderCompany(salutation.key)\n      }\n    }, [_vm._v("\\n        " + _vm._s(salutation.name) + "\\n    ")]);\n  }), 0);\n};\nvar SalutationSelectvue_type_template_id_7efc2198_staticRenderFns = [];\nSalutationSelectvue_type_template_id_7efc2198_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=template&id=7efc2198&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var SalutationSelectvue_type_script_lang_js_ = ({\n  name: "salutation-select",\n  props: {\n    addressData: {\n      type: Object,\n      required: true\n    },\n    addressType: {\n      type: [Number, String],\n      default: 1\n    },\n    enabledAddressFields: {\n      type: Object,\n      default: function _default() {\n        return [];\n      }\n    },\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  data: function data() {\n    return {\n      salutations: [{\n        key: "please select",\n        name: "addressSalutationPleaseSelect"\n      }, {\n        key: "male",\n        name: "addressSalutationMale"\n      }, {\n        key: "female",\n        name: "addressSalutationFemale"\n      }, {\n        key: "diverse",\n        name: "addressSalutationDiverse"\n      }, {\n        key: "company",\n        name: "addressSalutationCompany"\n      }]\n    };\n  },\n  computed: {\n    currentSalutation: function currentSalutation() {\n      var _this = this;\n      var countryId = parseInt(this.addressData.countryId) || 1;\n      var addressKey = parseInt(this.addressType) === 1 ? "billing_address" : "delivery_address";\n      var countryKey = countryId === 12 ? "gb" : "de";\n      var salutations = this.salutations.map(function (salutation) {\n        return {\n          key: salutation.key,\n          name: _this.$translate("Ceres::Template." + salutation.name)\n        };\n      });\n      if (this.enabledAddressFields[countryKey].includes("".concat(addressKey, ".name1")) || this.enabledAddressFields[countryKey].includes("".concat(addressKey, ".salutation"))) {\n        return salutations;\n      }\n      return salutations.filter(function (salutation) {\n        return salutation.key !== "company" && salutation.key !== "please select";\n      });\n    }\n  },\n  /**\n   * Get the shipping countries\n   */\n  created: function created() {\n    this.$options.template = this.template;\n    var selectedSalutation = this.defaultSalutation;\n    if ((0,utils/* isNullOrUndefined */.le)(selectedSalutation)) {\n      selectedSalutation = this.currentSalutation[0].key;\n    }\n    this.emitInputEvent(selectedSalutation);\n  },\n  methods: {\n    emitInputEvent: function emitInputEvent(value) {\n      var isNewGenderPersonal = this.getIsGenderPersonal(value);\n      var isOldGenderPersonal = this.getIsGenderPersonal(this.addressData.gender);\n      this.$emit("input", {\n        field: "gender",\n        value: value\n      });\n\n      // just reset the input fields, when switching the gender between a personal one and company\n      if (isNewGenderPersonal !== isOldGenderPersonal) {\n        this.$emit("input", {\n          field: "name1",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "name2",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "name3",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "vatNumber",\n          value: ""\n        });\n        this.$emit("input", {\n          field: "contactPerson",\n          value: ""\n        });\n      }\n    },\n    checkGenderCompany: function checkGenderCompany(gender) {\n      if (gender === "company") {\n        return this.addressData.name1 !== null || this.addressData.name1 !== "";\n      }\n      return true;\n    },\n    getIsGenderPersonal: function getIsGenderPersonal(gender) {\n      return ["male", "female", "diverse"].includes(gender);\n    }\n  },\n  watch: {\n    currentSalutation: function currentSalutation(newVal, oldVal) {\n      if (newVal !== oldVal) {\n        var selectedSalutation = this.addressData.gender;\n\n        // cleanse the current selected salutation, if it\'s not longer included in the choice\n        if (!newVal.map(function (salutation) {\n          return salutation.key;\n        }).includes(selectedSalutation)) {\n          this.emitInputEvent(newVal[0].key);\n        }\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_SalutationSelectvue_type_script_lang_js_ = (SalutationSelectvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/SalutationSelect.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  customer_SalutationSelectvue_type_script_lang_js_,\n  SalutationSelectvue_type_template_id_7efc2198_render,\n  SalutationSelectvue_type_template_id_7efc2198_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var SalutationSelect = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=template&id=267c911a&\nvar CountrySelectvue_type_template_id_267c911a_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "",\n      "data-model": "countryId"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "country-id-select" + _vm._uid\n    },\n    domProps: {\n      value: _vm.selectedCountryId\n    },\n    on: {\n      change: function change($event) {\n        return _vm.countryChanged($event.target.value);\n      }\n    }\n  }, _vm._l(_vm.countryList, function (country) {\n    return _c("option", {\n      key: country.id,\n      domProps: {\n        value: country.id,\n        selected: country.id === _vm.selectedCountryId\n      }\n    }, [_vm._v("\\n                " + _vm._s(country.currLangName) + "\\n            ")]);\n  }), 0), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "country-id-select" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.headerCountry")))])]), _vm._v(" "), _vm.isInOptionalFields("stateId") ? [_vm.stateList && _vm.stateList.length > 0 ? _c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate",\n      value: _vm.isInRequiredFields("stateId"),\n      expression: "isInRequiredFields(\'stateId\')"\n    }],\n    staticClass: "input-unit",\n    attrs: {\n      "data-model": "stateId"\n    }\n  }, [_c("select", {\n    staticClass: "custom-select",\n    attrs: {\n      id: "state-id-select" + _vm._uid\n    },\n    domProps: {\n      value: _vm.selectedStateId\n    },\n    on: {\n      change: function change($event) {\n        return _vm.stateChanged($event.target.value);\n      }\n    }\n  }, [_c("option", {\n    domProps: {\n      selected: _vm.selectedStateId === null\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.addressPleaseSelect")))]), _vm._v(" "), _vm._l(_vm.stateList, function (state) {\n    return _c("option", {\n      key: state.id,\n      domProps: {\n        value: state.id,\n        selected: state.id === _vm.selectedStateId\n      }\n    }, [_vm._v("\\n                    " + _vm._s(state.name) + "\\n                ")]);\n  })], 2), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "state-id-select" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.transformTranslation("Ceres::Template.headerState", "stateId")))])]) : _vm._e()] : _vm._e()], 2);\n};\nvar CountrySelectvue_type_template_id_267c911a_staticRenderFns = [];\nCountrySelectvue_type_template_id_267c911a_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=template&id=267c911a&\n\n// EXTERNAL MODULE: ./resources/js/src/app/services/TranslationService.js\nvar TranslationService = __webpack_require__(6698);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n/* harmony default export */ var CountrySelectvue_type_script_lang_js_ = ({\n  name: "country-select",\n  props: {\n    selectedCountryId: Number,\n    selectedStateId: Number,\n    addressType: {\n      type: String,\n      required: true\n    },\n    optionalAddressFields: {\n      type: Object,\n      default: function _default() {}\n    },\n    requiredAddressFields: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      stateList: [],\n      selectedCountry: {}\n    };\n  },\n  computed: _objectSpread({\n    addressKeyPrefix: function addressKeyPrefix() {\n      return this.addressType === "1" ? "billing_address." : "delivery_address.";\n    },\n    optionalFields: function optionalFields() {\n      var iso = this.selectedCountry.isoCode2.toLowerCase();\n      if ((0,utils/* isNullOrUndefined */.le)(this.optionalAddressFields[iso])) {\n        return this.optionalAddressFields.de;\n      }\n      return this.optionalAddressFields[iso];\n    },\n    requiredFields: function requiredFields() {\n      var iso = this.selectedCountry.isoCode2.toLowerCase();\n      if ((0,utils/* isNullOrUndefined */.le)(this.requiredAddressFields[iso])) {\n        return this.requiredAddressFields.de;\n      }\n      return this.requiredAddressFields[iso];\n    },\n    countryList: function countryList() {\n      // if it\'s for a billing address we add every eu country to the list due to legal obligations\n      if (this.addressType === "1") {\n        var activeCountries = this.$store.state.localization.shippingCountries;\n        var euCountries = this.$store.state.localization.euShippingCountries;\n        var allCountries = [].concat(_toConsumableArray(activeCountries), _toConsumableArray(euCountries));\n        var combinedCountries = {};\n        allCountries.forEach(function (country) {\n          combinedCountries[country.id] = country;\n        });\n        combinedCountries = Object.values(combinedCountries);\n        combinedCountries = combinedCountries.sort(function (a, b) {\n          return a.currLangName.localeCompare(b.currLangName);\n        });\n        return combinedCountries;\n      }\n      return this.$store.state.localization.shippingCountries;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    shippingCountryId: function shippingCountryId(state) {\n      return state.localization.shippingCountryId;\n    }\n  })),\n  /**\n   * Get the shipping countries\n   */\n  created: function created() {\n    this.updateSelectedCountry();\n  },\n  methods: {\n    /**\n     * Method to fire when the country has changed\n     */\n    countryChanged: function countryChanged(value) {\n      var _this$getCountryById;\n      this.$emit("country-changed", (_this$getCountryById = this.getCountryById(parseInt(value))) !== null && _this$getCountryById !== void 0 ? _this$getCountryById : this.countryList[0]);\n      this.$emit("state-changed", null);\n    },\n    /**\n     * @param {*} value\n     */\n    stateChanged: function stateChanged(value) {\n      this.$emit("state-changed", parseInt(value));\n    },\n    /**\n     * @param countryId\n     * @returns {*}\n     */\n    getCountryById: function getCountryById(countryId) {\n      return this.countryList.find(function (country) {\n        if (country.id === countryId) {\n          return country;\n        }\n        return null;\n      });\n    },\n    updateSelectedCountry: function updateSelectedCountry() {\n      var _this$getCountryById2;\n      var countryId = this.selectedCountryId || this.shippingCountryId;\n      this.selectedCountry = (_this$getCountryById2 = this.getCountryById(countryId)) !== null && _this$getCountryById2 !== void 0 ? _this$getCountryById2 : this.countryList[0];\n      if (this.selectedCountry) {\n        this.stateList = this.selectedCountry.states || [];\n      }\n      this.countryChanged(countryId);\n    },\n    isInOptionalFields: function isInOptionalFields(key) {\n      return this.optionalFields.includes(this.addressKeyPrefix + key);\n    },\n    isInRequiredFields: function isInRequiredFields(key) {\n      return this.requiredFields.includes(this.addressKeyPrefix + key);\n    },\n    transformTranslation: function transformTranslation(translationKey, addressKey) {\n      var translation = TranslationService/* default.translate */.Z.translate(translationKey);\n      var isRequired = this.isInRequiredFields(addressKey);\n      return translation + (isRequired ? "*" : "");\n    }\n  },\n  watch: {\n    selectedCountryId: function selectedCountryId() {\n      this.updateSelectedCountry();\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_CountrySelectvue_type_script_lang_js_ = (CountrySelectvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/CountrySelect.vue\n\n\n\n\n\n/* normalize component */\n;\nvar CountrySelect_component = (0,componentNormalizer/* default */.Z)(\n  customer_CountrySelectvue_type_script_lang_js_,\n  CountrySelectvue_type_template_id_267c911a_render,\n  CountrySelectvue_type_template_id_267c911a_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var CountrySelect = (CountrySelect_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/VatId.vue?vue&type=template&id=7888d220&\nvar VatIdvue_type_template_id_7888d220_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.showInput ? _c("div", {\n    staticClass: "input-group flex-nowrap",\n    attrs: {\n      "data-model": "vatNumber"\n    }\n  }, [_vm.isEU ? _c("div", {\n    staticClass: "input-unit w-auto input-group-prepend"\n  }, [_vm.vatCodes.length === 1 ? _c("span", {\n    staticClass: "input-group-text h-100 border-0",\n    attrs: {\n      id: "basic-addon1"\n    }\n  }, [_vm._v(_vm._s(_vm.vatCodes[0]))]) : _vm._e(), _vm._v(" "), _vm.vatCodes.length > 1 ? _c("select", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.vatPrefix,\n      expression: "vatPrefix"\n    }],\n    staticClass: "custom-select",\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = "_value" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.vatPrefix = $event.target.multiple ? $$selectedVal : $$selectedVal[0];\n      }\n    }\n  }, _vm._l(_vm.vatCodes, function (vatCode, index) {\n    return _c("option", {\n      key: index,\n      domProps: {\n        value: vatCode\n      }\n    }, [_vm._v(_vm._s(vatCode))]);\n  }), 0) : _vm._e()]) : _vm._e(), _vm._v(" "), _c("div", {\n    directives: [{\n      name: "validate",\n      rawName: "v-validate:text",\n      value: _vm.isRequired,\n      expression: "isRequired",\n      arg: "text"\n    }],\n    staticClass: "input-unit flex-fill w-auto"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model.trim",\n      value: _vm.vatNumber,\n      expression: "vatNumber",\n      modifiers: {\n        trim: true\n      }\n    }],\n    attrs: {\n      "aria-describedby": "basic-addon1",\n      type: "text",\n      name: "vatNumber",\n      id: "txtVatNumber" + _vm._uid,\n      "data-autofocus": "",\n      "data-testing": "vat-id"\n    },\n    domProps: {\n      value: _vm.vatNumber\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.vatNumber = $event.target.value.trim();\n      },\n      blur: function blur($event) {\n        return _vm.$forceUpdate();\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "txtVatNumber" + _vm._uid\n    }\n  }, [_vm._v("\\n            " + _vm._s(_vm.transformTranslation("Ceres::Template.addressVatNumber", "de", "billing_address.vatNumber")) + "\\n        ")])])]) : _vm._e();\n};\nvar VatIdvue_type_template_id_7888d220_staticRenderFns = [];\nVatIdvue_type_template_id_7888d220_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue?vue&type=template&id=7888d220&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/VatId.vue?vue&type=script&lang=js&\n/* harmony default export */ var VatIdvue_type_script_lang_js_ = ({\n  name: "vat-id",\n  props: {\n    selectedCountryId: Number,\n    value: String,\n    isRequired: Boolean,\n    showInput: Boolean\n  },\n  data: function data() {\n    return {\n      vatNumber: "",\n      vatPrefix: "",\n      isPrefixValid: false\n    };\n  },\n  computed: {\n    vatCodes: function vatCodes() {\n      var _this$selectedCountry, _this$selectedCountry2, _this$selectedCountry3;\n      this.vatPrefix = (_this$selectedCountry = this.selectedCountry) !== null && _this$selectedCountry !== void 0 && _this$selectedCountry.vatCodes && (_this$selectedCountry2 = this.selectedCountry) !== null && _this$selectedCountry2 !== void 0 && _this$selectedCountry2.vatCodes[0] ? this.selectedCountry.vatCodes[0] : "";\n      return (_this$selectedCountry3 = this.selectedCountry) !== null && _this$selectedCountry3 !== void 0 && _this$selectedCountry3.vatCodes ? this.selectedCountry.vatCodes : [];\n    },\n    isEU: function isEU() {\n      var _this$vatCodes;\n      return ((_this$vatCodes = this.vatCodes) === null || _this$vatCodes === void 0 ? void 0 : _this$vatCodes.length) > 0;\n    },\n    selectedCountry: function selectedCountry() {\n      var _this = this;\n      return this.$store.state.localization.shippingCountries.find(function (country) {\n        return country.id === _this.selectedCountryId;\n      });\n    }\n  },\n  watch: {\n    value: function value(newValue) {\n      this.setValues(newValue);\n    },\n    showInput: function showInput() {\n      if (!this.showInput) {\n        this.deleteValue();\n      }\n    },\n    vatNumber: function vatNumber() {\n      this.emitChange();\n    },\n    vatPrefix: function vatPrefix() {\n      this.emitChange();\n    }\n  },\n  created: function created() {\n    this.setValues(this.value);\n  },\n  methods: {\n    transformTranslation: function transformTranslation(translationKey) {\n      var translation = this.$translate(translationKey);\n      return translation + (this.isRequired ? "*" : "");\n    },\n    deleteValue: function deleteValue() {\n      var _this$selectedCountry4, _this$selectedCountry5;\n      this.vatNumber = "";\n      this.vatPrefix = (_this$selectedCountry4 = this.selectedCountry) !== null && _this$selectedCountry4 !== void 0 && _this$selectedCountry4.vatCodes && (_this$selectedCountry5 = this.selectedCountry) !== null && _this$selectedCountry5 !== void 0 && _this$selectedCountry5.vatCodes[0] ? this.selectedCountry.vatCodes[0] : "";\n    },\n    emitChange: function emitChange() {\n      var value = !!this.vatNumber ? this.vatPrefix + this.vatNumber : "";\n      this.$emit(\'input\', value);\n    },\n    setValues: function setValues(value) {\n      var vatPrefix = this.getVatPrefix(value);\n      this.isPrefixValid = !!vatPrefix;\n      if (this.isPrefixValid) {\n        this.vatPrefix = vatPrefix;\n        this.vatNumber = value.slice(vatPrefix.length);\n      } else {\n        this.vatNumber = value;\n      }\n    },\n    /**\n     * @param value\n     * @returns {string} - Returns the best matching vat code\n     */\n    getVatPrefix: function getVatPrefix(value) {\n      var _this$vatCodes2;\n      var result = "";\n      (_this$vatCodes2 = this.vatCodes) === null || _this$vatCodes2 === void 0 ? void 0 : _this$vatCodes2.forEach(function (vatCode) {\n        if (value.startsWith(vatCode) && vatCode.length > result.length) {\n          result = vatCode;\n        }\n      });\n      return result;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_VatIdvue_type_script_lang_js_ = (VatIdvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/VatId.vue\n\n\n\n\n\n/* normalize component */\n;\nvar VatId_component = (0,componentNormalizer/* default */.Z)(\n  customer_VatIdvue_type_script_lang_js_,\n  VatIdvue_type_template_id_7888d220_render,\n  VatIdvue_type_template_id_7888d220_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var VatId = (VatId_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=script&lang=js&\nfunction AddressInputGroupvue_type_script_lang_js_typeof(obj) { "@babel/helpers - typeof"; return AddressInputGroupvue_type_script_lang_js_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, AddressInputGroupvue_type_script_lang_js_typeof(obj); }\nfunction AddressInputGroupvue_type_script_lang_js_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction AddressInputGroupvue_type_script_lang_js_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? AddressInputGroupvue_type_script_lang_js_ownKeys(Object(source), !0).forEach(function (key) { AddressInputGroupvue_type_script_lang_js_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : AddressInputGroupvue_type_script_lang_js_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction AddressInputGroupvue_type_script_lang_js_defineProperty(obj, key, value) { key = AddressInputGroupvue_type_script_lang_js_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction AddressInputGroupvue_type_script_lang_js_toPropertyKey(arg) { var key = AddressInputGroupvue_type_script_lang_js_toPrimitive(arg, "string"); return AddressInputGroupvue_type_script_lang_js_typeof(key) === "symbol" ? key : String(key); }\nfunction AddressInputGroupvue_type_script_lang_js_toPrimitive(input, hint) { if (AddressInputGroupvue_type_script_lang_js_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (AddressInputGroupvue_type_script_lang_js_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/* harmony default export */ var AddressInputGroupvue_type_script_lang_js_ = ({\n  name: "address-input-group",\n  components: {\n    SalutationSelect: SalutationSelect,\n    CountrySelect: CountrySelect,\n    VatId: VatId\n  },\n  props: {\n    defaultCountry: {\n      type: String,\n      default: "DE"\n    },\n    addressType: String,\n    modalType: String,\n    template: String,\n    value: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    optionalAddressFields: {\n      type: Object,\n      default: function _default() {\n        return {\n          de: [],\n          uk: []\n        };\n      }\n    },\n    requiredAddressFields: {\n      type: Object,\n      default: function _default() {\n        return {\n          de: [],\n          uk: []\n        };\n      }\n    },\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  computed: AddressInputGroupvue_type_script_lang_js_objectSpread({\n    isMyAccount: function isMyAccount() {\n      return App.templateType === "my-account";\n    },\n    isPickupStation: function isPickupStation() {\n      return this.value && this.value.address1 === "PACKSTATION" && this.isParcelBoxAvailable;\n    },\n    isPostOffice: function isPostOffice() {\n      return this.value && this.value.address1 === "POSTFILIALE" && this.isPostOfficeAvailable;\n    },\n    isParcelOrOfficeAvailable: function isParcelOrOfficeAvailable() {\n      return (this.isParcelBoxAvailable || this.isPostOfficeAvailable) && this.selectedCountry && this.selectedCountry.isoCode2 === "DE" && this.addressType === "2";\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    isParcelBoxAvailable: function isParcelBoxAvailable(state) {\n      return state.checkout.shipping.isParcelBoxAvailable;\n    },\n    isPostOfficeAvailable: function isPostOfficeAvailable(state) {\n      return state.checkout.shipping.isPostOfficeAvailable;\n    }\n  })),\n  data: function data() {\n    return {\n      stateList: [],\n      countryLocaleList: ["DE", "GB"],\n      localeToShow: this.defaultCountry,\n      selectedCountry: null\n    };\n  },\n  methods: {\n    /**\n     * Update the address input group to show.\n     * @param shippingCountry\n     */\n    onSelectedCountryChanged: function onSelectedCountryChanged(shippingCountry) {\n      this.selectedCountry = shippingCountry;\n      if (shippingCountry && this.countryLocaleList.indexOf(shippingCountry.isoCode2) >= 0) {\n        this.localeToShow = shippingCountry.isoCode2;\n      } else {\n        this.localeToShow = this.defaultCountry;\n      }\n      this.emitInputEvent("countryId", shippingCountry.id);\n      if (this.isPickupStation || this.isPostOffice) {\n        this.togglePickupStation(false);\n      }\n    },\n    togglePickupStation: function togglePickupStation(showPickupStation) {\n      var emitInputs = {\n        address1: "",\n        address2: "",\n        address3: "",\n        showPickupStation: showPickupStation\n      };\n      if (showPickupStation) {\n        emitInputs.address1 = this.isParcelBoxAvailable ? "PACKSTATION" : "POSTFILIALE";\n      }\n      for (var input in emitInputs) {\n        this.emitInputEvent(input, emitInputs[input]);\n      }\n    },\n    /**\n     * @param {string} field\n     * @param {number} value\n     */\n    emitInputEvent: function emitInputEvent(field, value) {\n      this.$emit("input", {\n        field: field,\n        value: value\n      });\n    },\n    isInOptionalFields: function isInOptionalFields(locale, key) {\n      return this.optionalAddressFields[locale].includes(key);\n    },\n    isInRequiredFields: function isInRequiredFields(locale, key) {\n      return this.requiredAddressFields && this.requiredAddressFields[locale] && this.requiredAddressFields[locale].includes(key);\n    },\n    transformTranslation: function transformTranslation(translationKey, locale, addressKey) {\n      var translation = this.$translate(translationKey);\n      var isRequired = this.isInRequiredFields(locale, addressKey);\n      return translation + (isRequired ? "*" : "");\n    },\n    areNameFieldsShown: function areNameFieldsShown(locale, keyPrefix) {\n      var isSalutationActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".salutation"));\n      var isContactPersonActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".contactPerson"));\n      var isName1Active = this.isInOptionalFields(locale, "".concat(keyPrefix, ".name1"));\n      var isSelectedSalutationCompany = this.value.gender === "company";\n      var condition1 = isSalutationActive && isContactPersonActive && isSelectedSalutationCompany;\n      var condition2 = !isSalutationActive && isName1Active && isContactPersonActive;\n      return !(condition1 || condition2);\n    },\n    areNameFieldsRequired: function areNameFieldsRequired(locale, keyPrefix) {\n      var isSalutationActive = this.isInOptionalFields(locale, "".concat(keyPrefix, ".salutation"));\n      var isName1Active = this.isInOptionalFields(locale, "".concat(keyPrefix, ".name1"));\n      var isContactPersonRequired = this.isInRequiredFields(locale, "".concat(keyPrefix, ".contactPerson"));\n      var isSelectedSalutationCompany = this.value.gender === "company";\n      var condition1 = isSalutationActive && !isSelectedSalutationCompany;\n      var condition2 = isSalutationActive && isSelectedSalutationCompany && isContactPersonRequired;\n      var condition3 = !isSalutationActive && isName1Active && isContactPersonRequired;\n      var condition4 = !isSalutationActive && !isName1Active;\n      return condition1 || condition2 || condition3 || condition4;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_AddressInputGroupvue_type_script_lang_js_ = (AddressInputGroupvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue\n\n\n\n\n\n/* normalize component */\n;\nvar AddressInputGroup_component = (0,componentNormalizer/* default */.Z)(\n  customer_AddressInputGroupvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var AddressInputGroup = (AddressInputGroup_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2683\n')},2797:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ Registration; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/Registration.vue?vue&type=template&id=b160485e&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("form", {\n    ref: "registrationForm",\n    staticClass: "w-100",\n    attrs: {\n      autocomplete: "on",\n      method: "post"\n    },\n    on: {\n      submit: function submit($event) {\n        $event.preventDefault();\n        return _vm.validateRegistration();\n      }\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-sm-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "mail"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.username,\n      expression: "username"\n    }],\n    attrs: {\n      "data-testing": "mail-register",\n      type: "email",\n      name: "email",\n      autocomplete: "email",\n      id: "email" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.username\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.username = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regEmail")) + "*")])])]), _vm._v(" "), !_vm.guestMode ? _c("div", {\n    staticClass: "col-sm-6"\n  }, [_c("div", {\n    ref: "passwordInput",\n    staticClass: "input-unit",\n    class: {\n      "no-bottom media-xs-d": _vm.modalElement\n    },\n    attrs: {\n      "data-validate": "password"\n    }\n  }, [_c("popper", {\n    ref: "passwordHint",\n    attrs: {\n      trigger: "focus",\n      placement: "bottom"\n    },\n    scopedSlots: _vm._u([{\n      key: "handle",\n      fn: function fn() {\n        return [_c("input", {\n          directives: [{\n            name: "model",\n            rawName: "v-model",\n            value: _vm.password,\n            expression: "password"\n          }],\n          attrs: {\n            "data-testing": "password-register",\n            type: "password",\n            name: "password",\n            autocomplete: "new-password",\n            id: "new-password-" + _vm._uid\n          },\n          domProps: {\n            value: _vm.password\n          },\n          on: {\n            input: function input($event) {\n              if ($event.target.composing) return;\n              _vm.password = $event.target.value;\n            }\n          }\n        })];\n      },\n      proxy: true\n    }, {\n      key: "title",\n      fn: function fn() {\n        return [_c("div", [_vm._v("\\n                            " + _vm._s(_vm.$translate("Ceres::Template.regPasswordHintTitle")) + "\\n                        ")])];\n      },\n      proxy: true\n    }, {\n      key: "content",\n      fn: function fn() {\n        return [_c("ul", {\n          staticClass: "pl-3"\n        }, [_c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintLength")))]), _vm._v(" "), _c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintDigit")))]), _vm._v(" "), _c("li", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPasswordHintChar")))])])];\n      },\n      proxy: true\n    }], null, false, 303377206)\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "new-password-" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regPassword")) + "*")])], 1)]) : _vm._e(), _vm._v(" "), !_vm.guestMode ? _c("div", {\n    staticClass: "col-sm-6 input-unit-group"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    class: {\n      "no-bottom": _vm.modalElement\n    },\n    attrs: {\n      "data-validate": "ref"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.passwordRepeat,\n      expression: "passwordRepeat"\n    }],\n    attrs: {\n      type: "password",\n      name: "password-repeat",\n      autocomplete: "new-password",\n      id: "new-password-repeat-" + _vm._uid,\n      "data-validate-ref": "#new-password-" + _vm._uid,\n      "data-testing": "repeat-password-register"\n    },\n    domProps: {\n      value: _vm.passwordRepeat\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.passwordRepeat = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "new-password-repeat-" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.regRepeatPassword")) + "*")])])]) : _vm._e(), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.honeypot,\n      expression: "honeypot"\n    }],\n    staticClass: "honey",\n    attrs: {\n      type: "text",\n      name: "username",\n      autocomplete: "new-password",\n      tabindex: "-1"\n    },\n    domProps: {\n      value: _vm.honeypot\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.honeypot = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [!_vm.isSimpleRegistration ? _c("address-input-group", {\n    attrs: {\n      template: "#vue-address-input-group",\n      "address-type": "1",\n      value: _vm.billingAddress,\n      "optional-address-fields": _vm.shownFields,\n      "required-address-fields": _vm.requiredFields,\n      "default-salutation": _vm.defaultSalutation\n    },\n    on: {\n      input: function input($event) {\n        return _vm.setAddressDataField($event);\n      }\n    },\n    scopedSlots: _vm._u([{\n      key: "custom-address-fields",\n      fn: function fn() {\n        return [_vm._t("custom-address-fields")];\n      },\n      proxy: true\n    }], null, true)\n  }) : _vm._e()], 1), _vm._v(" "), _vm.enableConfirmingPrivacyPolicy ? _c("div", {\n    staticClass: "col-12"\n  }, [_c("accept-privacy-policy-check", {\n    staticClass: "mt-3 mb-0",\n    attrs: {\n      "show-error": _vm.privacyPolicyShowError\n    },\n    on: {\n      input: function input($event) {\n        return _vm.privacyPolicyValueChanged($event);\n      }\n    },\n    model: {\n      value: _vm.privacyPolicyAccepted,\n      callback: function callback($$v) {\n        _vm.privacyPolicyAccepted = $$v;\n      },\n      expression: "privacyPolicyAccepted"\n    }\n  })], 1) : _vm._e()]), _vm._v(" "), _c("div", {\n    staticClass: "border-top mt-2 text-right"\n  }, [_vm._t("extend-overlay-buttons"), _vm._v(" "), _c("button", {\n    staticClass: "btn btn-appearance btn-primary btn-medium mt-3",\n    class: _vm.buttonSizeClass,\n    attrs: {\n      disabled: _vm.isDisabled,\n      "data-testing": "register-submit"\n    }\n  }, [_vm._v("\\n            " + _vm._s(_vm.$translate("Ceres::Template.regRegister")) + "\\n            "), _c("icon", {\n    staticClass: "default-float",\n    attrs: {\n      icon: "user-plus",\n      loading: _vm.isDisabled\n    }\n  })], 1)], 2), _vm._v(" "), !!_vm.googleRecaptchaApiKey && (_vm.modalShown || !_vm.isSimpleRegistration) ? _c("recaptcha") : _vm._e()], 1);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue?vue&type=template&id=b160485e&\n\n// EXTERNAL MODULE: ./resources/js/src/app/services/ValidationService.js\nvar ValidationService = __webpack_require__(892);\n// EXTERNAL MODULE: ./resources/js/src/app/services/UrlService.js + 1 modules\nvar UrlService = __webpack_require__(6160);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/executeReCaptcha.js\nvar executeReCaptcha = __webpack_require__(6264);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n// EXTERNAL MODULE: ./resources/js/src/app/mixins/buttonSizeProperty.mixin.js\nvar buttonSizeProperty_mixin = __webpack_require__(5314);\n// EXTERNAL MODULE: ./resources/js/src/app/components/customer/AddressInputGroup.vue + 19 modules\nvar AddressInputGroup = __webpack_require__(2683);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ApiService.js\nvar ApiService = __webpack_require__(7653);\n// EXTERNAL MODULE: ./resources/js/src/app/services/NotificationService.js\nvar NotificationService = __webpack_require__(1841);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ModalService.js\nvar ModalService = __webpack_require__(3740);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=template&id=14195a90&\nvar AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "form-check",\n    class: {\n      error: _vm.showError\n    }\n  }, [_c("input", {\n    staticClass: "form-check-input",\n    attrs: {\n      type: "checkbox",\n      id: "privacy-policy-accept" + _vm._uid,\n      "data-testing": "privacy-policy-accept-register"\n    },\n    domProps: {\n      checked: _vm.value\n    },\n    on: {\n      change: function change($event) {\n        return _vm.onValueChanged($event.target.checked);\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "form-check-label",\n    attrs: {\n      for: "privacy-policy-accept" + _vm._uid\n    }\n  }, [_c("span", {\n    domProps: {\n      innerHTML: _vm._s(_vm.labelHtml)\n    }\n  }), _c("sup", [_vm._v("*")])])]);\n};\nvar AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_staticRenderFns = [];\nAcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=template&id=14195a90&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=script&lang=js&\n/* harmony default export */ var AcceptPrivacyPolicyCheckvue_type_script_lang_js_ = ({\n  name: "accept-privacy-policy-check",\n  props: {\n    value: Boolean,\n    showError: Boolean\n  },\n  computed: {\n    labelHtml: function labelHtml() {\n      var contactPrivacyPolicy = this.$translate("Ceres::Template.contactPrivacyPolicy", {\n        "hyphen": "&shy;"\n      });\n      var html = "\\n                \x3c!----\x3e<a href=\\"".concat(App.urls.privacyPolicy, "\\" target=\\"_blank\\" class=\\"text-appearance\\">\\n                    <span>").concat(contactPrivacyPolicy, "</span>\\n                </a>\x3c!----\x3e\\n            ");\n      return this.$translate("Ceres::Template.contactAcceptPrivacyPolicy", {\n        policy: html\n      });\n    }\n  },\n  methods: {\n    onValueChanged: function onValueChanged(value) {\n      this.$emit("input", value);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_AcceptPrivacyPolicyCheckvue_type_script_lang_js_ = (AcceptPrivacyPolicyCheckvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/AcceptPrivacyPolicyCheck.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  customer_AcceptPrivacyPolicyCheckvue_type_script_lang_js_,\n  AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_render,\n  AcceptPrivacyPolicyCheckvue_type_template_id_14195a90_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var AcceptPrivacyPolicyCheck = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/Registration.vue?vue&type=script&lang=js&\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var Registrationvue_type_script_lang_js_ = ({\n  name: "registration",\n  components: {\n    AddressInputGroup: AddressInputGroup/* default */.Z,\n    AcceptPrivacyPolicyCheck: AcceptPrivacyPolicyCheck\n  },\n  mixins: [buttonSizeProperty_mixin/* ButtonSizePropertyMixin */.Z],\n  props: {\n    modalElement: String,\n    guestMode: {\n      type: Boolean,\n      default: false\n    },\n    isSimpleRegistration: {\n      type: Boolean,\n      default: false\n    },\n    template: String,\n    backlink: String,\n    shownFields: Object,\n    requiredFields: Object,\n    defaultSalutation: {\n      type: String,\n      default: App.config.addresses.defaultSalutation\n    }\n  },\n  data: function data() {\n    return {\n      password: "",\n      passwordRepeat: "",\n      username: "",\n      billingAddress: {\n        countryId: null,\n        stateId: null,\n        gender: this.defaultSalutation\n      },\n      isDisabled: false,\n      privacyPolicyAccepted: false,\n      privacyPolicyShowError: false,\n      enableConfirmingPrivacyPolicy: App.config.global.registrationRequirePrivacyPolicyConfirmation,\n      googleRecaptchaApiKey: App.config.global.googleRecaptchaApiKey,\n      modalShown: false,\n      honeypot: ""\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      if (_this.modalElement) {\n        _this.initModalEventListeners();\n      }\n    });\n  },\n  methods: {\n    /**\n     * Validate the registration form\n     */\n    validateRegistration: function validateRegistration() {\n      var _this2 = this;\n      (0,executeReCaptcha/* executeReCaptcha */.j)(this.$refs.registrationForm).then(function (recaptchaToken) {\n        ValidationService["default"].validate(_this2.$refs.registrationForm).done(function () {\n          if (!_this2.enableConfirmingPrivacyPolicy || _this2.privacyPolicyAccepted) {\n            _this2.sendRegistration(recaptchaToken);\n          } else {\n            _this2.privacyPolicyShowError = true;\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.contactAcceptFormPrivacyPolicy", {\n              hyphen: "&shy;"\n            }));\n            _this2.resetRecaptcha();\n          }\n        }).fail(function (invalidFields) {\n          _this2.resetRecaptcha();\n          if (!(0,utils/* isNullOrUndefined */.le)(_this2.$refs.passwordHint) && invalidFields.indexOf(_this2.$refs.passwordInput) >= 0) {\n            _this2.$refs.passwordHint.showPopper();\n          }\n          var invalidFieldNames = _this2.getInvalidFieldNames(invalidFields);\n          if (invalidFieldNames.length > 0) {\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.checkoutCheckAddressFormFields", {\n              fields: invalidFieldNames.join(", ")\n            }));\n          }\n          ValidationService["default"].markInvalidFields(invalidFields, "error");\n          if (_this2.enableConfirmingPrivacyPolicy && !_this2.privacyPolicyAccepted) {\n            _this2.privacyPolicyShowError = true;\n            NotificationService["default"].error(_this2.$translate("Ceres::Template.contactAcceptFormPrivacyPolicy", {\n              hyphen: "&shy;"\n            }));\n          }\n        });\n      });\n    },\n    getInvalidFieldNames: function getInvalidFieldNames() {\n      var invalidFields = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var fieldNames = [];\n      var _iterator = _createForOfIteratorHelper(invalidFields),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var field = _step.value;\n          var fieldName = field.lastElementChild.innerHTML.trim();\n          fieldName = fieldName.slice(-1) === "*" ? fieldName.slice(0, fieldName.length - 1) : fieldName;\n          fieldNames.push(fieldName);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return fieldNames;\n    },\n    /**\n     * Send the registration\n     */\n    sendRegistration: function sendRegistration(recaptchaToken) {\n      var _this3 = this;\n      var userObject = this.getUserObject();\n      userObject.recaptcha = recaptchaToken;\n      this.isDisabled = true;\n      ApiService["default"].post("/rest/io/customer", userObject).done(function (response) {\n        ApiService["default"].setToken(response);\n        if (!response.code) {\n          document.dispatchEvent(new CustomEvent("onSignUpSuccess", {\n            detail: userObject\n          }));\n          NotificationService["default"].success(_this3.$translate("Ceres::Template.regSuccessful")).closeAfter(3000);\n          if (document.getElementById(_this3.modalElement) !== null) {\n            ModalService["default"].findModal(document.getElementById(_this3.modalElement)).hide();\n          }\n          if (_this3.backlink !== null && _this3.backlink) {\n            (0,UrlService/* navigateTo */.T8)(decodeURIComponent(_this3.backlink));\n          } else {\n            location.reload();\n          }\n        } else {\n          NotificationService["default"].error(_this3.$translate("Ceres::Template.regError")).closeAfter(10000);\n          _this3.resetRecaptcha();\n        }\n        _this3.isDisabled = false;\n      }).fail(function (error) {\n        NotificationService["default"].error(error.error).closeAfter(10000);\n        _this3.resetRecaptcha();\n        _this3.isDisabled = false;\n      });\n    },\n    /** \n     * Resets recaptcha v2 to make it capable of executing again.\n    */\n    resetRecaptcha: function resetRecaptcha() {\n      if (App.config.global.googleRecaptchaVersion === 2 && window.grecaptcha) {\n        var recaptchaId = this.$refs.registrationForm.querySelector("[data-recaptcha]");\n        window.grecaptcha.reset(recaptchaId);\n      }\n    },\n    setAddressDataField: function setAddressDataField(_ref) {\n      var field = _ref.field,\n        value = _ref.value;\n      this.billingAddress[field] = value;\n      this.billingAddress = Object.assign({}, this.billingAddress);\n    },\n    /**\n     * Handle the user object which is send to the server\n     * @returns {{contact: {referrerId: number, typeId: number, options: {typeId: {typeId: number, subTypeId: number, value: *, priority: number}}}, honeypot: string}|{contact: {referrerId: number, typeId: number, password: *, options: {typeId: {typeId: number, subTypeId: number, value: *, priority: number}}}, honeypot: string}}\n     */\n    getUserObject: function getUserObject() {\n      var userObject = {\n        contact: {\n          referrerId: 1,\n          typeId: 1,\n          options: {\n            typeId: {\n              typeId: 2,\n              subTypeId: 4,\n              value: this.username,\n              priority: 0\n            }\n          }\n        },\n        honeypot: this.honeypot\n      };\n      if (!this.guestMode) {\n        userObject.contact.password = this.password;\n      }\n      if (!this.isSimpleRegistration) {\n        userObject.billingAddress = this.billingAddress;\n      }\n      return userObject;\n    },\n    privacyPolicyValueChanged: function privacyPolicyValueChanged(value) {\n      this.privacyPolicyAccepted = value;\n      if (value) {\n        this.privacyPolicyShowError = false;\n      }\n    },\n    initModalEventListeners: function initModalEventListeners() {\n      var _this4 = this;\n      var modal = ModalService["default"].findModal(document.getElementById(this.modalElement));\n      if ((0,utils/* isDefined */.$K)(modal)) {\n        modal.on("show.bs.modal", function () {\n          _this4.modalShown = true;\n        });\n        modal.on("hide.bs.modal", function () {\n          _this4.modalShown = false;\n        });\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue?vue&type=script&lang=js&\n /* harmony default export */ var customer_Registrationvue_type_script_lang_js_ = (Registrationvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/Registration.vue\n\n\n\n\n\n/* normalize component */\n;\nvar Registration_component = (0,componentNormalizer/* default */.Z)(\n  customer_Registrationvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Registration = (Registration_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBQztVQUNBQztVQUNBQztVQUNBQztZQUNBRDtjQUNBQTtjQUNBRTtjQUNBekc7Y0FDQTBHO1lBQ0E7VUFDQTtRQUNBO1FBQ0EvRTtNQUNBO01BRUEscUJBQ0E7UUFDQWdFO01BQ0E7TUFFQSxnQ0FDQTtRQUNBQTtNQUNBO01BRUE7SUFDQTtJQUVBcEQscUVBQ0E7TUFDQTtNQUVBLFdBQ0E7UUFDQTtNQUNBO0lBQ0E7SUFFQW9FLDREQUNBO01BQUE7TUFDQTtNQUVBLHdDQUNBO1FBQ0FDLDBCQUNBLFlBQ0E7VUFDQTtRQUNBO1FBRUFBLDBCQUNBLFlBQ0E7VUFDQTtRQUNBO01BQ0E7SUFDQTtFQUNBO0FBQ0EsQ0FBQyxFOztBQ2xYd04sQ0FBQyxrRkFBZSxvQ0FBRyxFQUFDLEM7O0FDQWxKO0FBQzNCO0FBQ0w7OztBQUczRDtBQUNBLENBQXNHO0FBQ3RHLElBQUksc0JBQVMsR0FBRyxzQ0FBVTtBQUMxQixFQUFFLDZDQUFNO0FBQ1IsRUFBRSxNQUFNO0FBQ1IsRUFBRSxlQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpREFBZSxzQkFBUyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9SZWdpc3RyYXRpb24udnVlP2UzZjciLCJ3ZWJwYWNrOi8vQ2VyZXMvLi9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2N1c3RvbWVyL1JlZ2lzdHJhdGlvbi52dWU/MWY1YiIsIndlYnBhY2s6Ly9DZXJlcy8uL3Jlc291cmNlcy9qcy9zcmMvYXBwL2NvbXBvbmVudHMvY3VzdG9tZXIvQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrLnZ1ZT85NGVhIiwid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9BY2NlcHRQcml2YWN5UG9saWN5Q2hlY2sudnVlP2E0YmIiLCJ3ZWJwYWNrOi8vQ2VyZXMvcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9BY2NlcHRQcml2YWN5UG9saWN5Q2hlY2sudnVlPzczMDMiLCJ3ZWJwYWNrOi8vQ2VyZXMvLi9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2N1c3RvbWVyL0FjY2VwdFByaXZhY3lQb2xpY3lDaGVjay52dWU/ZDhjZSIsIndlYnBhY2s6Ly9DZXJlcy8uL3Jlc291cmNlcy9qcy9zcmMvYXBwL2NvbXBvbmVudHMvY3VzdG9tZXIvQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrLnZ1ZT9iNDM2Iiwid2VicGFjazovL0NlcmVzL3Jlc291cmNlcy9qcy9zcmMvYXBwL2NvbXBvbmVudHMvY3VzdG9tZXIvUmVnaXN0cmF0aW9uLnZ1ZT82M2RhIiwid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9SZWdpc3RyYXRpb24udnVlPzA2YjciLCJ3ZWJwYWNrOi8vQ2VyZXMvLi9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2N1c3RvbWVyL1JlZ2lzdHJhdGlvbi52dWU/MDdlZiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICB2YXIgX3ZtID0gdGhpcyxcbiAgICBfYyA9IF92bS5fc2VsZi5fY1xuICByZXR1cm4gX2MoXG4gICAgXCJmb3JtXCIsXG4gICAge1xuICAgICAgcmVmOiBcInJlZ2lzdHJhdGlvbkZvcm1cIixcbiAgICAgIHN0YXRpY0NsYXNzOiBcInctMTAwXCIsXG4gICAgICBhdHRyczogeyBhdXRvY29tcGxldGU6IFwib25cIiwgbWV0aG9kOiBcInBvc3RcIiB9LFxuICAgICAgb246IHtcbiAgICAgICAgc3VibWl0OiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgICByZXR1cm4gX3ZtLnZhbGlkYXRlUmVnaXN0cmF0aW9uKClcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJvd1wiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtc20tMTJcIiB9LCBbXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJpbnB1dC11bml0XCIsIGF0dHJzOiB7IFwiZGF0YS12YWxpZGF0ZVwiOiBcIm1haWxcIiB9IH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJ1c2VybmFtZVwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICBcImRhdGEtdGVzdGluZ1wiOiBcIm1haWwtcmVnaXN0ZXJcIixcbiAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgIG5hbWU6IFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgaWQ6IFwiZW1haWxcIiArIF92bS5fdWlkLFxuICAgICAgICAgICAgICAgICAgXCJkYXRhLWF1dG9mb2N1c1wiOiBcIlwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS51c2VybmFtZSB9LFxuICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHJldHVyblxuICAgICAgICAgICAgICAgICAgICBfdm0udXNlcm5hbWUgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImxhYmVsXCIsIHsgYXR0cnM6IHsgZm9yOiBcImVtYWlsXCIgKyBfdm0uX3VpZCB9IH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUucmVnRW1haWxcIikpICsgXCIqXCJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgICApLFxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgIV92bS5ndWVzdE1vZGVcbiAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY29sLXNtLTZcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmVmOiBcInBhc3N3b3JkSW5wdXRcIixcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImlucHV0LXVuaXRcIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IFwibm8tYm90dG9tIG1lZGlhLXhzLWRcIjogX3ZtLm1vZGFsRWxlbWVudCB9LFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJkYXRhLXZhbGlkYXRlXCI6IFwicGFzc3dvcmRcIiB9LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJwb3BwZXJcIiwge1xuICAgICAgICAgICAgICAgICAgICByZWY6IFwicGFzc3dvcmRIaW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRyaWdnZXI6IFwiZm9jdXNcIiwgcGxhY2VtZW50OiBcImJvdHRvbVwiIH0sXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoXG4gICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiaGFuZGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLXRlc3RpbmdcIjogXCJwYXNzd29yZC1yZWdpc3RlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiBcIm5ldy1wYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBcIm5ldy1wYXNzd29yZC1cIiArIF92bS5fdWlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnBhc3N3b3JkIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0ucGFzc3dvcmQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJveHk6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwidGl0bGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZEhpbnRUaXRsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJjb250ZW50XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKFwidWxcIiwgeyBzdGF0aWNDbGFzczogXCJwbC0zXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYyhcImxpXCIsIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1Bhc3N3b3JkSGludExlbmd0aFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZEhpbnREaWdpdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJsaVwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uJHRyYW5zbGF0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZEhpbnRDaGFyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIDMwMzM3NzIwNlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogXCJuZXctcGFzc3dvcmQtXCIgKyBfdm0uX3VpZCB9IH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZFwiKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIqXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAhX3ZtLmd1ZXN0TW9kZVxuICAgICAgICAgID8gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtc20tNiBpbnB1dC11bml0LWdyb3VwXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImlucHV0LXVuaXRcIixcbiAgICAgICAgICAgICAgICAgIGNsYXNzOiB7IFwibm8tYm90dG9tXCI6IF92bS5tb2RhbEVsZW1lbnQgfSxcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IFwiZGF0YS12YWxpZGF0ZVwiOiBcInJlZlwiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wYXNzd29yZFJlcGVhdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwicGFzc3dvcmRSZXBlYXRcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBhc3N3b3JkLXJlcGVhdFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogXCJuZXctcGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICBpZDogXCJuZXctcGFzc3dvcmQtcmVwZWF0LVwiICsgX3ZtLl91aWQsXG4gICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLXZhbGlkYXRlLXJlZlwiOiBcIiNuZXctcGFzc3dvcmQtXCIgKyBfdm0uX3VpZCxcbiAgICAgICAgICAgICAgICAgICAgICBcImRhdGEtdGVzdGluZ1wiOiBcInJlcGVhdC1wYXNzd29yZC1yZWdpc3RlclwiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLnBhc3N3b3JkUmVwZWF0IH0sXG4gICAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0ucGFzc3dvcmRSZXBlYXQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgICBcImxhYmVsXCIsXG4gICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgZm9yOiBcIm5ldy1wYXNzd29yZC1yZXBlYXQtXCIgKyBfdm0uX3VpZCB9IH0sXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1JlcGVhdFBhc3N3b3JkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApICsgXCIqXCJcbiAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiBcIm1vZGVsXCIsXG4gICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmhvbmV5cG90LFxuICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImhvbmV5cG90XCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiaG9uZXlcIixcbiAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBuYW1lOiBcInVzZXJuYW1lXCIsXG4gICAgICAgICAgICBhdXRvY29tcGxldGU6IFwibmV3LXBhc3N3b3JkXCIsXG4gICAgICAgICAgICB0YWJpbmRleDogXCItMVwiLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5ob25leXBvdCB9LFxuICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpIHJldHVyblxuICAgICAgICAgICAgICBfdm0uaG9uZXlwb3QgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICAhX3ZtLmlzU2ltcGxlUmVnaXN0cmF0aW9uXG4gICAgICAgICAgICAgID8gX2MoXCJhZGRyZXNzLWlucHV0LWdyb3VwXCIsIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIiN2dWUtYWRkcmVzcy1pbnB1dC1ncm91cFwiLFxuICAgICAgICAgICAgICAgICAgICBcImFkZHJlc3MtdHlwZVwiOiBcIjFcIixcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5iaWxsaW5nQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgXCJvcHRpb25hbC1hZGRyZXNzLWZpZWxkc1wiOiBfdm0uc2hvd25GaWVsZHMsXG4gICAgICAgICAgICAgICAgICAgIFwicmVxdWlyZWQtYWRkcmVzcy1maWVsZHNcIjogX3ZtLnJlcXVpcmVkRmllbGRzLFxuICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHQtc2FsdXRhdGlvblwiOiBfdm0uZGVmYXVsdFNhbHV0YXRpb24sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNldEFkZHJlc3NEYXRhRmllbGQoJGV2ZW50KVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIHNjb3BlZFNsb3RzOiBfdm0uX3UoXG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk6IFwiY3VzdG9tLWFkZHJlc3MtZmllbGRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW192bS5fdChcImN1c3RvbS1hZGRyZXNzLWZpZWxkc1wiKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm94eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgICB0cnVlXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgICksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5lbmFibGVDb25maXJtaW5nUHJpdmFjeVBvbGljeVxuICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiY29sLTEyXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiYWNjZXB0LXByaXZhY3ktcG9saWN5LWNoZWNrXCIsIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIm10LTMgbWItMFwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJzaG93LWVycm9yXCI6IF92bS5wcml2YWN5UG9saWN5U2hvd0Vycm9yIH0sXG4gICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0ucHJpdmFjeVBvbGljeVZhbHVlQ2hhbmdlZCgkZXZlbnQpXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgbW9kZWw6IHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5wcml2YWN5UG9saWN5QWNjZXB0ZWQsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoJCR2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLnByaXZhY3lQb2xpY3lBY2NlcHRlZCA9ICQkdlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcInByaXZhY3lQb2xpY3lBY2NlcHRlZFwiLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJkaXZcIixcbiAgICAgICAgeyBzdGF0aWNDbGFzczogXCJib3JkZXItdG9wIG10LTIgdGV4dC1yaWdodFwiIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfdm0uX3QoXCJleHRlbmQtb3ZlcmxheS1idXR0b25zXCIpLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJidG4gYnRuLWFwcGVhcmFuY2UgYnRuLXByaW1hcnkgYnRuLW1lZGl1bSBtdC0zXCIsXG4gICAgICAgICAgICAgIGNsYXNzOiBfdm0uYnV0dG9uU2l6ZUNsYXNzLFxuICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgIGRpc2FibGVkOiBfdm0uaXNEaXNhYmxlZCxcbiAgICAgICAgICAgICAgICBcImRhdGEtdGVzdGluZ1wiOiBcInJlZ2lzdGVyLXN1Ym1pdFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgXCIgK1xuICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1JlZ2lzdGVyXCIpKSArXG4gICAgICAgICAgICAgICAgICBcIlxcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIF9jKFwiaWNvblwiLCB7XG4gICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZGVmYXVsdC1mbG9hdFwiLFxuICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246IFwidXNlci1wbHVzXCIsIGxvYWRpbmc6IF92bS5pc0Rpc2FibGVkIH0sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApLFxuICAgICAgICBdLFxuICAgICAgICAyXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICEhX3ZtLmdvb2dsZVJlY2FwdGNoYUFwaUtleSAmJlxuICAgICAgKF92bS5tb2RhbFNob3duIHx8ICFfdm0uaXNTaW1wbGVSZWdpc3RyYXRpb24pXG4gICAgICAgID8gX2MoXCJyZWNhcHRjaGFcIilcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsImV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTIudXNlIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3RlbXBsYXRlTG9hZGVyLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzJdIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUmVnaXN0cmF0aW9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1iMTYwNDg1ZSZcIiIsInZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gIHZhciBfdm0gPSB0aGlzLFxuICAgIF9jID0gX3ZtLl9zZWxmLl9jXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVja1wiLCBjbGFzczogeyBlcnJvcjogX3ZtLnNob3dFcnJvciB9IH0sXG4gICAgW1xuICAgICAgX2MoXCJpbnB1dFwiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImZvcm0tY2hlY2staW5wdXRcIixcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgaWQ6IFwicHJpdmFjeS1wb2xpY3ktYWNjZXB0XCIgKyBfdm0uX3VpZCxcbiAgICAgICAgICBcImRhdGEtdGVzdGluZ1wiOiBcInByaXZhY3ktcG9saWN5LWFjY2VwdC1yZWdpc3RlclwiLFxuICAgICAgICB9LFxuICAgICAgICBkb21Qcm9wczogeyBjaGVja2VkOiBfdm0udmFsdWUgfSxcbiAgICAgICAgb246IHtcbiAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uICgkZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdm0ub25WYWx1ZUNoYW5nZWQoJGV2ZW50LnRhcmdldC5jaGVja2VkKVxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJsYWJlbFwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZm9ybS1jaGVjay1sYWJlbFwiLFxuICAgICAgICAgIGF0dHJzOiB7IGZvcjogXCJwcml2YWN5LXBvbGljeS1hY2NlcHRcIiArIF92bS5fdWlkIH0sXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcInNwYW5cIiwgeyBkb21Qcm9wczogeyBpbm5lckhUTUw6IF92bS5fcyhfdm0ubGFiZWxIdG1sKSB9IH0pLFxuICAgICAgICAgIF9jKFwic3VwXCIsIFtfdm0uX3YoXCIqXCIpXSksXG4gICAgICAgIF1cbiAgICAgICksXG4gICAgXVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMi51c2UhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvdGVtcGxhdGVMb2FkZXIuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BY2NlcHRQcml2YWN5UG9saWN5Q2hlY2sudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTE0MTk1YTkwJlwiIiwiPHRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJmb3JtLWNoZWNrXCIgOmNsYXNzPVwieyAnZXJyb3InOiBzaG93RXJyb3IgfVwiPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCIgdHlwZT1cImNoZWNrYm94XCIgOmlkPVwiJ3ByaXZhY3ktcG9saWN5LWFjY2VwdCcgKyBfdWlkXCIgOmNoZWNrZWQ9XCJ2YWx1ZVwiIEBjaGFuZ2U9XCJvblZhbHVlQ2hhbmdlZCgkZXZlbnQudGFyZ2V0LmNoZWNrZWQpXCIgZGF0YS10ZXN0aW5nPVwicHJpdmFjeS1wb2xpY3ktYWNjZXB0LXJlZ2lzdGVyXCI+XG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImZvcm0tY2hlY2stbGFiZWxcIiA6Zm9yPVwiJ3ByaXZhY3ktcG9saWN5LWFjY2VwdCcgKyBfdWlkXCI+XG4gICAgICAgICAgICA8c3BhbiB2LWh0bWw9XCJsYWJlbEh0bWxcIj48L3NwYW4+PCEtLVxuICAgICAgICAgICAgLS0+PHN1cD4qPC9zdXA+XG4gICAgICAgIDwvbGFiZWw+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgbmFtZTogXCJhY2NlcHQtcHJpdmFjeS1wb2xpY3ktY2hlY2tcIixcblxuICAgIHByb3BzOiB7XG4gICAgICAgIHZhbHVlOiBCb29sZWFuICxcbiAgICAgICAgc2hvd0Vycm9yOiBCb29sZWFuXG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGxhYmVsSHRtbCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhY3RQcml2YWN5UG9saWN5ID0gdGhpcy4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLmNvbnRhY3RQcml2YWN5UG9saWN5XCIsIHtcImh5cGhlblwiOiBcIiZzaHk7XCJ9KTtcbiAgICAgICAgICAgIGNvbnN0IGh0bWwgPSBgXG4gICAgICAgICAgICAgICAgPCEtLS0tPjxhIGhyZWY9XCIkeyBBcHAudXJscy5wcml2YWN5UG9saWN5IH1cIiB0YXJnZXQ9XCJfYmxhbmtcIiBjbGFzcz1cInRleHQtYXBwZWFyYW5jZVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj4keyBjb250YWN0UHJpdmFjeVBvbGljeSB9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvYT48IS0tLS0+XG4gICAgICAgICAgICBgO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLmNvbnRhY3RBY2NlcHRQcml2YWN5UG9saWN5XCIsIHtwb2xpY3k6IGh0bWx9KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOlxuICAgIHtcbiAgICAgICAgb25WYWx1ZUNoYW5nZWQodmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoXCJpbnB1dFwiLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG48L3NjcmlwdD4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTIudXNlIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FjY2VwdFByaXZhY3lQb2xpY3lDaGVjay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FjY2VwdFByaXZhY3lQb2xpY3lDaGVjay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTQxOTVhOTAmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiPHRlbXBsYXRlPlxuICAgIDxmb3JtIGNsYXNzPVwidy0xMDBcIiBhdXRvY29tcGxldGU9XCJvblwiIG1ldGhvZD1cInBvc3RcIiBAc3VibWl0LnByZXZlbnQ9XCJ2YWxpZGF0ZVJlZ2lzdHJhdGlvbigpXCIgcmVmPVwicmVnaXN0cmF0aW9uRm9ybVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLTEyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LXVuaXRcIiBkYXRhLXZhbGlkYXRlPVwibWFpbFwiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgZGF0YS10ZXN0aW5nPVwibWFpbC1yZWdpc3RlclwiIHR5cGU9XCJlbWFpbFwiIG5hbWU9XCJlbWFpbFwiIGF1dG9jb21wbGV0ZT1cImVtYWlsXCIgOmlkPVwiJ2VtYWlsJytfdWlkXCIgdi1tb2RlbD1cInVzZXJuYW1lXCIgZGF0YS1hdXRvZm9jdXM+XG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwiJ2VtYWlsJytfdWlkXCI+e3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5yZWdFbWFpbFwiKSB9fSo8L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tNlwiIHYtaWY9XCIhZ3Vlc3RNb2RlXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LXVuaXRcIiA6Y2xhc3M9XCJ7J25vLWJvdHRvbSBtZWRpYS14cy1kJzogbW9kYWxFbGVtZW50fVwiIGRhdGEtdmFsaWRhdGU9XCJwYXNzd29yZFwiIHJlZj1cInBhc3N3b3JkSW5wdXRcIj5cbiAgICAgICAgICAgICAgICAgICAgPHBvcHBlciB2LWNsb2FrIHRyaWdnZXI9XCJmb2N1c1wiIHBsYWNlbWVudD1cImJvdHRvbVwiIHJlZj1cInBhc3N3b3JkSGludFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICNoYW5kbGU+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtdGVzdGluZz1cInBhc3N3b3JkLXJlZ2lzdGVyXCIgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkXCIgYXV0b2NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgOmlkPVwiJ25ldy1wYXNzd29yZC0nICsgX3VpZFwiIHYtbW9kZWw9XCJwYXNzd29yZFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZW1wbGF0ZT5cblxuICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlICN0aXRsZT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1Bhc3N3b3JkSGludFRpdGxlXCIpIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2NvbnRlbnQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwicGwtM1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZEhpbnRMZW5ndGhcIikgfX08L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+e3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5yZWdQYXNzd29yZEhpbnREaWdpdFwiKSB9fTwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT57eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1Bhc3N3b3JkSGludENoYXJcIikgfX08L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPlxuICAgICAgICAgICAgICAgICAgICA8L3BvcHBlcj5cblxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgOmZvcj1cIiduZXctcGFzc3dvcmQtJyArIF91aWRcIj57eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1Bhc3N3b3JkXCIpIH19KjwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS02IGlucHV0LXVuaXQtZ3JvdXBcIiB2LWlmPVwiIWd1ZXN0TW9kZVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnB1dC11bml0XCIgOmNsYXNzPVwieyduby1ib3R0b20nOiBtb2RhbEVsZW1lbnR9XCIgZGF0YS12YWxpZGF0ZT1cInJlZlwiPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkLXJlcGVhdFwiIGF1dG9jb21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiIDppZD1cIiduZXctcGFzc3dvcmQtcmVwZWF0LScgKyBfdWlkXCIgdi1tb2RlbD1cInBhc3N3b3JkUmVwZWF0XCIgOmRhdGEtdmFsaWRhdGUtcmVmPVwiJyNuZXctcGFzc3dvcmQtJyArIF91aWRcIiBkYXRhLXRlc3Rpbmc9XCJyZXBlYXQtcGFzc3dvcmQtcmVnaXN0ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIDpmb3I9XCInbmV3LXBhc3N3b3JkLXJlcGVhdC0nICsgX3VpZFwiPnt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUucmVnUmVwZWF0UGFzc3dvcmRcIikgfX0qPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJob25leVwiIHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJuYW1lXCIgYXV0b2NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgdGFiaW5kZXg9XCItMVwiIHYtbW9kZWw9XCJob25leXBvdFwiPlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICAgICAgPGFkZHJlc3MtaW5wdXQtZ3JvdXBcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU9XCIjdnVlLWFkZHJlc3MtaW5wdXQtZ3JvdXBcIlxuICAgICAgICAgICAgICAgICAgICB2LWlmPVwiIWlzU2ltcGxlUmVnaXN0cmF0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy10eXBlPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgIDp2YWx1ZT1cImJpbGxpbmdBZGRyZXNzXCJcbiAgICAgICAgICAgICAgICAgICAgQGlucHV0PVwic2V0QWRkcmVzc0RhdGFGaWVsZCgkZXZlbnQpXCJcbiAgICAgICAgICAgICAgICAgICAgOm9wdGlvbmFsLWFkZHJlc3MtZmllbGRzPVwic2hvd25GaWVsZHNcIlxuICAgICAgICAgICAgICAgICAgICA6cmVxdWlyZWQtYWRkcmVzcy1maWVsZHM9XCJyZXF1aXJlZEZpZWxkc1wiXG4gICAgICAgICAgICAgICAgICAgIDpkZWZhdWx0LXNhbHV0YXRpb249XCJkZWZhdWx0U2FsdXRhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGUgI2N1c3RvbS1hZGRyZXNzLWZpZWxkcz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjdXN0b20tYWRkcmVzcy1maWVsZHNcIj48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICAgIDwvdGVtcGxhdGU+XG4gICAgICAgICAgICAgICAgPC9hZGRyZXNzLWlucHV0LWdyb3VwPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtMTJcIiB2LWlmPVwiZW5hYmxlQ29uZmlybWluZ1ByaXZhY3lQb2xpY3lcIj5cbiAgICAgICAgICAgICAgICA8YWNjZXB0LXByaXZhY3ktcG9saWN5LWNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cIm10LTMgbWItMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB2LW1vZGVsPVwicHJpdmFjeVBvbGljeUFjY2VwdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIEBpbnB1dD1cInByaXZhY3lQb2xpY3lWYWx1ZUNoYW5nZWQoJGV2ZW50KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICA6c2hvdy1lcnJvcj1cInByaXZhY3lQb2xpY3lTaG93RXJyb3JcIj5cbiAgICAgICAgICAgICAgICA8L2FjY2VwdC1wcml2YWN5LXBvbGljeS1jaGVjaz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJvcmRlci10b3AgbXQtMiB0ZXh0LXJpZ2h0XCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0ZW5kLW92ZXJsYXktYnV0dG9uc1wiPjwvc2xvdD5cblxuICAgICAgICAgICAgPGJ1dHRvbiA6ZGlzYWJsZWQ9XCJpc0Rpc2FibGVkXCIgY2xhc3M9XCJidG4gYnRuLWFwcGVhcmFuY2UgYnRuLXByaW1hcnkgYnRuLW1lZGl1bSBtdC0zXCIgOmNsYXNzPVwiYnV0dG9uU2l6ZUNsYXNzXCIgZGF0YS10ZXN0aW5nPVwicmVnaXN0ZXItc3VibWl0XCI+XG4gICAgICAgICAgICAgICAge3sgJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5yZWdSZWdpc3RlclwiKSB9fVxuICAgICAgICAgICAgICAgIDxpY29uIGljb249XCJ1c2VyLXBsdXNcIiBjbGFzcz1cImRlZmF1bHQtZmxvYXRcIiA6bG9hZGluZz1cImlzRGlzYWJsZWRcIj48L2ljb24+XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHJlY2FwdGNoYSB2LWlmPVwiISFnb29nbGVSZWNhcHRjaGFBcGlLZXkgJiYgKG1vZGFsU2hvd24gfHwgIWlzU2ltcGxlUmVnaXN0cmF0aW9uKVwiPjwvcmVjYXB0Y2hhPlxuICAgIDwvZm9ybT5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG5pbXBvcnQgVmFsaWRhdGlvblNlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL1ZhbGlkYXRpb25TZXJ2aWNlXCI7XG5pbXBvcnQgeyBuYXZpZ2F0ZVRvIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL1VybFNlcnZpY2VcIjtcbmltcG9ydCB7IGV4ZWN1dGVSZUNhcHRjaGEgfSBmcm9tIFwiLi4vLi4vaGVscGVyL2V4ZWN1dGVSZUNhcHRjaGFcIjtcbmltcG9ydCB7IGlzTnVsbE9yVW5kZWZpbmVkLCBpc0RlZmluZWQgfSBmcm9tIFwiLi4vLi4vaGVscGVyL3V0aWxzXCI7XG5pbXBvcnQgeyBCdXR0b25TaXplUHJvcGVydHlNaXhpbiB9IGZyb20gXCIuLi8uLi9taXhpbnMvYnV0dG9uU2l6ZVByb3BlcnR5Lm1peGluXCI7XG5pbXBvcnQgQWRkcmVzc0lucHV0R3JvdXAgZnJvbSBcIi4vQWRkcmVzc0lucHV0R3JvdXAudnVlXCI7XG5pbXBvcnQgQXBpU2VydmljZSBmcm9tIFwiLi4vLi4vc2VydmljZXMvQXBpU2VydmljZVwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvblNlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL05vdGlmaWNhdGlvblNlcnZpY2VcIjtcbmltcG9ydCBNb2RhbFNlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL01vZGFsU2VydmljZVwiO1xuaW1wb3J0IEFjY2VwdFByaXZhY3lQb2xpY3lDaGVjayBmcm9tIFwiLi9BY2NlcHRQcml2YWN5UG9saWN5Q2hlY2sudnVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG5hbWU6IFwicmVnaXN0cmF0aW9uXCIsXG5cbiAgICBjb21wb25lbnRzOlxuICAgIHtcbiAgICAgICAgQWRkcmVzc0lucHV0R3JvdXAsXG4gICAgICAgIEFjY2VwdFByaXZhY3lQb2xpY3lDaGVja1xuICAgIH0sXG5cbiAgICBtaXhpbnM6IFtCdXR0b25TaXplUHJvcGVydHlNaXhpbl0sXG5cbiAgICBwcm9wczoge1xuICAgICAgICBtb2RhbEVsZW1lbnQ6IFN0cmluZyxcbiAgICAgICAgZ3Vlc3RNb2RlOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIGlzU2ltcGxlUmVnaXN0cmF0aW9uOiB7IHR5cGU6IEJvb2xlYW4sIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgICAgIHRlbXBsYXRlOiBTdHJpbmcsXG4gICAgICAgIGJhY2tsaW5rOiBTdHJpbmcsXG4gICAgICAgIHNob3duRmllbGRzOiBPYmplY3QsXG4gICAgICAgIHJlcXVpcmVkRmllbGRzOiBPYmplY3QsXG4gICAgICAgIGRlZmF1bHRTYWx1dGF0aW9uOiAge1xuICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICAgICAgZGVmYXVsdDogQXBwLmNvbmZpZy5hZGRyZXNzZXMuZGVmYXVsdFNhbHV0YXRpb25cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkYXRhKClcbiAgICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXNzd29yZCAgICAgIDogXCJcIixcbiAgICAgICAgICAgIHBhc3N3b3JkUmVwZWF0OiBcIlwiLFxuICAgICAgICAgICAgdXNlcm5hbWUgICAgICA6IFwiXCIsXG4gICAgICAgICAgICBiaWxsaW5nQWRkcmVzczoge1xuICAgICAgICAgICAgICAgIGNvdW50cnlJZDogbnVsbCxcbiAgICAgICAgICAgICAgICBzdGF0ZUlkOiBudWxsLFxuICAgICAgICAgICAgICAgIGdlbmRlcjogdGhpcy5kZWZhdWx0U2FsdXRhdGlvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJpdmFjeVBvbGljeUFjY2VwdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBwcml2YWN5UG9saWN5U2hvd0Vycm9yOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZUNvbmZpcm1pbmdQcml2YWN5UG9saWN5OiBBcHAuY29uZmlnLmdsb2JhbC5yZWdpc3RyYXRpb25SZXF1aXJlUHJpdmFjeVBvbGljeUNvbmZpcm1hdGlvbixcbiAgICAgICAgICAgIGdvb2dsZVJlY2FwdGNoYUFwaUtleTogQXBwLmNvbmZpZy5nbG9iYWwuZ29vZ2xlUmVjYXB0Y2hhQXBpS2V5LFxuICAgICAgICAgICAgbW9kYWxTaG93bjogZmFsc2UsXG4gICAgICAgICAgICBob25leXBvdDogXCJcIlxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBtb3VudGVkKClcbiAgICB7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+XG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1vZGFsRWxlbWVudClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRNb2RhbEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWYWxpZGF0ZSB0aGUgcmVnaXN0cmF0aW9uIGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIHZhbGlkYXRlUmVnaXN0cmF0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgZXhlY3V0ZVJlQ2FwdGNoYSh0aGlzLiRyZWZzLnJlZ2lzdHJhdGlvbkZvcm0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlY2FwdGNoYVRva2VuKSA9PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvblNlcnZpY2UudmFsaWRhdGUodGhpcy4kcmVmcy5yZWdpc3RyYXRpb25Gb3JtKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbmUoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZW5hYmxlQ29uZmlybWluZ1ByaXZhY3lQb2xpY3kgfHwgdGhpcy5wcml2YWN5UG9saWN5QWNjZXB0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRSZWdpc3RyYXRpb24ocmVjYXB0Y2hhVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByaXZhY3lQb2xpY3lTaG93RXJyb3IgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuY29udGFjdEFjY2VwdEZvcm1Qcml2YWN5UG9saWN5XCIsIHsgaHlwaGVuOiBcIiZzaHk7XCIgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFJlY2FwdGNoYSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmFpbChpbnZhbGlkRmllbGRzID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldFJlY2FwdGNoYSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZCh0aGlzLiRyZWZzLnBhc3N3b3JkSGludCkgJiYgaW52YWxpZEZpZWxkcy5pbmRleE9mKHRoaXMuJHJlZnMucGFzc3dvcmRJbnB1dCkgPj0gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMucGFzc3dvcmRIaW50LnNob3dQb3BwZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnZhbGlkRmllbGROYW1lcyA9IHRoaXMuZ2V0SW52YWxpZEZpZWxkTmFtZXMoaW52YWxpZEZpZWxkcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW52YWxpZEZpZWxkTmFtZXMubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUuY2hlY2tvdXRDaGVja0FkZHJlc3NGb3JtRmllbGRzXCIsIHsgZmllbGRzOiBpbnZhbGlkRmllbGROYW1lcy5qb2luKFwiLCBcIikgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWYWxpZGF0aW9uU2VydmljZS5tYXJrSW52YWxpZEZpZWxkcyhpbnZhbGlkRmllbGRzLCBcImVycm9yXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5hYmxlQ29uZmlybWluZ1ByaXZhY3lQb2xpY3kgJiYgIXRoaXMucHJpdmFjeVBvbGljeUFjY2VwdGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2YWN5UG9saWN5U2hvd0Vycm9yID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLmNvbnRhY3RBY2NlcHRGb3JtUHJpdmFjeVBvbGljeVwiLCB7IGh5cGhlbjogXCImc2h5O1wiIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0SW52YWxpZEZpZWxkTmFtZXMoaW52YWxpZEZpZWxkcyA9IFtdKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWVzID0gW107XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgaW52YWxpZEZpZWxkcylcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBsZXQgZmllbGROYW1lID0gZmllbGQubGFzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUwudHJpbSgpO1xuXG4gICAgICAgICAgICAgICAgZmllbGROYW1lID0gZmllbGROYW1lLnNsaWNlKC0xKSA9PT0gXCIqXCIgPyBmaWVsZE5hbWUuc2xpY2UoMCwgZmllbGROYW1lLmxlbmd0aCAtIDEpIDogZmllbGROYW1lO1xuICAgICAgICAgICAgICAgIGZpZWxkTmFtZXMucHVzaChmaWVsZE5hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZmllbGROYW1lcztcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2VuZCB0aGUgcmVnaXN0cmF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICBzZW5kUmVnaXN0cmF0aW9uKHJlY2FwdGNoYVRva2VuKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB1c2VyT2JqZWN0ID0gdGhpcy5nZXRVc2VyT2JqZWN0KCk7XG5cbiAgICAgICAgICAgIHVzZXJPYmplY3QucmVjYXB0Y2hhID0gcmVjYXB0Y2hhVG9rZW47XG5cbiAgICAgICAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIEFwaVNlcnZpY2UucG9zdChcIi9yZXN0L2lvL2N1c3RvbWVyXCIsIHVzZXJPYmplY3QpXG4gICAgICAgICAgICAgICAgLmRvbmUocmVzcG9uc2UgPT5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIEFwaVNlcnZpY2Uuc2V0VG9rZW4ocmVzcG9uc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuY29kZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXCJvblNpZ25VcFN1Y2Nlc3NcIiwgeyBkZXRhaWw6IHVzZXJPYmplY3QgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ1N1Y2Nlc3NmdWxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICkuY2xvc2VBZnRlcigzMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubW9kYWxFbGVtZW50KSAhPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb2RhbFNlcnZpY2UuZmluZE1vZGFsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubW9kYWxFbGVtZW50KSkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrbGluayAhPT0gbnVsbCAmJiB0aGlzLmJhY2tsaW5rKVxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRlVG8oZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuYmFja2xpbmspKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLnJlZ0Vycm9yXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICApLmNsb3NlQWZ0ZXIoMTAwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0UmVjYXB0Y2hhKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5mYWlsKChlcnJvcikgPT5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIE5vdGlmaWNhdGlvblNlcnZpY2UuZXJyb3IoZXJyb3IuZXJyb3IpLmNsb3NlQWZ0ZXIoMTAwMDApO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRSZWNhcHRjaGEoKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKiogXG4gICAgICAgICAqIFJlc2V0cyByZWNhcHRjaGEgdjIgdG8gbWFrZSBpdCBjYXBhYmxlIG9mIGV4ZWN1dGluZyBhZ2Fpbi5cbiAgICAgICAgKi9cbiAgICAgICAgcmVzZXRSZWNhcHRjaGEoKVxuICAgICAgICB7XG4gICAgICAgICAgICBpZihBcHAuY29uZmlnLmdsb2JhbC5nb29nbGVSZWNhcHRjaGFWZXJzaW9uID09PSAyICYmIHdpbmRvdy5ncmVjYXB0Y2hhKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY2FwdGNoYUlkID0gdGhpcy4kcmVmcy5yZWdpc3RyYXRpb25Gb3JtLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1yZWNhcHRjaGFdXCIpO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmdyZWNhcHRjaGEucmVzZXQocmVjYXB0Y2hhSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldEFkZHJlc3NEYXRhRmllbGQoeyBmaWVsZCwgdmFsdWUgfSlcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5iaWxsaW5nQWRkcmVzc1tmaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuYmlsbGluZ0FkZHJlc3MgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLmJpbGxpbmdBZGRyZXNzKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogSGFuZGxlIHRoZSB1c2VyIG9iamVjdCB3aGljaCBpcyBzZW5kIHRvIHRoZSBzZXJ2ZXJcbiAgICAgICAgICogQHJldHVybnMge3tjb250YWN0OiB7cmVmZXJyZXJJZDogbnVtYmVyLCB0eXBlSWQ6IG51bWJlciwgb3B0aW9uczoge3R5cGVJZDoge3R5cGVJZDogbnVtYmVyLCBzdWJUeXBlSWQ6IG51bWJlciwgdmFsdWU6ICosIHByaW9yaXR5OiBudW1iZXJ9fX0sIGhvbmV5cG90OiBzdHJpbmd9fHtjb250YWN0OiB7cmVmZXJyZXJJZDogbnVtYmVyLCB0eXBlSWQ6IG51bWJlciwgcGFzc3dvcmQ6ICosIG9wdGlvbnM6IHt0eXBlSWQ6IHt0eXBlSWQ6IG51bWJlciwgc3ViVHlwZUlkOiBudW1iZXIsIHZhbHVlOiAqLCBwcmlvcml0eTogbnVtYmVyfX19LCBob25leXBvdDogc3RyaW5nfX1cbiAgICAgICAgICovXG4gICAgICAgIGdldFVzZXJPYmplY3QoKVxuICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCB1c2VyT2JqZWN0ID1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVycmVySWQ6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlSWQgICAgOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyAgIDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVJZDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlSWQgICA6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YlR5cGVJZDogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgICAgOiB0aGlzLnVzZXJuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmlvcml0eSA6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhvbmV5cG90OiB0aGlzLmhvbmV5cG90XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLmd1ZXN0TW9kZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB1c2VyT2JqZWN0LmNvbnRhY3QucGFzc3dvcmQgPSB0aGlzLnBhc3N3b3JkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNTaW1wbGVSZWdpc3RyYXRpb24pXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdXNlck9iamVjdC5iaWxsaW5nQWRkcmVzcyA9IHRoaXMuYmlsbGluZ0FkZHJlc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VyT2JqZWN0O1xuICAgICAgICB9LFxuXG4gICAgICAgIHByaXZhY3lQb2xpY3lWYWx1ZUNoYW5nZWQodmFsdWUpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucHJpdmFjeVBvbGljeUFjY2VwdGVkID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByaXZhY3lQb2xpY3lTaG93RXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpbml0TW9kYWxFdmVudExpc3RlbmVycygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gTW9kYWxTZXJ2aWNlLmZpbmRNb2RhbChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm1vZGFsRWxlbWVudCkpO1xuXG4gICAgICAgICAgICBpZiAoaXNEZWZpbmVkKG1vZGFsKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtb2RhbC5vbihcInNob3cuYnMubW9kYWxcIixcbiAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RhbFNob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBtb2RhbC5vbihcImhpZGUuYnMubW9kYWxcIixcbiAgICAgICAgICAgICAgICAgICAgKCkgPT5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RhbFNob3duID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuPC9zY3JpcHQ+XG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTIudXNlIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUmVnaXN0cmF0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1JlZ2lzdHJhdGlvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1JlZ2lzdHJhdGlvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9YjE2MDQ4NWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vUmVnaXN0cmF0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vUmVnaXN0cmF0aW9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGxcbiAgXG4pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm5hbWVzIjpbInJlbmRlciIsIl92bSIsIl9jIiwiX3NlbGYiLCJyZWYiLCJzdGF0aWNDbGFzcyIsImF0dHJzIiwiYXV0b2NvbXBsZXRlIiwibWV0aG9kIiwib24iLCJzdWJtaXQiLCIkZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkYXRlUmVnaXN0cmF0aW9uIiwiZGlyZWN0aXZlcyIsIm5hbWUiLCJyYXdOYW1lIiwidmFsdWUiLCJ1c2VybmFtZSIsImV4cHJlc3Npb24iLCJ0eXBlIiwiaWQiLCJfdWlkIiwiZG9tUHJvcHMiLCJpbnB1dCIsInRhcmdldCIsImNvbXBvc2luZyIsIl92IiwiZm9yIiwiX3MiLCIkdHJhbnNsYXRlIiwiZ3Vlc3RNb2RlIiwiY2xhc3MiLCJtb2RhbEVsZW1lbnQiLCJ0cmlnZ2VyIiwicGxhY2VtZW50Iiwic2NvcGVkU2xvdHMiLCJfdSIsImtleSIsImZuIiwicGFzc3dvcmQiLCJwcm94eSIsIl9lIiwicGFzc3dvcmRSZXBlYXQiLCJob25leXBvdCIsInRhYmluZGV4IiwiaXNTaW1wbGVSZWdpc3RyYXRpb24iLCJ0ZW1wbGF0ZSIsImJpbGxpbmdBZGRyZXNzIiwic2hvd25GaWVsZHMiLCJyZXF1aXJlZEZpZWxkcyIsImRlZmF1bHRTYWx1dGF0aW9uIiwic2V0QWRkcmVzc0RhdGFGaWVsZCIsIl90IiwiZW5hYmxlQ29uZmlybWluZ1ByaXZhY3lQb2xpY3kiLCJwcml2YWN5UG9saWN5U2hvd0Vycm9yIiwicHJpdmFjeVBvbGljeVZhbHVlQ2hhbmdlZCIsIm1vZGVsIiwicHJpdmFjeVBvbGljeUFjY2VwdGVkIiwiY2FsbGJhY2siLCIkJHYiLCJidXR0b25TaXplQ2xhc3MiLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJpY29uIiwibG9hZGluZyIsImdvb2dsZVJlY2FwdGNoYUFwaUtleSIsIm1vZGFsU2hvd24iLCJzdGF0aWNSZW5kZXJGbnMiLCJfd2l0aFN0cmlwcGVkIiwiZXJyb3IiLCJzaG93RXJyb3IiLCJjaGVja2VkIiwiY2hhbmdlIiwib25WYWx1ZUNoYW5nZWQiLCJpbm5lckhUTUwiLCJsYWJlbEh0bWwiLCJwcm9wcyIsImNvbXB1dGVkIiwiQXBwIiwiY29udGFjdFByaXZhY3lQb2xpY3kiLCJwb2xpY3kiLCJtZXRob2RzIiwiY29tcG9uZW50cyIsIkFkZHJlc3NJbnB1dEdyb3VwIiwiQWNjZXB0UHJpdmFjeVBvbGljeUNoZWNrIiwibWl4aW5zIiwiZGVmYXVsdCIsImJhY2tsaW5rIiwiZGF0YSIsImNvdW50cnlJZCIsInN0YXRlSWQiLCJnZW5kZXIiLCJtb3VudGVkIiwiZXhlY3V0ZVJlQ2FwdGNoYSIsInRoZW4iLCJWYWxpZGF0aW9uU2VydmljZSIsImRvbmUiLCJOb3RpZmljYXRpb25TZXJ2aWNlIiwiaHlwaGVuIiwiZmFpbCIsImZpZWxkcyIsImdldEludmFsaWRGaWVsZE5hbWVzIiwiaW52YWxpZEZpZWxkcyIsImZpZWxkIiwiZmllbGROYW1lIiwiZmllbGROYW1lcyIsInNlbmRSZWdpc3RyYXRpb24iLCJ1c2VyT2JqZWN0IiwiQXBpU2VydmljZSIsImRvY3VtZW50IiwiZGV0YWlsIiwiTW9kYWxTZXJ2aWNlIiwibmF2aWdhdGVUbyIsImxvY2F0aW9uIiwicmVzZXRSZWNhcHRjaGEiLCJ3aW5kb3ciLCJnZXRVc2VyT2JqZWN0IiwiY29udGFjdCIsInJlZmVycmVySWQiLCJ0eXBlSWQiLCJvcHRpb25zIiwic3ViVHlwZUlkIiwicHJpb3JpdHkiLCJpbml0TW9kYWxFdmVudExpc3RlbmVycyIsIm1vZGFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2797\n')}}]);