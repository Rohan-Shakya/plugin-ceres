"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[46],{9058:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ GoogleMaps; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=template&id=5bf88bf2&\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    "div",\n    {\n      ref: "googleMapsContainer",\n      staticClass: "maps-component position-relative",\n      class: _vm.aspectClass,\n    },\n    [_vm.scriptBlocked ? _c("div", [_vm._t("default")], 2) : _vm._e()]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=template&id=5bf88bf2&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/whenConsented.js\nvar whenConsented = __webpack_require__(7301);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(1023);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var GoogleMapsvue_type_script_lang_js_ = ({\n    props: {\n        address:\n        {\n            type: String,\n            required: false\n        },\n        lat:\n        {\n            type: Number,\n            required: false\n        },\n        lng:\n        {\n            type: Number,\n            required: false\n        },\n        zoom:\n        {\n            type: Number,\n            default: 16\n        },\n        maptype:\n        {\n            type: String,\n            default: "roadmap"\n        },\n        aspectRatio:\n        {\n            type: String,\n            default: "3-1"\n        }\n    },\n\n    data: function()\n    {\n        return {\n            scriptBlocked: true\n        };\n    },\n\n    computed:\n    {\n        aspectClass()\n        {\n            return "prop-" + this.aspectRatio;\n        }\n    },\n\n    mounted()\n    {\n        this.$nextTick(() =>\n        {\n            this.createScript()\n                .then(() =>\n                {\n                    this.initializeMap();\n                })\n                .catch(() =>\n                {\n                    // Do nothing\n                });\n        });\n    },\n\n    methods:\n    {\n        createScript()\n        {\n            return new Promise((resolve, reject) =>\n            {\n                const script = document.querySelector("script#google-maps-api");\n\n                if (!(0,utils/* isNullOrUndefined */.le)(script))\n                {\n                    // script already injected...\n                    this.scriptBlocked = false;\n                    if ((0,utils/* isNullOrUndefined */.le)(window.google))\n                    {\n                        // ...but not loaded yet\n                        script.addEventListener("load", () => resolve(script), false);\n                    }\n                    else\n                    {\n                        // ..and fully loaded\n                        resolve(script);\n                    }\n                }\n                else\n                {\n                    // script not loaded\n                    (0,whenConsented/* whenConsented */.f)(\n                        "media.googleMaps",\n                        () =>\n                        {\n                            this.scriptBlocked = false;\n                            const script = document.createElement("script");\n\n                            script.type = "text/javascript";\n                            script.id = "google-maps-api";\n                            script.src = `https://maps.googleapis.com/maps/api/js?key=${App.config.global.googleMapsApiKey}`;\n\n                            script.addEventListener("load", () => resolve(script), false);\n                            script.addEventListener("error", () => reject(script), false);\n\n                            document.body.appendChild(script);\n                        },\n                        () =>\n                        {\n                            this.scriptBlocked = true;\n                        });\n                }\n            });\n        },\n\n        getCoordinates()\n        {\n            const isLatValid = !isNaN(this.lat) && this.lat > -90 && this.lat < 90;\n            const isLngValid = !isNaN(this.lng) && this.lng > -180 && this.lng < 180;\n\n            if (isLatValid && isLngValid)\n            {\n                return Promise.resolve({\n                    lat: this.lat,\n                    lng: this.lng\n                });\n            }\n            else if(!!this.address && !!window.google)\n            {\n                return new Promise((resolve, reject) =>\n                {\n                    const geocoder = new google.maps.Geocoder();\n                    geocoder.geocode(\n                        {\n                            address: this.address\n                        },\n                        (result, status) =>\n                        {\n                            if(!!result && result.length > 0 && !!result[0].geometry)\n                            {\n                                resolve(result[0].geometry.location);\n                            }\n                            else\n                            {\n                                reject();\n                            }\n                        }\n                    );\n                });\n            }\n\n            return Promise.reject();\n        },\n\n        initializeMap()\n        {\n            this.getCoordinates()\n                .then((coordinates) =>\n                {\n                    const map = new google.maps.Map(this.$refs.googleMapsContainer,\n                        {\n                            center: coordinates,\n                            zoom  : this.zoom,\n                            mapTypeId: this.maptype\n                        });\n\n                    new google.maps.Marker(\n                        {\n                            map: map,\n                            position: coordinates\n                        });\n\n                });\n        }\n    }\n});\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue?vue&type=script&lang=js&\n /* harmony default export */ var common_GoogleMapsvue_type_script_lang_js_ = (GoogleMapsvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/common/GoogleMaps.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  common_GoogleMapsvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = "resources/js/src/app/components/common/GoogleMaps.vue"\n/* harmony default export */ var GoogleMaps = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9058\n')}}]);