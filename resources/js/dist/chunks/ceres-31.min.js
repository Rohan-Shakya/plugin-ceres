"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[31],{5314:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": function() { return /* binding */ ButtonSizePropertyMixin; }\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar BUTTON_SIZES = ["btn-sm", "btn-lg"];\nvar LEGACY_CLASS_MAP = {\n  "sm": "btn-sm",\n  "md": "",\n  "lg": "btn-lg"\n};\nvar ButtonSizePropertyMixin = {\n  props: {\n    buttonSize: {\n      type: [String, null],\n      default: null,\n      validator: function validator(value) {\n        return [""].concat(BUTTON_SIZES, _toConsumableArray(Object.keys(LEGACY_CLASS_MAP))).indexOf(value) !== -1;\n      }\n    }\n  },\n  computed: {\n    buttonSizeClass: function buttonSizeClass() {\n      if (LEGACY_CLASS_MAP.hasOwnProperty(this.buttonSize)) {\n        return LEGACY_CLASS_MAP[this.buttonSize];\n      }\n      return this.buttonSize;\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMxNC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxJQUFNQSxZQUFZLEdBQUcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO0FBRXpDLElBQU1DLGdCQUFnQixHQUFHO0VBQ3JCLElBQUksRUFBRSxRQUFRO0VBQ2QsSUFBSSxFQUFFLEVBQUU7RUFDUixJQUFJLEVBQUU7QUFDVixDQUFDO0FBRU0sSUFBTUMsdUJBQXVCLEdBQ3BDO0VBQ0lDLEtBQUssRUFBRTtJQUNIQyxVQUFVLEVBQ1Y7TUFDSUMsSUFBSSxFQUFFLENBQUNDLE1BQU0sRUFBRSxJQUFJLENBQUM7TUFDcEJDLE9BQU8sRUFBRSxJQUFJO01BQ2JDLFNBQVMsRUFBRSxtQkFBQUMsS0FBSyxFQUNoQjtRQUNJLE9BQU8sQ0FDSCxFQUFFLFNBQ0NULFlBQVkscUJBQ1pVLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQyxHQUNsQ1csT0FBTyxDQUFDSCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7TUFDM0I7SUFDSjtFQUNKLENBQUM7RUFFREksUUFBUSxFQUFFO0lBQ05DLGVBQWUsNkJBQ2Y7TUFDSSxJQUFJYixnQkFBZ0IsQ0FBQ2MsY0FBYyxDQUFDLElBQUksQ0FBQ1gsVUFBVSxDQUFDLEVBQ3BEO1FBQ0ksT0FBT0gsZ0JBQWdCLENBQUMsSUFBSSxDQUFDRyxVQUFVLENBQUM7TUFDNUM7TUFFQSxPQUFPLElBQUksQ0FBQ0EsVUFBVTtJQUMxQjtFQUNKO0FBQ0osQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvbWl4aW5zL2J1dHRvblNpemVQcm9wZXJ0eS5taXhpbi5qcz9jMmQyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJVVFRPTl9TSVpFUyA9IFtcImJ0bi1zbVwiLCBcImJ0bi1sZ1wiXTtcblxuY29uc3QgTEVHQUNZX0NMQVNTX01BUCA9IHtcbiAgICBcInNtXCI6IFwiYnRuLXNtXCIsXG4gICAgXCJtZFwiOiBcIlwiLFxuICAgIFwibGdcIjogXCJidG4tbGdcIlxufTtcblxuZXhwb3J0IGNvbnN0IEJ1dHRvblNpemVQcm9wZXJ0eU1peGluID1cbntcbiAgICBwcm9wczoge1xuICAgICAgICBidXR0b25TaXplOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBbU3RyaW5nLCBudWxsXSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB2YWxpZGF0b3I6IHZhbHVlID0+XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgXCJcIixcbiAgICAgICAgICAgICAgICAgICAgLi4uQlVUVE9OX1NJWkVTLFxuICAgICAgICAgICAgICAgICAgICAuLi5PYmplY3Qua2V5cyhMRUdBQ1lfQ0xBU1NfTUFQKVxuICAgICAgICAgICAgICAgIF0uaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGJ1dHRvblNpemVDbGFzcygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGlmIChMRUdBQ1lfQ0xBU1NfTUFQLmhhc093blByb3BlcnR5KHRoaXMuYnV0dG9uU2l6ZSkpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIExFR0FDWV9DTEFTU19NQVBbdGhpcy5idXR0b25TaXplXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uU2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiQlVUVE9OX1NJWkVTIiwiTEVHQUNZX0NMQVNTX01BUCIsIkJ1dHRvblNpemVQcm9wZXJ0eU1peGluIiwicHJvcHMiLCJidXR0b25TaXplIiwidHlwZSIsIlN0cmluZyIsImRlZmF1bHQiLCJ2YWxpZGF0b3IiLCJ2YWx1ZSIsIk9iamVjdCIsImtleXMiLCJpbmRleE9mIiwiY29tcHV0ZWQiLCJidXR0b25TaXplQ2xhc3MiLCJoYXNPd25Qcm9wZXJ0eSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5314\n')},5355:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ Login; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/login/Login.vue?vue&type=template&id=f66e86d4&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "login-pwd-reset"\n  }, [_c("form", {\n    ref: "loginForm",\n    attrs: {\n      id: "login-form-" + _vm._uid,\n      method: "post"\n    }\n  }, [_c("div", {\n    class: {\n      "modal-body": _vm.modalElement\n    }\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    attrs: {\n      "data-validate": "mail"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.username,\n      expression: "username"\n    }],\n    attrs: {\n      "data-testing": "email-login",\n      type: "email",\n      name: "email",\n      autocomplete: "email",\n      id: "email" + _vm._uid,\n      "data-autofocus": ""\n    },\n    domProps: {\n      value: _vm.username\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.username = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "email" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginEmail")) + "*")])]), _vm._v(" "), _c("span", {\n    staticClass: "error-msg"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginEnterConfirmEmail")))])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("div", {\n    staticClass: "input-unit",\n    class: {\n      "no-bottom": _vm.modalElement\n    },\n    attrs: {\n      "data-validate": "text"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.password,\n      expression: "password"\n    }],\n    attrs: {\n      "data-testing": "password-login",\n      type: "password",\n      name: "password",\n      autocomplete: "current-password",\n      id: "password" + _vm._uid\n    },\n    domProps: {\n      value: _vm.password\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.password = $event.target.value;\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    attrs: {\n      for: "password" + _vm._uid\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginPassword")) + "*")])]), _vm._v(" "), _c("span", {\n    staticClass: "error-msg"\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginEmptyPassword")))])])])]), _vm._v(" "), _c("div", {\n    class: {\n      "modal-footer justify-content-between": _vm.modalElement,\n      row: !_vm.modalElement\n    }\n  }, [_c("div", {\n    class: {\n      "col-7 col-sm-4": !_vm.modalElement\n    }\n  }, [_c("a", {\n    staticClass: "small text-appearance",\n    attrs: {\n      href: "javascript:void(0)"\n    },\n    on: {\n      click: _vm.showResetPwdView\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.loginForgotPassword")) + "?")])]), _vm._v(" "), _c("div", {\n    class: {\n      "col-5 col-sm-8 text-sm-right": !_vm.modalElement\n    }\n  }, [_vm._t("extend-overlay-buttons"), _vm._v(" "), _c("button", {\n    staticClass: "btn btn-primary btn-appearance btn-medium",\n    class: [{\n      "float-right": !_vm.modalElement\n    }, _vm.buttonSizeClass],\n    attrs: {\n      "data-testing": "submit-login",\n      disabled: _vm.isDisabled\n    },\n    on: {\n      click: function click($event) {\n        $event.preventDefault();\n        return _vm.validateLogin.apply(null, arguments);\n      }\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.$translate("Ceres::Template.login")) + "\\n                    "), _c("icon", {\n    attrs: {\n      icon: "user",\n      loading: _vm.isDisabled\n    }\n  })], 1)], 2)])])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/Login.vue?vue&type=template&id=f66e86d4&\n\n// EXTERNAL MODULE: ./resources/js/src/app/mixins/buttonSizeProperty.mixin.js\nvar buttonSizeProperty_mixin = __webpack_require__(5314);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ApiService.js\nvar ApiService = __webpack_require__(7653);\n// EXTERNAL MODULE: ./resources/js/src/app/services/NotificationService.js\nvar NotificationService = __webpack_require__(1841);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ModalService.js\nvar ModalService = __webpack_require__(3740);\n// EXTERNAL MODULE: ./resources/js/src/app/services/AutoFocusService.js\nvar AutoFocusService = __webpack_require__(5825);\n// EXTERNAL MODULE: ./resources/js/src/app/services/ValidationService.js\nvar ValidationService = __webpack_require__(892);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/customer/login/Login.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n\n/* harmony default export */ var Loginvue_type_script_lang_js_ = ({\n  mixins: [buttonSizeProperty_mixin/* ButtonSizePropertyMixin */.Z],\n  props: {\n    backlink: {\n      type: String\n    },\n    modalElement: {\n      type: String\n    },\n    hasToForward: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      password: "",\n      username: "",\n      loginFields: [],\n      isDisabled: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    this.$nextTick(function () {\n      _this.loginFields = _this.$refs.loginForm.querySelectorAll(".input-unit");\n      AutoFocusService["default"].triggerAutoFocus();\n    });\n  },\n  watch: {\n    password: function password(val, oldVal) {\n      this.resetError();\n    },\n    username: function username(val, oldVal) {\n      this.resetError();\n    }\n  },\n  methods: {\n    /**\n     * Open the login modal\n     */\n    showLogin: function showLogin() {\n      ModalService["default"].findModal(document.getElementById(this.modalElement)).show();\n    },\n    validateLogin: function validateLogin() {\n      var _this2 = this;\n      ValidationService["default"].validate($("#login-form-" + this._uid)).done(function () {\n        _this2.sendLogin();\n      }).fail(function (invalidFields) {\n        ValidationService["default"].markInvalidFields(invalidFields, "error");\n      });\n    },\n    /**\n     * Send the login data\n     */\n    sendLogin: function sendLogin() {\n      var _this3 = this;\n      this.isDisabled = true;\n      ApiService["default"].post("/rest/io/customer/login", {\n        email: this.username,\n        password: this.password\n      }, {\n        supressNotifications: true\n      }).done(function (response) {\n        ApiService["default"].setToken(response);\n        NotificationService["default"].success(_this3.$translate("Ceres::Template.loginSuccessful")).closeAfter(3000);\n        if (_this3.backlink !== null && _this3.backlink) {\n          location.assign(decodeURIComponent(_this3.backlink));\n        } else if (_this3.hasToForward) {\n          location.assign(location.origin);\n        } else {\n          location.reload();\n        }\n      }).fail(function (response) {\n        _this3.isDisabled = false;\n        switch (response.error.code) {\n          case 401:\n            _this3.loginFields.forEach(function (element) {\n              return element.classList.add("has-login-error");\n            });\n            var translationKey = "Ceres::Template.loginFailed";\n            if (response.error.message.length > 0 && response.error.message === "user is blocked") {\n              translationKey = "Ceres::Template.loginBlocked";\n            }\n            NotificationService["default"].error(_this3.$translate(translationKey)).closeAfter(10000);\n            break;\n          default:\n            return;\n        }\n      });\n    },\n    showResetPwdView: function showResetPwdView() {\n      var _this4 = this;\n      this.resetError();\n      this.$store.dispatch("loadComponent", "forgot-password-modal");\n      Vue.nextTick(function () {\n        var modalDOM = document.querySelector(\'#resetPwd\');\n        var modalVue = (0,utils/* getContainingComponent */.tI)(modalDOM);\n        modalVue.$data.username = _this4.username;\n        var showModal = function showModal() {\n          return ModalService["default"].findModal(modalDOM).show();\n        };\n        if (_this4.modalElement) {\n          ModalService["default"].findModal(document.getElementById(_this4.modalElement)).hide().then(showModal);\n        } else {\n          showModal();\n        }\n      });\n    },\n    resetError: function resetError() {\n      this.loginFields.forEach(function (element) {\n        return element.classList.remove("has-login-error");\n      });\n      ValidationService["default"].unmarkAllFields("#login-form-" + this._uid);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/Login.vue?vue&type=script&lang=js&\n /* harmony default export */ var login_Loginvue_type_script_lang_js_ = (Loginvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/customer/login/Login.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  login_Loginvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var Login = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNBO01BRUE7TUFFQW9DLHlCQUNBO1FBQ0E7UUFDQTtRQUVBQztRQUVBO1VBQUE7UUFBQTtRQUVBLHlCQUNBO1VBQ0FaLGlDQUNBYSwrQ0FDQUMsT0FDQUM7UUFDQSxPQUVBO1VBQ0FDO1FBQ0E7TUFDQTtJQUNBO0lBRUFDLGtDQUNBO01BQ0E7UUFBQTtNQUFBO01BQ0FoQiw0Q0FBQUE7SUFDQTtFQUNBO0FBQ0EsQ0FBQyxFOztBQ2pOdU4sQ0FBQyx3RUFBZSw2QkFBRyxFQUFDLEM7Ozs7QUNBeEo7QUFDM0I7QUFDTDs7O0FBR3BEO0FBQ0EsQ0FBeUc7QUFDekcsZ0JBQWdCLHNDQUFVO0FBQzFCLEVBQUUsbUNBQU07QUFDUixFQUFFLE1BQU07QUFDUixFQUFFLGVBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDBDQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQ2VyZXMvLi9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2N1c3RvbWVyL2xvZ2luL0xvZ2luLnZ1ZT9jMmZmIiwid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9sb2dpbi9Mb2dpbi52dWU/OGQ0NSIsIndlYnBhY2s6Ly9DZXJlcy9yZXNvdXJjZXMvanMvc3JjL2FwcC9jb21wb25lbnRzL2N1c3RvbWVyL2xvZ2luL0xvZ2luLnZ1ZT85MmZmIiwid2VicGFjazovL0NlcmVzLy4vcmVzb3VyY2VzL2pzL3NyYy9hcHAvY29tcG9uZW50cy9jdXN0b21lci9sb2dpbi9Mb2dpbi52dWU/MTJjZSIsIndlYnBhY2s6Ly9DZXJlcy8uL3Jlc291cmNlcy9qcy9zcmMvYXBwL2NvbXBvbmVudHMvY3VzdG9tZXIvbG9naW4vTG9naW4udnVlPzFlNWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgdmFyIF92bSA9IHRoaXMsXG4gICAgX2MgPSBfdm0uX3NlbGYuX2NcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibG9naW4tcHdkLXJlc2V0XCIgfSwgW1xuICAgIF9jKFxuICAgICAgXCJmb3JtXCIsXG4gICAgICB7XG4gICAgICAgIHJlZjogXCJsb2dpbkZvcm1cIixcbiAgICAgICAgYXR0cnM6IHsgaWQ6IFwibG9naW4tZm9ybS1cIiArIF92bS5fdWlkLCBtZXRob2Q6IFwicG9zdFwiIH0sXG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IGNsYXNzOiB7IFwibW9kYWwtYm9keVwiOiBfdm0ubW9kYWxFbGVtZW50IH0gfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicm93XCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb2wtMTJcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiaW5wdXQtdW5pdFwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgXCJkYXRhLXZhbGlkYXRlXCI6IFwibWFpbFwiIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlczogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6IFwidi1tb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS51c2VybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246IFwidXNlcm5hbWVcIixcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS10ZXN0aW5nXCI6IFwiZW1haWwtbG9naW5cIixcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImVtYWlsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogXCJlbWFpbFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGlkOiBcImVtYWlsXCIgKyBfdm0uX3VpZCxcbiAgICAgICAgICAgICAgICAgICAgICBcImRhdGEtYXV0b2ZvY3VzXCI6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0udXNlcm5hbWUgfSxcbiAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS51c2VybmFtZSA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogXCJlbWFpbFwiICsgX3ZtLl91aWQgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5FbWFpbFwiKSkgKyBcIipcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJlcnJvci1tc2dcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgICAgICBfdm0uJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5sb2dpbkVudGVyQ29uZmlybUVtYWlsXCIpXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbC0xMlwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJpbnB1dC11bml0XCIsXG4gICAgICAgICAgICAgICAgICBjbGFzczogeyBcIm5vLWJvdHRvbVwiOiBfdm0ubW9kYWxFbGVtZW50IH0sXG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBcImRhdGEtdmFsaWRhdGVcIjogXCJ0ZXh0XCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLnBhc3N3b3JkLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogXCJwYXNzd29yZFwiLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJkYXRhLXRlc3RpbmdcIjogXCJwYXNzd29yZC1sb2dpblwiLFxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcInBhc3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlOiBcImN1cnJlbnQtcGFzc3dvcmRcIixcbiAgICAgICAgICAgICAgICAgICAgICBpZDogXCJwYXNzd29yZFwiICsgX3ZtLl91aWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ucGFzc3dvcmQgfSxcbiAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRldmVudC50YXJnZXQuY29tcG9zaW5nKSByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5wYXNzd29yZCA9ICRldmVudC50YXJnZXQudmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXCJsYWJlbFwiLCB7IGF0dHJzOiB7IGZvcjogXCJwYXNzd29yZFwiICsgX3ZtLl91aWQgfSB9LCBbXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5QYXNzd29yZFwiKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIqXCJcbiAgICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiZXJyb3ItbXNnXCIgfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5sb2dpbkVtcHR5UGFzc3dvcmRcIikpXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICBdKSxcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY2xhc3M6IHtcbiAgICAgICAgICAgICAgXCJtb2RhbC1mb290ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW5cIjogX3ZtLm1vZGFsRWxlbWVudCxcbiAgICAgICAgICAgICAgcm93OiAhX3ZtLm1vZGFsRWxlbWVudCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IGNsYXNzOiB7IFwiY29sLTcgY29sLXNtLTRcIjogIV92bS5tb2RhbEVsZW1lbnQgfSB9LCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInNtYWxsIHRleHQtYXBwZWFyYW5jZVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogXCJqYXZhc2NyaXB0OnZvaWQoMClcIiB9LFxuICAgICAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5zaG93UmVzZXRQd2RWaWV3IH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uJHRyYW5zbGF0ZShcIkNlcmVzOjpUZW1wbGF0ZS5sb2dpbkZvcmdvdFBhc3N3b3JkXCIpXG4gICAgICAgICAgICAgICAgICAgICkgKyBcIj9cIlxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgeyBjbGFzczogeyBcImNvbC01IGNvbC1zbS04IHRleHQtc20tcmlnaHRcIjogIV92bS5tb2RhbEVsZW1lbnQgfSB9LFxuICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgX3ZtLl90KFwiZXh0ZW5kLW92ZXJsYXktYnV0dG9uc1wiKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1hcHBlYXJhbmNlIGJ0bi1tZWRpdW1cIixcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcbiAgICAgICAgICAgICAgICAgICAgICB7IFwiZmxvYXQtcmlnaHRcIjogIV92bS5tb2RhbEVsZW1lbnQgfSxcbiAgICAgICAgICAgICAgICAgICAgICBfdm0uYnV0dG9uU2l6ZUNsYXNzLFxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICAgIFwiZGF0YS10ZXN0aW5nXCI6IFwic3VibWl0LWxvZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IF92bS5pc0Rpc2FibGVkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS52YWxpZGF0ZUxvZ2luLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFxuICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgICAgICBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5cIikpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXFxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfYyhcImljb25cIiwge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGljb246IFwidXNlclwiLCBsb2FkaW5nOiBfdm0uaXNEaXNhYmxlZCB9LFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgKSxcbiAgICAgICAgICBdXG4gICAgICAgICksXG4gICAgICBdXG4gICAgKSxcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/cnVsZVNldFsxXS5ydWxlc1syXSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ2luLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mNjZlODZkNCZcIiIsIjx0ZW1wbGF0ZT5cbiAgICA8ZGl2IGNsYXNzPVwibG9naW4tcHdkLXJlc2V0XCI+XG4gICAgICAgIDxmb3JtIHJlZj1cImxvZ2luRm9ybVwiIDppZD1cIidsb2dpbi1mb3JtLScgKyBfdWlkXCIgbWV0aG9kPVwicG9zdFwiPlxuICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJ7J21vZGFsLWJvZHknOiBtb2RhbEVsZW1lbnR9XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtdW5pdFwiIGRhdGEtdmFsaWRhdGU9XCJtYWlsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtdGVzdGluZz1cImVtYWlsLWxvZ2luXCIgdHlwZT1cImVtYWlsXCIgbmFtZT1cImVtYWlsXCIgYXV0b2NvbXBsZXRlPVwiZW1haWxcIiA6aWQ9XCInZW1haWwnICsgX3VpZFwiIHYtbW9kZWw9XCJ1c2VybmFtZVwiIGRhdGEtYXV0b2ZvY3VzPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCA6Zm9yPVwiJ2VtYWlsJyArIF91aWRcIj57eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLmxvZ2luRW1haWxcIikgfX0qPC9sYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvci1tc2dcIj57eyAkdHJhbnNsYXRlKFwiQ2VyZXM6OlRlbXBsYXRlLmxvZ2luRW50ZXJDb25maXJtRW1haWxcIikgfX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTEyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtdW5pdFwiIDpjbGFzcz1cInsnbm8tYm90dG9tJzogbW9kYWxFbGVtZW50fVwiIGRhdGEtdmFsaWRhdGU9XCJ0ZXh0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGRhdGEtdGVzdGluZz1cInBhc3N3b3JkLWxvZ2luXCIgdHlwZT1cInBhc3N3b3JkXCIgbmFtZT1cInBhc3N3b3JkXCIgYXV0b2NvbXBsZXRlPVwiY3VycmVudC1wYXNzd29yZFwiIDppZD1cIidwYXNzd29yZCcgKyBfdWlkXCIgdi1tb2RlbD1cInBhc3N3b3JkXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIDpmb3I9XCIncGFzc3dvcmQnICsgX3VpZFwiPnt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5QYXNzd29yZFwiKSB9fSo8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yLW1zZ1wiPnt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5FbXB0eVBhc3N3b3JkXCIpIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJ7J21vZGFsLWZvb3RlciBqdXN0aWZ5LWNvbnRlbnQtYmV0d2Vlbic6IG1vZGFsRWxlbWVudCwgJ3Jvdyc6ICFtb2RhbEVsZW1lbnR9XCI+XG4gICAgICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJ7J2NvbC03IGNvbC1zbS00JzogIW1vZGFsRWxlbWVudH1cIj5cbiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cImphdmFzY3JpcHQ6dm9pZCgwKVwiIEBjbGljaz1cInNob3dSZXNldFB3ZFZpZXdcIiBjbGFzcz1cInNtYWxsIHRleHQtYXBwZWFyYW5jZVwiPnt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5Gb3Jnb3RQYXNzd29yZFwiKSB9fT88L2E+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiA6Y2xhc3M9XCJ7J2NvbC01IGNvbC1zbS04IHRleHQtc20tcmlnaHQnOiAhbW9kYWxFbGVtZW50fVwiPlxuICAgICAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiZXh0ZW5kLW92ZXJsYXktYnV0dG9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBkYXRhLXRlc3Rpbmc9XCJzdWJtaXQtbG9naW5cIiBAY2xpY2sucHJldmVudD1cInZhbGlkYXRlTG9naW5cIiA6ZGlzYWJsZWQ9XCJpc0Rpc2FibGVkXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnkgYnRuLWFwcGVhcmFuY2UgYnRuLW1lZGl1bVwiIDpjbGFzcz1cIlt7J2Zsb2F0LXJpZ2h0JzogIW1vZGFsRWxlbWVudH0sIGJ1dHRvblNpemVDbGFzc11cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt7ICR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5cIikgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpY29uIGljb249XCJ1c2VyXCIgOmxvYWRpbmc9XCJpc0Rpc2FibGVkXCI+PC9pY29uPlxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Zvcm0+XG4gICAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c2NyaXB0PlxuaW1wb3J0IHsgQnV0dG9uU2l6ZVByb3BlcnR5TWl4aW4gfSBmcm9tIFwiLi4vLi4vLi4vbWl4aW5zL2J1dHRvblNpemVQcm9wZXJ0eS5taXhpblwiO1xuXG5pbXBvcnQgQXBpU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZXMvQXBpU2VydmljZVwiO1xuaW1wb3J0IE5vdGlmaWNhdGlvblNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL05vdGlmaWNhdGlvblNlcnZpY2VcIjtcbmltcG9ydCBNb2RhbFNlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL01vZGFsU2VydmljZVwiO1xuaW1wb3J0IEF1dG9Gb2N1c1NlcnZpY2UgZnJvbSBcIi4uLy4uLy4uL3NlcnZpY2VzL0F1dG9Gb2N1c1NlcnZpY2VcIjtcbmltcG9ydCBWYWxpZGF0aW9uU2VydmljZSBmcm9tIFwiLi4vLi4vLi4vc2VydmljZXMvVmFsaWRhdGlvblNlcnZpY2VcIjtcbmltcG9ydCB7Z2V0Q29udGFpbmluZ0NvbXBvbmVudCwgaXNOdWxsT3JVbmRlZmluZWR9IGZyb20gXCIuLi8uLi8uLi9oZWxwZXIvdXRpbHNcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIG1peGluczogW0J1dHRvblNpemVQcm9wZXJ0eU1peGluXSxcblxuICAgIHByb3BzOiB7XG4gICAgICAgIGJhY2tsaW5rOiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgICAgfSxcbiAgICAgICAgbW9kYWxFbGVtZW50OiB7XG4gICAgICAgICAgICB0eXBlOiBTdHJpbmdcbiAgICAgICAgfSxcbiAgICAgICAgaGFzVG9Gb3J3YXJkOlxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBkYXRhKClcbiAgICB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgICAgICAgIHVzZXJuYW1lOiBcIlwiLFxuICAgICAgICAgICAgbG9naW5GaWVsZHM6IFtdLFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgbW91bnRlZCgpXG4gICAge1xuICAgICAgICB0aGlzLiRuZXh0VGljaygoKSA9PlxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvZ2luRmllbGRzID0gdGhpcy4kcmVmcy5sb2dpbkZvcm0ucXVlcnlTZWxlY3RvckFsbChcIi5pbnB1dC11bml0XCIpO1xuXG4gICAgICAgICAgICBBdXRvRm9jdXNTZXJ2aWNlLnRyaWdnZXJBdXRvRm9jdXMoKTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIHdhdGNoOlxuICAgIHtcbiAgICAgICAgcGFzc3dvcmQodmFsLCBvbGRWYWwpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRFcnJvcigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVzZXJuYW1lKHZhbCwgb2xkVmFsKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0RXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOlxuICAgIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9wZW4gdGhlIGxvZ2luIG1vZGFsXG4gICAgICAgICAqL1xuICAgICAgICBzaG93TG9naW4oKVxuICAgICAgICB7XG4gICAgICAgICAgICBNb2RhbFNlcnZpY2UuZmluZE1vZGFsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubW9kYWxFbGVtZW50KSkuc2hvdygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHZhbGlkYXRlTG9naW4oKVxuICAgICAgICB7XG4gICAgICAgICAgICBWYWxpZGF0aW9uU2VydmljZS52YWxpZGF0ZSgkKFwiI2xvZ2luLWZvcm0tXCIgKyB0aGlzLl91aWQpKVxuICAgICAgICAgICAgICAgIC5kb25lKCgpID0+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbmRMb2dpbigpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZhaWwoaW52YWxpZEZpZWxkcyA9PlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgVmFsaWRhdGlvblNlcnZpY2UubWFya0ludmFsaWRGaWVsZHMoaW52YWxpZEZpZWxkcywgXCJlcnJvclwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU2VuZCB0aGUgbG9naW4gZGF0YVxuICAgICAgICAgKi9cbiAgICAgICAgc2VuZExvZ2luKClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5pc0Rpc2FibGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgQXBpU2VydmljZS5wb3N0KFwiL3Jlc3QvaW8vY3VzdG9tZXIvbG9naW5cIiwgeyBlbWFpbDogdGhpcy51c2VybmFtZSwgcGFzc3dvcmQ6IHRoaXMucGFzc3dvcmQgfSwgeyBzdXByZXNzTm90aWZpY2F0aW9uczogdHJ1ZSB9KVxuICAgICAgICAgICAgICAgIC5kb25lKHJlc3BvbnNlID0+XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBBcGlTZXJ2aWNlLnNldFRva2VuKHJlc3BvbnNlKTtcblxuICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLnN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiR0cmFuc2xhdGUoXCJDZXJlczo6VGVtcGxhdGUubG9naW5TdWNjZXNzZnVsXCIpXG4gICAgICAgICAgICAgICAgICAgICkuY2xvc2VBZnRlcigzMDAwKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5iYWNrbGluayAhPT0gbnVsbCAmJiB0aGlzLmJhY2tsaW5rKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5hc3NpZ24oZGVjb2RlVVJJQ29tcG9uZW50KHRoaXMuYmFja2xpbmspKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmhhc1RvRm9yd2FyZClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uYXNzaWduKGxvY2F0aW9uLm9yaWdpbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZhaWwocmVzcG9uc2UgPT5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNEaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzcG9uc2UuZXJyb3IuY29kZSlcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDE6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dpbkZpZWxkcy5mb3JFYWNoKGVsZW1lbnQgPT4gZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaGFzLWxvZ2luLWVycm9yXCIpKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0cmFuc2xhdGlvbktleSA9IFwiQ2VyZXM6OlRlbXBsYXRlLmxvZ2luRmFpbGVkXCI7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IubWVzc2FnZS5sZW5ndGggPiAwICYmIHJlc3BvbnNlLmVycm9yLm1lc3NhZ2UgPT09IFwidXNlciBpcyBibG9ja2VkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbktleSA9IFwiQ2VyZXM6OlRlbXBsYXRlLmxvZ2luQmxvY2tlZFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb3RpZmljYXRpb25TZXJ2aWNlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiR0cmFuc2xhdGUodHJhbnNsYXRpb25LZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS5jbG9zZUFmdGVyKDEwMDAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2hvd1Jlc2V0UHdkVmlldygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRFcnJvcigpO1xuXG4gICAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChcImxvYWRDb21wb25lbnRcIiwgXCJmb3Jnb3QtcGFzc3dvcmQtbW9kYWxcIik7XG5cbiAgICAgICAgICAgIFZ1ZS5uZXh0VGljaygoKSA9PlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxldCBtb2RhbERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyZXNldFB3ZCcpO1xuICAgICAgICAgICAgICAgIGxldCBtb2RhbFZ1ZSA9IGdldENvbnRhaW5pbmdDb21wb25lbnQobW9kYWxET00pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWxWdWUuJGRhdGEudXNlcm5hbWUgPSB0aGlzLnVzZXJuYW1lO1xuXG4gICAgICAgICAgICAgICAgbGV0IHNob3dNb2RhbCA9ICgpID0+IE1vZGFsU2VydmljZS5maW5kTW9kYWwobW9kYWxET00pLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGlmKHRoaXMubW9kYWxFbGVtZW50KVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgTW9kYWxTZXJ2aWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZE1vZGFsKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubW9kYWxFbGVtZW50KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKHNob3dNb2RhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHNob3dNb2RhbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0RXJyb3IoKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLmxvZ2luRmllbGRzLmZvckVhY2goIGVsZW1lbnQgPT4gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaGFzLWxvZ2luLWVycm9yXCIpKTtcbiAgICAgICAgICAgIFZhbGlkYXRpb25TZXJ2aWNlLnVubWFya0FsbEZpZWxkcyhcIiNsb2dpbi1mb3JtLVwiICsgdGhpcy5fdWlkKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ2luLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0yLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xvZ2luLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTG9naW4udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWY2NmU4NmQ0JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xvZ2luLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTG9naW4udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwibmFtZXMiOlsicmVuZGVyIiwiX3ZtIiwiX2MiLCJfc2VsZiIsInN0YXRpY0NsYXNzIiwicmVmIiwiYXR0cnMiLCJpZCIsIl91aWQiLCJtZXRob2QiLCJjbGFzcyIsIm1vZGFsRWxlbWVudCIsImRpcmVjdGl2ZXMiLCJuYW1lIiwicmF3TmFtZSIsInZhbHVlIiwidXNlcm5hbWUiLCJleHByZXNzaW9uIiwidHlwZSIsImF1dG9jb21wbGV0ZSIsImRvbVByb3BzIiwib24iLCJpbnB1dCIsIiRldmVudCIsInRhcmdldCIsImNvbXBvc2luZyIsIl92IiwiZm9yIiwiX3MiLCIkdHJhbnNsYXRlIiwicGFzc3dvcmQiLCJyb3ciLCJocmVmIiwiY2xpY2siLCJzaG93UmVzZXRQd2RWaWV3IiwiX3QiLCJidXR0b25TaXplQ2xhc3MiLCJkaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJwcmV2ZW50RGVmYXVsdCIsInZhbGlkYXRlTG9naW4iLCJhcHBseSIsImFyZ3VtZW50cyIsImljb24iLCJsb2FkaW5nIiwic3RhdGljUmVuZGVyRm5zIiwiX3dpdGhTdHJpcHBlZCIsIm1peGlucyIsInByb3BzIiwiYmFja2xpbmsiLCJoYXNUb0ZvcndhcmQiLCJkZWZhdWx0IiwiZGF0YSIsImxvZ2luRmllbGRzIiwibW91bnRlZCIsIkF1dG9Gb2N1c1NlcnZpY2UiLCJ3YXRjaCIsIm1ldGhvZHMiLCJzaG93TG9naW4iLCJNb2RhbFNlcnZpY2UiLCJWYWxpZGF0aW9uU2VydmljZSIsImRvbmUiLCJmYWlsIiwic2VuZExvZ2luIiwiQXBpU2VydmljZSIsImVtYWlsIiwic3VwcmVzc05vdGlmaWNhdGlvbnMiLCJOb3RpZmljYXRpb25TZXJ2aWNlIiwibG9jYXRpb24iLCJ0cmFuc2xhdGlvbktleSIsIlZ1ZSIsIm1vZGFsVnVlIiwiZmluZE1vZGFsIiwiaGlkZSIsInRoZW4iLCJzaG93TW9kYWwiLCJyZXNldEVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5355\n')}}]);