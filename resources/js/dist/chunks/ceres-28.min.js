"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[28],{4683:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ OrderPropertyList; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyList.vue?vue&type=template&id=bd598d7e&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.renderOrderPropertyList ? _c("div", {\n    staticClass: "order-property-slider mb-3"\n  }, [_c("div", {\n    staticClass: "order-property-slider-inner",\n    style: {\n      transform: "translateX(-" + _vm.activeSlide * 100 + "%)"\n    }\n  }, _vm._l(_vm.sortedGroupedProperties, function (propertyGroup, index) {\n    return _c("div", {\n      key: index,\n      class: {\n        active: index === _vm.activeSlide\n      }\n    }, [_c("order-property-list-group", {\n      key: propertyGroup.id,\n      attrs: {\n        "padding-classes": _vm.paddingClasses,\n        "padding-inline-styles": _vm.paddingInlineStyles,\n        "property-group": propertyGroup\n      }\n    })], 1);\n  }), 0), _vm._v(" "), _vm.sortedGroupedProperties.length > 1 ? _c("div", {\n    staticClass: "order-property-slider-controls",\n    class: _vm.paddingClasses,\n    style: _vm.paddingInlineStyles\n  }, [_c("div", {\n    staticClass: "btn shadow-none",\n    class: {\n      "btn-primary": _vm.activeSlide > 0,\n      "btn-secondary disabled": _vm.activeSlide === 0\n    },\n    attrs: {\n      tabindex: "0",\n      "data-testing": "order-property-previous-slide"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.slideTo(_vm.activeSlide - 1);\n      }\n    }\n  }, [_c("span", {\n    staticClass: "fa fa-chevron-left"\n  })]), _vm._v(" "), _c("div", {\n    staticClass: "slider-nav"\n  }, _vm._l(_vm.sortedGroupedProperties, function (propertyGroup, index) {\n    return _c("span", {\n      directives: [{\n        name: "tooltip",\n        rawName: "v-tooltip"\n      }],\n      key: index,\n      class: {\n        active: index === _vm.activeSlide,\n        highlight: !_vm.touchedSlides[index],\n        error: propertyGroup.hasError\n      },\n      attrs: {\n        "data-toggle": "tooltip",\n        "data-placement": "top",\n        title: propertyGroup.group ? propertyGroup.group.names.name : _vm.$translate("Ceres::Template.singleItemPropertiesWithoutGroup")\n      },\n      on: {\n        click: function click($event) {\n          return _vm.slideTo(index);\n        }\n      }\n    });\n  }), 0), _vm._v(" "), _c("div", {\n    staticClass: "btn float-right shadow-none",\n    class: {\n      "btn-primary": _vm.activeSlide < _vm.sortedGroupedProperties.length - 1,\n      "btn-secondary disabled": _vm.activeSlide >= _vm.sortedGroupedProperties.length - 1\n    },\n    attrs: {\n      tabindex: "0",\n      "data-testing": "order-property-next-slide"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.slideTo(_vm.activeSlide + 1);\n      }\n    }\n  }, [_c("span", {\n    staticClass: "fa fa-chevron-right"\n  })])]) : _vm._e()]) : _vm._e();\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyList.vue?vue&type=template&id=bd598d7e&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyListGroup.vue?vue&type=template&id=7ff791e6&\nvar OrderPropertyListGroupvue_type_template_id_7ff791e6_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_vm.isShownOnItemPageCount ? _c("div", {\n    staticClass: "pt-2"\n  }, [_vm.propertyGroup.group ? _c("div", {\n    class: _vm.paddingClasses,\n    style: _vm.paddingInlineStyles\n  }, [_c("div", {\n    staticClass: "h4"\n  }, [_vm._v("\\n                " + _vm._s(_vm.propertyGroup.group.names.name) + ":\\n            ")]), _vm._v(" "), _c("p", {\n    staticClass: "text-muted text-wrap"\n  }, [_vm._v("\\n                " + _vm._s(_vm.propertyGroup.group.names.description) + "\\n            ")])]) : _vm._e(), _vm._v(" "), _vm._l(_vm.propertyGroup.properties, function (property) {\n    return _c("div", {\n      key: property.id,\n      class: _vm.paddingClasses,\n      style: _vm.paddingInlineStyles\n    }, [property.isShownOnItemPage ? _c("order-property-list-item", {\n      attrs: {\n        group: _vm.propertyGroup.group,\n        property: property\n      }\n    }) : _vm._e()], 1);\n  })], 2) : _vm._e()]);\n};\nvar OrderPropertyListGroupvue_type_template_id_7ff791e6_staticRenderFns = [];\nOrderPropertyListGroupvue_type_template_id_7ff791e6_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListGroup.vue?vue&type=template&id=7ff791e6&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyListItem.vue?vue&type=template&id=43e0019d&\nvar OrderPropertyListItemvue_type_template_id_43e0019d_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "position-relative"\n  }, [_vm.inputType === "text" || _vm.inputType === "float" || _vm.inputType === "int" ? _c("div", {\n    staticClass: "input-unit order-property-input",\n    class: {\n      active: _vm.property.value,\n      error: _vm.hasError\n    },\n    attrs: {\n      "data-validate": "text"\n    }\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.inputValue,\n      expression: "inputValue"\n    }, {\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    attrs: {\n      type: "text",\n      "data-toggle": "tooltip",\n      title: _vm.property.names.description,\n      "data-testing": "order-property-input-" + _vm.inputType\n    },\n    domProps: {\n      value: _vm.inputValue\n    },\n    on: {\n      input: [function ($event) {\n        if ($event.target.composing) return;\n        _vm.inputValue = $event.target.value;\n      }, function ($event) {\n        return _vm.onInputValueChanged($event.target.value);\n      }]\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "d-flex"\n  }, [_c("span", {\n    staticClass: "text-truncate"\n  }, [_vm._v(_vm._s(_vm.property.names.name))]), _vm._v(" "), _c("strong", {\n    staticClass: "ml-1"\n  }, [_vm.surcharge > 0 ? [_vm._v("(" + _vm._s(_vm.inclOrPlus) + " " + _vm._s(_vm._f("currency")(_vm.surcharge)) + ")")] : _vm._e(), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.footnotes) + " " + _vm._s(_vm.requiredFootnotes))])], 2)])]) : _vm.inputType === "checkbox" || _vm.inputType === "radio" ? _c("div", {\n    staticClass: "form-check",\n    class: {\n      error: _vm.hasError\n    }\n  }, [_vm.inputType === "checkbox" && !(_vm.property.isRequired && _vm.property.isPreSelected) ? _c("input", {\n    staticClass: "form-check-input",\n    attrs: {\n      type: "checkbox",\n      name: _vm.group ? _vm.group.id : "check" + _vm._uid,\n      id: "check" + _vm._uid,\n      "data-testing": "order-property-input-checkbox"\n    },\n    domProps: {\n      value: _vm.property.id,\n      checked: _vm.property.value\n    },\n    on: {\n      change: function change($event) {\n        return _vm.onInputValueChanged($event.target.checked);\n      }\n    }\n  }) : _vm.inputType === "radio" ? _c("input", {\n    staticClass: "form-check-input",\n    attrs: {\n      type: "radio",\n      name: _vm.group ? _vm.group.id : "check" + _vm._uid,\n      id: "check" + _vm._uid,\n      "data-testing": "order-property-input-radio"\n    },\n    domProps: {\n      value: _vm.property.id,\n      checked: _vm.property.value\n    },\n    on: {\n      change: function change($event) {\n        return _vm.onInputValueChanged($event.target.value);\n      }\n    }\n  }) : _vm._e(), _vm._v(" "), _c("label", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "form-check-label text-appearance d-flex",\n    attrs: {\n      for: "check" + _vm._uid,\n      "data-toggle": "tooltip",\n      title: _vm.property.names.description,\n      "data-testing": "order-property-label-" + _vm.inputType\n    }\n  }, [_c("span", {\n    staticClass: "text-wrap"\n  }, [_vm._v(_vm._s(_vm.property.names.name))]), _vm._v(" "), _c("strong", {\n    staticClass: "ml-1"\n  }, [_vm.surcharge > 0 ? [_vm._v("(" + _vm._s(_vm.inclOrPlus) + " " + _vm._s(_vm._f("currency")(_vm.surcharge)) + ")")] : _vm._e(), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.footnotes) + " " + _vm._s(_vm.requiredFootnotes))])], 2)])]) : _vm.inputType === "selection" ? _c("div", {\n    class: {\n      "d-flex": _vm.selectedDescription\n    }\n  }, [_c("div", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "input-unit order-property-input",\n    class: {\n      active: _vm.property.value,\n      error: _vm.hasError\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      title: _vm.property.names.description\n    }\n  }, [_c("select", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.selectionValue,\n      expression: "selectionValue"\n    }],\n    staticClass: "custom-select",\n    attrs: {\n      id: "order-property-input-select",\n      "data-testing": "order-property-selection"\n    },\n    on: {\n      change: [function ($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = "_value" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.selectionValue = $event.target.multiple ? $$selectedVal : $$selectedVal[0];\n      }, function ($event) {\n        return _vm.onInputValueChanged($event.target.value);\n      }]\n    }\n  }, [_c("option", {\n    domProps: {\n      selected: true,\n      value: null\n    }\n  }, [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemPleaseSelect")))]), _vm._v(" "), _vm._l(_vm.property.selectionValues, function (value, id) {\n    return _c("option", {\n      key: id,\n      attrs: {\n        "data-testing": "order-property-selection-option"\n      },\n      domProps: {\n        selected: _vm.property.id === id,\n        value: id\n      }\n    }, [_vm._v(_vm._s(value.name))]);\n  })], 2), _vm._v(" "), _c("label", {\n    staticClass: "d-flex w-100",\n    attrs: {\n      for: "order-property-input-select"\n    }\n  }, [_c("span", {\n    staticClass: "text-truncate"\n  }, [_vm._v(_vm._s(_vm.property.names.name))]), _vm._v(" "), _c("strong", {\n    staticClass: "ml-1"\n  }, [_vm.surcharge > 0 ? [_vm._v("(" + _vm._s(_vm.inclOrPlus) + " " + _vm._s(_vm._f("currency")(_vm.surcharge)) + ")")] : _vm._e(), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.footnotes) + " " + _vm._s(_vm.requiredFootnotes))])], 2)])]), _vm._v(" "), _vm.selectedDescription ? _c("popper", {\n    staticClass: "order-property-selection-info-popper",\n    attrs: {\n      placement: "bottom"\n    },\n    scopedSlots: _vm._u([{\n      key: "handle",\n      fn: function fn() {\n        return [_c("button", {\n          staticClass: "btn btn-icon btn-circle btn-default btn-appearance font-weight-bold"\n        }, [_vm._v("?")])];\n      },\n      proxy: true\n    }, {\n      key: "content",\n      fn: function fn() {\n        return [_vm._v("\\n                " + _vm._s(_vm.selectedDescription) + "\\n            ")];\n      },\n      proxy: true\n    }], null, false, 2730731730)\n  }) : _vm._e()], 1) : _vm.inputType === "file" ? _c("div", {\n    staticClass: "d-flex"\n  }, [_c("label", {\n    directives: [{\n      name: "tooltip",\n      rawName: "v-tooltip"\n    }],\n    staticClass: "input-unit file-input order-property-input component-loading with-icon sending",\n    class: {\n      active: _vm.property.value,\n      "is-loading": _vm.waiting,\n      error: _vm.hasError\n    },\n    attrs: {\n      "data-toggle": "tooltip",\n      title: _vm.property.names.description\n    }\n  }, [_c("span", {\n    staticClass: "input-unit-preview",\n    class: {\n      disabled: _vm.waiting\n    }\n  }, [_vm._v(_vm._s(_vm.selectedFileName))]), _vm._v(" "), _c("span", {\n    staticClass: "input-unit-label d-flex"\n  }, [_c("span", {\n    staticClass: "text-truncate"\n  }, [_vm._v(_vm._s(_vm.property.names.name))]), _vm._v(" "), _c("strong", {\n    staticClass: "ml-1"\n  }, [_vm.surcharge > 0 ? [_vm._v("(" + _vm._s(_vm.inclOrPlus) + " " + _vm._s(_vm._f("currency")(_vm.surcharge)) + ")")] : _vm._e(), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.footnotes) + " " + _vm._s(_vm.requiredFootnotes))])], 2)]), _vm._v(" "), !_vm.selectedFile ? _c("span", {\n    staticClass: "input-unit-btn"\n  }, [_c("i", {\n    staticClass: "fa fa-ellipsis-h"\n  })]) : _c("span", {\n    staticClass: "input-unit-btn",\n    attrs: {\n      disabled: _vm.waiting\n    },\n    on: {\n      click: function click($event) {\n        $event.preventDefault();\n        return _vm.clearSelectedFile();\n      }\n    }\n  }, [_c("i", {\n    staticClass: "fa fa-times"\n  })]), _vm._v(" "), _c("input", {\n    ref: "fileInput",\n    attrs: {\n      disabled: _vm.waiting,\n      type: "file",\n      size: "50",\n      "data-testing": "order-property-input-file"\n    },\n    on: {\n      change: function change($event) {\n        return _vm.setPropertyFile($event);\n      }\n    }\n  })]), _vm._v(" "), _c("client-only", [_vm.isTouchDevice && _vm.property.names.description ? _c("popper", {\n    staticClass: "order-property-selection-info-popper",\n    attrs: {\n      placement: "bottom"\n    },\n    scopedSlots: _vm._u([{\n      key: "handle",\n      fn: function fn() {\n        return [_c("button", {\n          staticClass: "btn btn-icon btn-circle btn-default btn-appearance font-weight-bold"\n        }, [_vm._v("?")])];\n      },\n      proxy: true\n    }, {\n      key: "content",\n      fn: function fn() {\n        return [_vm._v("\\n                    " + _vm._s(_vm.property.names.description) + "\\n                ")];\n      },\n      proxy: true\n    }], null, false, 1618376136)\n  }) : _vm._e()], 1)], 1) : _vm._e(), _vm._v(" "), _c("client-only", [_vm.isTouchDevice && _vm.inputType !== "selection" && _vm.inputType !== "file" && _vm.property.names.description ? _c("popper", {\n    staticClass: "order-property-selection-info-popper position-absolute",\n    class: {\n      "checkbox-or-radio": _vm.inputType === "checkbox" || _vm.inputType === "radio"\n    },\n    attrs: {\n      placement: "bottom"\n    },\n    scopedSlots: _vm._u([{\n      key: "handle",\n      fn: function fn() {\n        return [_c("button", {\n          staticClass: "btn btn-icon btn-circle btn-default btn-appearance font-weight-bold"\n        }, [_vm._v("?")])];\n      },\n      proxy: true\n    }, {\n      key: "content",\n      fn: function fn() {\n        return [_vm._v("\\n                " + _vm._s(_vm.property.names.description) + "\\n            ")];\n      },\n      proxy: true\n    }], null, false, 1214237640)\n  }) : _vm._e()], 1)], 1);\n};\nvar OrderPropertyListItemvue_type_template_id_43e0019d_staticRenderFns = [];\nOrderPropertyListItemvue_type_template_id_43e0019d_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListItem.vue?vue&type=template&id=43e0019d&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(9413);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n// EXTERNAL MODULE: ./resources/js/src/app/services/TranslationService.js\nvar TranslationService = __webpack_require__(6698);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyListItem.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar ApiService = __webpack_require__(7653);\nvar NotificationService = __webpack_require__(1841);\n\n\n\n/* harmony default export */ var OrderPropertyListItemvue_type_script_lang_js_ = ({\n  name: "order-property-list-item",\n  props: {\n    group: Object,\n    property: Object\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      inputValue: "",\n      selectedFile: null,\n      waiting: false,\n      selectionValue: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    document.addEventListener("onVariationChanged", function (event) {\n      if (event.detail.itemId === _this.itemId) {\n        // clear type specific bindings\n        if (_this.property.valueType === "selection") {\n          _this.selectionValue = _this.property.value || null;\n        } else if (_this.property.valueType === "file") {\n          if (_this.property.value && _this.property.value.length) {\n            NotificationService.warn(TranslationService/* default.translate */.Z.translate("Ceres::Template.singleItemOrderPropertyFileHasReset", {\n              propertyName: _this.property.names.name\n            })).closeAfter(5000);\n          }\n          _this.clearSelectedFile();\n        } else {\n          _this.inputValue = _this.property.value || "";\n        }\n      }\n    });\n  },\n  computed: _objectSpread({\n    inputType: function inputType() {\n      var orderPropertyGroupingType = this.group ? this.group.orderPropertyGroupingType : null;\n      var valueType = this.property.valueType;\n      if (valueType === "empty") {\n        if (!orderPropertyGroupingType || orderPropertyGroupingType === "none" || orderPropertyGroupingType === "multi") {\n          return "checkbox";\n        }\n        return "radio";\n      }\n      return valueType;\n    },\n    selectedFileName: function selectedFileName() {\n      if (this.selectedFile) {\n        return this.selectedFile.name;\n      }\n      return "";\n    },\n    hasError: function hasError() {\n      var _this2 = this;\n      var isRequired = this.property.isRequired || App.config.item.requireOrderProperties;\n      if (isRequired && this.variationMarkInvalidProperties && this.inputType === "radio") {\n        return this.variationMissingProperties.find(function (property) {\n          return property.property.id === _this2.property.id;\n        });\n      }\n      return isRequired && this.variationMarkInvalidProperties && !this.property.value;\n    },\n    surcharge: function surcharge() {\n      return this.property.itemSurcharge || this.property.surcharge;\n    },\n    hasTax: function hasTax() {\n      return this.property.vatId !== "none" && this.property.vatId !== null;\n    },\n    inclOrPlus: function inclOrPlus() {\n      if (this.property.isShownAsAdditionalCosts || !this.hasTax) {\n        return this.$translate("Ceres::Template.basketPlusAbbr");\n      }\n      return this.$translate("Ceres::Template.basketIncludeAbbr");\n    },\n    footnotes: function footnotes() {\n      if (this.surcharge > 0) {\n        if (this.property.isRequired && !this.property.isPreSelected && this.hasTax) {\n          return this.$translate("Ceres::Template.singleItemFootnote12");\n        } else if (this.hasTax) {\n          return this.$translate("Ceres::Template.singleItemFootnote1");\n        }\n      }\n    },\n    requiredFootnotes: function requiredFootnotes() {\n      if (this.property.isRequired && !this.property.isPreSelected && !this.footnotes) {\n        return this.$translate("Ceres::Template.singleItemFootnote2");\n      }\n    },\n    selectedDescription: function selectedDescription() {\n      if (this.inputType !== "selection" || (0,utils/* isNullOrUndefined */.le)(this.selectionValue)) {\n        return null;\n      }\n      var selectedProperty = this.property.selectionValues[this.selectionValue];\n      return selectedProperty.description;\n    },\n    variationMissingProperties: function variationMissingProperties() {\n      return this.$store.getters["".concat(this.itemId, "/variationMissingProperties")];\n    },\n    variationMarkInvalidProperties: function variationMarkInvalidProperties() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationMarkInvalidProperties;\n    },\n    isTouchDevice: function isTouchDevice() {\n      return !App.isSSR ? document.body.classList.contains("touch") : false;\n    }\n  }, (0,vuex_esm/* mapState */.rn)({\n    isBasketLoading: function isBasketLoading(state) {\n      return state.basket.isBasketLoading;\n    }\n  })),\n  methods: _objectSpread({\n    onInputValueChanged: function onInputValueChanged(value) {\n      if (this.inputType === "int") {\n        value = this.validateInt(value);\n      } else if (this.inputType === "float") {\n        value = this.validateFloat(value);\n      } else if (this.inputType === "checkbox") {\n        if (!value) {\n          value = null;\n        }\n      } else if (this.inputType === "selection") {\n        if ((0,utils/* isNullOrUndefined */.le)(value) || value.length <= 0) {\n          value = null;\n        }\n      } else if (this.inputType === "text") {\n        if (value === "") {\n          value = null;\n        }\n      }\n      this.$store.commit("".concat(this.itemId, "/setVariationPropertySurcharges"), this.$store.getters["".concat(this.itemId, "/variationBasePrice")]);\n      this.setVariationOrderProperty({\n        propertyId: this.property.id,\n        value: value\n      });\n    },\n    validateInt: function validateInt(value) {\n      value = parseInt(value);\n      if (isNaN(value)) {\n        value = null;\n      }\n      this.inputValue = value;\n      return value;\n    },\n    validateFloat: function validateFloat(value) {\n      var lastChar = value.slice(-1);\n      var str = value.replace(App.decimalSeparator, ".");\n      var arr = str.split(".");\n      var toFixedLength = 0;\n      if (arr.length === 2) {\n        toFixedLength = arr[1].length;\n      }\n      value = parseFloat(str).toFixed(toFixedLength);\n      if (isNaN(value)) {\n        value = null;\n      } else {\n        if (lastChar === "." || lastChar === App.decimalSeparator) {\n          value += lastChar;\n        }\n        value = value.toString().replace(".", App.decimalSeparator);\n      }\n      this.inputValue = value;\n      return value;\n    },\n    setVariationOrderProperty: function setVariationOrderProperty(orderProperty) {\n      return this.$store.commit("".concat(this.itemId, "/setVariationOrderProperty"), orderProperty);\n    },\n    setPropertyFile: function setPropertyFile(event) {\n      if (event.target && event.target.files && event.target.files.length > 0) {\n        this.selectedFile = event.target.files[0];\n        this.uploadPropertyFile(this.selectedFile);\n      }\n    },\n    uploadPropertyFile: function uploadPropertyFile(file) {\n      var _this3 = this;\n      this.setIsBasketLoading(true);\n      this.waiting = true;\n      var fileData = new FormData();\n      fileData.append("fileData", file);\n      ApiService.post("/rest/io/order/property/file", fileData, {\n        processData: false,\n        contentType: false,\n        cache: false,\n        async: true,\n        timeout: 60000,\n        supressNotifications: true\n      }).done(function (response) {\n        _this3.setVariationOrderProperty({\n          propertyId: _this3.property.id,\n          value: response\n        });\n      }).fail(function (error) {\n        _this3.clearSelectedFile();\n        _this3._handleValidationErrors(error);\n      }).always(function (response) {\n        _this3.setIsBasketLoading(false);\n        _this3.waiting = false;\n      });\n    },\n    clearSelectedFile: function clearSelectedFile() {\n      this.selectedFile = null;\n      this.setVariationOrderProperty({\n        propertyId: this.property.id,\n        value: null\n      });\n      this.$refs.fileInput.value = "";\n    },\n    _handleValidationErrors: function _handleValidationErrors(error) {\n      if (error.hasOwnProperty("validation_errors")) {\n        for (var _i = 0, _Object$values = Object.values(error.validation_errors); _i < _Object$values.length; _i++) {\n          var err = _Object$values[_i];\n          NotificationService.error(err[0]);\n        }\n      }\n      if (error.error.message && error.error.message === "Post too large") {\n        NotificationService.error(this.$translate("Ceres::Template.errorPostTooLarge", {\n          maxSize: error.error.maxSize\n        }));\n      }\n    }\n  }, (0,vuex_esm/* mapMutations */.OI)(["setIsBasketLoading"]))\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListItem.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_OrderPropertyListItemvue_type_script_lang_js_ = (OrderPropertyListItemvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListItem.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_OrderPropertyListItemvue_type_script_lang_js_,\n  OrderPropertyListItemvue_type_template_id_43e0019d_render,\n  OrderPropertyListItemvue_type_template_id_43e0019d_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var OrderPropertyListItem = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyListGroup.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var OrderPropertyListGroupvue_type_script_lang_js_ = ({\n  name: "order-property-list-group",\n  components: {\n    OrderPropertyListItem: OrderPropertyListItem\n  },\n  props: {\n    paddingClasses: {\n      type: String,\n      default: null\n    },\n    paddingInlineStyles: {\n      type: String,\n      default: null\n    },\n    propertyGroup: Object\n  },\n  computed: {\n    isShownOnItemPageCount: function isShownOnItemPageCount() {\n      var properties = this.propertyGroup.properties.filter(function (property) {\n        return property.isShownOnItemPage;\n      });\n      return properties.length;\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListGroup.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_OrderPropertyListGroupvue_type_script_lang_js_ = (OrderPropertyListGroupvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyListGroup.vue\n\n\n\n\n\n/* normalize component */\n;\nvar OrderPropertyListGroup_component = (0,componentNormalizer/* default */.Z)(\n  item_OrderPropertyListGroupvue_type_script_lang_js_,\n  OrderPropertyListGroupvue_type_template_id_7ff791e6_render,\n  OrderPropertyListGroupvue_type_template_id_7ff791e6_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var OrderPropertyListGroup = (OrderPropertyListGroup_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/OrderPropertyList.vue?vue&type=script&lang=js&\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n/* harmony default export */ var OrderPropertyListvue_type_script_lang_js_ = ({\n  name: "order-property-list",\n  components: {\n    "order-property-list-group": OrderPropertyListGroup\n  },\n  props: {\n    paddingClasses: {\n      type: String,\n      default: null\n    },\n    paddingInlineStyles: {\n      type: String,\n      default: null\n    }\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  data: function data() {\n    return {\n      activeSlide: 0,\n      touchedSlides: {\n        0: true\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n    if (App.useVariationOrderProperties) {\n      // go to first side, because variation order properties could differ between variations\n      document.addEventListener("onVariationChanged", function () {\n        _this.activeSlide = 0;\n      });\n    }\n  },\n  computed: {\n    sortedGroupedProperties: function sortedGroupedProperties() {\n      var groupedProperties = JSON.parse(JSON.stringify(this.variationGroupedProperties));\n      var _iterator = _createForOfIteratorHelper(groupedProperties),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var group = _step.value;\n          this.sortGroupProperties(group);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this.getSortedGroups(groupedProperties);\n    },\n    missingPropertyGroupIds: function missingPropertyGroupIds() {\n      if (this.variationMarkInvalidProperties) {\n        return _toConsumableArray(new Set(this.variationMissingProperties.map(function (property) {\n          return property.group && property.group.id;\n        })));\n      }\n      return [];\n    },\n    variationGroupedProperties: function variationGroupedProperties() {\n      return this.$store.getters["".concat(this.itemId, "/variationGroupedProperties")];\n    },\n    renderOrderPropertyList: function renderOrderPropertyList() {\n      return this.variationGroupedProperties.length || App.isShopBuilder;\n    },\n    variationMissingProperties: function variationMissingProperties() {\n      return this.$store.getters["".concat(this.itemId, "/variationMissingProperties")];\n    },\n    variationMarkInvalidProperties: function variationMarkInvalidProperties() {\n      return this.$store.state.items[this.itemId] && this.$store.state.items[this.itemId].variationMarkInvalidProperties;\n    }\n  },\n  methods: {\n    sortGroupProperties: function sortGroupProperties(group) {\n      return group.properties.sort(function (prev, current) {\n        if (prev.position > current.position) {\n          return 1;\n        }\n        if (prev.position < current.position) {\n          return -1;\n        }\n        return 0;\n      });\n    },\n    getSortedGroups: function getSortedGroups(groups) {\n      var _iterator2 = _createForOfIteratorHelper(groups),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var group = _step2.value;\n          var lowestPosition = group.properties.reduce(function (prev, current) {\n            return prev.position < current.position ? prev : current;\n          });\n          group.lowestPosition = lowestPosition.position;\n          var groupId = group.group ? group.group.id : null;\n          if (this.variationMarkInvalidProperties && this.missingPropertyGroupIds.includes(groupId)) {\n            group.hasError = true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return groups.sort(function (prev, current) {\n        if (prev.lowestPosition > current.lowestPosition) {\n          return 1;\n        }\n        if (prev.lowestPosition < current.lowestPosition) {\n          return -1;\n        }\n        return 0;\n      });\n    },\n    slideTo: function slideTo(position) {\n      if (position >= 0 && position < this.sortedGroupedProperties.length) {\n        this.activeSlide = position;\n        this.touchedSlides[this.activeSlide] = true;\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyList.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_OrderPropertyListvue_type_script_lang_js_ = (OrderPropertyListvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/OrderPropertyList.vue\n\n\n\n\n\n/* normalize component */\n;\nvar OrderPropertyList_component = (0,componentNormalizer/* default */.Z)(\n  item_OrderPropertyListvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var OrderPropertyList = (OrderPropertyList_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4683\n')}}]);