"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[28],{3401:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ QuantityInput; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c("div", { staticClass: "qty-box d-flex h-100" }, [\n    _c("input", {\n      ref: "quantityInputField",\n      staticClass: "qty-input text-center",\n      attrs: {\n        type: "text",\n        disabled: _vm.waiting,\n        "aria-label": _vm.$translate("Ceres::Template.itemQuantityInput"),\n      },\n      domProps: { value: _vm.displayValue },\n      on: {\n        change: function ($event) {\n          return _vm.setValue($event.target.value)\n        },\n      },\n    }),\n    _vm._v(" "),\n    _c("div", { staticClass: "qty-btn-container d-flex flex-column" }, [\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "tooltip",\n              rawName: "v-tooltip",\n              value: _vm.isMaximum && _vm.compMax !== 0,\n              expression: "isMaximum && compMax !== 0",\n            },\n          ],\n          staticClass:\n            "btn qty-btn flex-fill d-flex justify-content-center p-0",\n          class: {\n            disabled: _vm.isMaximum || _vm.waiting,\n            "btn-appearance": _vm.useAppearance,\n          },\n          attrs: {\n            "data-toggle": "tooltip",\n            "data-placement": "top",\n            "data-testing": "quantity-btn-increase",\n            title: _vm.maximumHint,\n            "aria-label": _vm.$translate(\n              "Ceres::Template.itemQuantityInputIncrease"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.increaseValue()\n            },\n          },\n        },\n        [\n          _c("i", {\n            staticClass: "fa fa-plus default-float",\n            attrs: { "aria-hidden": "true" },\n          }),\n        ]\n      ),\n      _vm._v(" "),\n      _c(\n        "button",\n        {\n          directives: [\n            {\n              name: "tooltip",\n              rawName: "v-tooltip",\n              value: _vm.isMinimum && _vm.compMax !== 0,\n              expression: "isMinimum && compMax !== 0",\n            },\n          ],\n          staticClass:\n            "btn qty-btn flex-fill d-flex justify-content-center p-0",\n          class: {\n            disabled: _vm.isMinimum || _vm.waiting,\n            "btn-appearance": _vm.useAppearance,\n          },\n          attrs: {\n            "data-toggle": "tooltip",\n            "data-placement": "bottom",\n            "data-testing": "quantity-btn-decrease",\n            title: _vm.minimumHint,\n            "aria-label": _vm.$translate(\n              "Ceres::Template.itemQuantityInputDecrease"\n            ),\n          },\n          on: {\n            click: function ($event) {\n              return _vm.decreaseValue()\n            },\n          },\n        },\n        [\n          _c("i", {\n            staticClass: "fa fa-minus default-float",\n            attrs: { "aria-hidden": "true" },\n          }),\n        ]\n      ),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=template&id=24dfbc62&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/number.js\nvar number = __webpack_require__(4507);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/utils.js\nvar utils = __webpack_require__(1023);\n// EXTERNAL MODULE: ./resources/js/src/app/helper/debounce.js\nvar debounce = __webpack_require__(9233);\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(629);\n;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n/* harmony default export */ var QuantityInputvue_type_script_lang_js_ = ({\n    name: "quantity-input",\n\n    props: {\n        value: {\n            type: Number,\n            required: true\n        },\n        timeout: {\n            type: Number,\n            required: false,\n            default: 500\n        },\n        min: {\n            type: Number,\n            required: false,\n            default: 0\n        },\n        max: {\n            type: Number,\n            required: false\n        },\n        interval: {\n            type: Number,\n            required: false,\n            default: 1\n        },\n        waiting: {\n            type: Boolean,\n            required: false\n        },\n        variationId: {\n            type: Number,\n            required: false\n        },\n        useAppearance: Boolean\n    },\n\n    data()\n    {\n        return {\n            compValue:      this.value,\n            compMin:        this.min,\n            compMax:        this.max,\n            compInterval:   this.interval,\n            compDecimals:   0,\n            onValueChanged: null\n        };\n    },\n\n    created()\n    {\n        this.compInterval = (0,utils/* defaultValue */.LS)(this.compInterval, 1);\n        this.compInterval = this.compInterval === 0 ? 1 : this.compInterval;\n\n        const minDecimals = (0,number/* floatLength */.GQ)(this.min);\n        const intervalDecimals = (0,number/* floatLength */.GQ)(this.compInterval);\n\n        this.compDecimals = Math.max(minDecimals, intervalDecimals);\n\n        this.onValueChanged = (0,debounce/* debounce */.D)(() =>\n        {\n            this.$emit("quantity-change", this.compValue);\n        }, (0,utils/* defaultValue */.LS)(this.timeout, 500));\n\n        if (!(0,utils/* isNullOrUndefined */.le)(this.variationId))\n        {\n            this.fetchQuantityFromBasket();\n        }\n    },\n\n    computed:\n    {\n        variationBasketQuantity()\n        {\n            if ((0,utils/* isNullOrUndefined */.le)(this.variationId))\n            {\n                return 0;\n            }\n\n            if(this.itemSetVariationId <= 0 || this.variationId === this.itemSetVariationId)\n            {\n                const basketObject = this.$store.state.basket.items.find(variations => variations.variationId === this.variationId);\n\n                return basketObject ? basketObject.quantity : 0;\n            }\n\n            return 0;\n        },\n\n        isMinimum()\n        {\n            return (0,utils/* isDefined */.$K)(this.compMin) && (this.compValue - this.compInterval) < this.compMin;\n        },\n\n        isMaximum()\n        {\n            return (0,utils/* isDefined */.$K)(this.compMax) && (this.compValue + this.compInterval) > this.compMax;\n        },\n\n        minimumHint()\n        {\n            return this.$translate(\n                "Ceres::Template.singleItemQuantityMin",\n                {\n                    min: this.$options.filters.numberFormat(this.compMin)\n                }\n            );\n        },\n\n        maximumHint()\n        {\n            return this.$translate(\n                "Ceres::Template.singleItemQuantityMax",\n                {\n                    max: this.$options.filters.numberFormat(this.max)\n                }\n            );\n        },\n\n        displayValue()\n        {\n            return this.$options.filters.numberFormat(this.compValue);\n        },\n\n        itemSetVariationId()\n        {\n            if (this.$store.state.items.itemSetId > 0)\n            {\n                return this.$store.getters[`${this.$store.state.items.itemSetId}/currentItemVariation`].variation.id;\n            }\n\n            return 0;\n        },\n\n        ...(0,vuex_esm/* mapState */.rn)({\n            basketItems: state => state.basket.items\n        })\n    },\n\n    watch:\n    {\n        variationId(newValue)\n        {\n            if ((0,utils/* isDefined */.$K)(newValue))\n            {\n                this.fetchQuantityFromBasket();\n            }\n        },\n\n        basketItems:\n        {\n            handler(newValue, oldValue)\n            {\n                if ((0,utils/* isDefined */.$K)(this.variationId))\n                {\n                    this.fetchQuantityFromBasket();\n                }\n            },\n            deep: true\n        },\n\n        min(newValue)\n        {\n            this.compMin = newValue;\n            this.fetchQuantityFromBasket();\n        },\n\n        max(newValue)\n        {\n            this.compMax = newValue;\n            this.fetchQuantityFromBasket();\n        },\n\n        value(newValue, oldValue)\n        {\n            if (newValue !== oldValue)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        interval(newInterval)\n        {\n            this.compInterval = (0,utils/* defaultValue */.LS)(newInterval, 1)\n        }\n    },\n\n    methods:\n    {\n        increaseValue()\n        {\n            const newValue = (0,number/* formatFloat */.$1)(this.compValue + this.compInterval, this.compDecimals);\n\n            if (((0,utils/* isNullOrUndefined */.le)(this.compMax) || newValue <= this.compMax) && !this.waiting)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        decreaseValue()\n        {\n            const newValue = (0,number/* formatFloat */.$1)(this.compValue - this.compInterval, this.compDecimals);\n\n            if (((0,utils/* isNullOrUndefined */.le)(this.compMin) || newValue >= this.compMin) && !this.waiting)\n            {\n                this.setValue(newValue);\n            }\n        },\n\n        setValue(value)\n        {\n            // consider the configured decimal seperator (if the input is typed in the input field)\n            if (typeof value === "string")\n            {\n                value = value.replace(App.decimalSeparator || ",", ".");\n            }\n\n            value = parseFloat(value);\n            if (isNaN(value))\n            {\n                value = (0,utils/* defaultValue */.LS)(this.compMin, 1);\n            }\n\n            // limit new value to min/ max value\n            value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n\n            // make sure, new value is an even multiple of interval\n            let diff;\n            if (this.variationBasketQuantity === 0 && this.min !== 0)\n            {\n                diff = (0,number/* formatFloat */.$1)((value - this.min) % this.compInterval, this.compDecimals, true);\n            }\n            else\n            {\n                diff = (0,number/* formatFloat */.$1)(value % this.compInterval, this.compDecimals, true);\n            }\n\n            if (diff > 0 && diff !== this.compInterval)\n            {\n                if (diff < this.compInterval / 2)\n                {\n                    value -= diff;\n                }\n                else\n                {\n                    value += this.compInterval - diff;\n                }\n                value = (0,number/* limit */.b9)(value, this.compMin, this.compMax);\n            }\n\n            // cut fraction\n            value = (0,number/* formatFloat */.$1)(value, this.compDecimals);\n\n            if (value !== this.compValue)\n            {\n                this.compValue = value;\n                this.onValueChanged();\n            }\n            else if (!(0,utils/* isNullOrUndefined */.le)(this.$refs.quantityInputField))\n            {\n                this.$refs.quantityInputField.value = this.displayValue;\n            }\n        },\n\n        fetchQuantityFromBasket()\n        {\n            if (!(0,utils/* isNullOrUndefined */.le)(this.min) && this.variationBasketQuantity >= this.min && this.variationBasketQuantity !== 0)\n            {\n                // set the minimum value to the interval, if the item is already in the basket\n                this.compMin = this.compInterval;\n            }\n            else if (this.variationBasketQuantity === 0)\n            {\n                // reset the minimum, when item is not in the basket\n                this.compMin = this.min;\n            }\n\n            if (!(0,utils/* isNullOrUndefined */.le)(this.max))\n            {\n                // decrease maximum quantity by quantity of variations already in basket\n                this.compMax = this.max - this.variationBasketQuantity;\n\n                if (this.variationBasketQuantity + this.compInterval > this.max)\n                {\n                    this.compMin = 0;\n                    this.compMax = 0;\n                    this.$emit("out-of-stock", true);\n                }\n                else\n                {\n                    this.$emit("out-of-stock", false);\n                }\n            }\n            else\n            {\n                this.$emit("out-of-stock", false);\n            }\n\n            this.setValue(this.compMin);\n        }\n    }\n});\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_QuantityInputvue_type_script_lang_js_ = (QuantityInputvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/QuantityInput.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_QuantityInputvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var QuantityInput = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3401\n')}}]);