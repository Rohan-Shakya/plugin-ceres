"use strict";(self.webpackChunkCeres=self.webpackChunkCeres||[]).push([[25],{4467:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ ItemPrice; }\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/ItemPrice.vue?vue&type=template&id=9c56fb16&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    class: {\n      "has-crossprice": _vm.hasCrossPrice\n    }\n  }, [_vm.showCrossPrice && _vm.hasCrossPrice ? _c("div", {\n    staticClass: "crossprice",\n    class: {\n      "is-special-offer": _vm.hasSpecialOffer\n    }\n  }, [_c("del", {\n    staticClass: "text-muted small text-appearance"\n  }, [_vm.hasSpecialOffer ? [_vm._v("\\n                " + _vm._s(_vm._f("itemCrossPrice")(_vm.currentVariation.prices.default.unitPrice.formatted, true)) + "\\n            ")] : [_vm._v("\\n                " + _vm._s(_vm._f("itemCrossPrice")(_vm.currentVariation.prices.rrp.unitPrice.formatted)) + "\\n            ")]], 2)]) : _vm._e(), _vm._v(" "), _c("span", {\n    staticClass: "price h1",\n    class: {\n      "is-special-offer": _vm.hasSpecialOffer\n    }\n  }, [_c("span", [_vm.showDynamicPrice ? [_vm._v("\\n                " + _vm._s(_vm.$translate("Ceres::Template.dynamicVariationPrice", {\n    price: _vm.$options.filters.currency(_vm.variationTotalPrice, _vm.currentVariation.prices.default.currency)\n  })) + "\\n            ")] : [_vm._v("\\n                " + _vm._s(_vm._f("currency")(_vm.variationTotalPrice, _vm.currentVariation.prices.default.currency)) + "\\n            ")]], 2), _vm._v(" "), _c("sup", [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemFootnote1")))])]), _vm._v(" "), _vm.propertiesWithAdditionalCostsVisible.length ? _c("ul", {\n    staticClass: "text-muted pl-0 list-unstyled"\n  }, _vm._l(_vm.propertiesWithAdditionalCostsVisible, function (property) {\n    return _c("li", {\n      key: property.propertyId\n    }, [_c("span", {\n      staticClass: "d-block"\n    }, [_vm._v("\\n                " + _vm._s(property.property.names.name) + " "), _vm.$options.filters.propertySurcharge(_vm.currentVariation.properties, property.propertyId) > 0 ? [_vm._v("(" + _vm._s(_vm.$translate("Ceres::Template.basketPlusAbbr")) + " " + _vm._s(_vm._f("currency")(_vm._f("propertySurcharge")(_vm.currentVariation.properties, property.propertyId))) + ")")] : _vm._e(), _vm._v(" "), _vm.hasTax(property) ? [_vm._v(_vm._s(_vm.$translate("Ceres::Template.singleItemFootnote1")))] : _vm._e()], 2)]);\n  }), 0) : _vm._e(), _vm._v(" "), _vm.currentVariation.prices.default.lowestPrice.value && _vm.showCrossPrice && _vm.hasCrossPrice ? _c("div", {\n    staticClass: "lowest-price text-muted mb-3"\n  }, [_c("div", {\n    domProps: {\n      innerHTML: _vm._s(_vm.$translate("Ceres::Template.singleItemLowestPrice", {\n        price: _vm.currentVariation.prices.default.lowestPrice.formatted\n      }))\n    }\n  })]) : _vm._e(), _vm._v(" "), _vm.currentVariation.unit ? _c("div", {\n    staticClass: "base-price text-muted my-3",\n    class: {\n      "is-single-piece": _vm.currentVariation.unit && _vm.currentVariation.unit.content === 1 && _vm.currentVariation.unit.unitOfMeasurement === "C62"\n    }\n  }, [_c("div", [_vm._v("\\n            " + _vm._s(_vm.$translate("Ceres::Template.singleItemContent")) + "\\n            "), _c("span", [_vm._v(_vm._s(_vm._f("numberFormat")(_vm.currentVariation.unit.content)) + " ")]), _vm._v(" "), _c("span", [_vm._v(_vm._s(_vm.currentVariation.unit.names.name))])]), _vm._v(" "), _vm.currentVariation.variation.mayShowUnitPrice ? _c("div", [_vm._v("\\n            " + _vm._s(_vm.$translate("Ceres::Template.singleItemUnitPrice")) + "\\n            "), _c("span", {\n    staticClass: "base-price-value"\n  }, [_vm._v("\\n                " + _vm._s(_vm._f("specialOffer")(_vm.variationGraduatedPrice.basePrice, _vm.currentVariation.prices, "basePrice")) + "\\n            ")])]) : _vm._e()]) : _vm._e()]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/ItemPrice.vue?vue&type=template&id=9c56fb16&\n\n// EXTERNAL MODULE: ./resources/js/src/app/helper/OrderPropertyHelper.js\nvar OrderPropertyHelper = __webpack_require__(672);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-2.use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/src/app/components/item/ItemPrice.vue?vue&type=script&lang=js&\n\n/* harmony default export */ var ItemPricevue_type_script_lang_js_ = ({\n  name: "item-price",\n  props: {\n    showCrossPrice: {\n      type: Boolean,\n      default: true\n    }\n  },\n  inject: {\n    itemId: {\n      default: null\n    }\n  },\n  computed: {\n    currentVariation: function currentVariation() {\n      return this.$store.getters["".concat(this.itemId, "/currentItemVariation")];\n    },\n    hasCrossPrice: function hasCrossPrice() {\n      var hasRrpPrice = !!this.currentVariation.prices.rrp && this.currentVariation.prices.rrp.unitPrice.value > this.currentVariation.prices.default.unitPrice.value;\n      var hasBeforePrice = this.hasSpecialOffer && !!this.currentVariation.prices.default && this.currentVariation.prices.default.unitPrice.value > this.currentVariation.prices.specialOffer.unitPrice.value;\n      return hasRrpPrice || hasBeforePrice;\n    },\n    hasSpecialOffer: function hasSpecialOffer() {\n      return !!this.currentVariation.prices.specialOffer;\n    },\n    variationGraduatedPrice: function variationGraduatedPrice() {\n      return this.$store.getters["".concat(this.itemId, "/variationGraduatedPrice")];\n    },\n    variationTotalPrice: function variationTotalPrice() {\n      return this.$store.getters["".concat(this.itemId, "/variationTotalPrice")];\n    },\n    showDynamicPrice: function showDynamicPrice() {\n      var state = this.$store.state.items[this.itemId];\n      return App.config.item.showPleaseSelect && App.isCheapestSorting && state.variationSelect && !state.variationSelect.isVariationSelected && (state.pleaseSelectVariationId === this.currentVariation.variation.id || state.pleaseSelectVariationId === 0);\n    },\n    propertiesWithAdditionalCostsVisible: function propertiesWithAdditionalCostsVisible() {\n      var _this = this;\n      return this.currentVariation.properties.filter(function (entry) {\n        var property = entry.property;\n        return property && property.isShownAsAdditionalCosts && property.isShownOnItemPage && (!property.isOderProperty && !App.useVariationOrderProperties || _this.isVariationOrderPropertyRequiredPreselected(property));\n      });\n    }\n  },\n  methods: {\n    isVariationOrderPropertyRequiredPreselected: function isVariationOrderPropertyRequiredPreselected(property) {\n      return property.isRequired && property.isPreSelected && property.isOderProperty && App.useVariationOrderProperties;\n    },\n    hasTax: function hasTax(property) {\n      return (0,OrderPropertyHelper/* hasVat */.uP)(property);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/ItemPrice.vue?vue&type=script&lang=js&\n /* harmony default export */ var item_ItemPricevue_type_script_lang_js_ = (ItemPricevue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/src/app/components/item/ItemPrice.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  item_ItemPricevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* harmony default export */ var ItemPrice = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4467\n')}}]);